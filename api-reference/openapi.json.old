{
  "openapi": "3.0.1",
  "info": {
    "title": "Connect Webservices",
    "description": "Rest API Documentation",
    "contact": {
      "email": "purple@masternaut.com"
    },
    "license": {
      "name": "Â© 2017 Masternaut Limited",
      "url": ""
    },
    "version": "113.0.2509051139"
  },
  "servers": [
    {
      "url": "https://api.masternautconnect.com/connect-webservices/services/public/v1",
      "description": "Product Server"
    },
    {
      "url": "https://int2-api.masternautconnect.com/connect-webservices/services",
      "description": "INT2 Server"
    }
  ],
  "paths": {
    "/public/v1/customer/{customerId}/alert/events": {
      "post": {
        "tags": [
          "/alert"
        ],
        "operationId": "createAlertEvents",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AlertEventDto"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Alert",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/alert"
        ],
        "operationId": "optionsCreateAlertEvents",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/alert/history/driver": {
      "get": {
        "tags": [
          "/alert"
        ],
        "operationId": "getPersonAlertHistory",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberEmail",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberTelephone",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberWebUser",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enableSecondaryGroupAssignments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultAlertHistoryDto"
                }
              }
            }
          }
        },
        "summary": "Driver Alert History",
        "description": "Returns details of alerts that were triggered for a driver in the specified period. The value specified for the endDate cannot be before startDate and the period cannot be more than 7 days. Either driverId or groupId must be specified. If driverId is specified, then only alerts for the specified driver are included in the output. If"
      },
      "options": {
        "tags": [
          "/alert"
        ],
        "operationId": "optionsGetPersonAlertHistory",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/alert/history/vehicle": {
      "get": {
        "tags": [
          "/alert"
        ],
        "operationId": "getVehicleAlertHistory",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberEmail",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberTelephone",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberWebUser",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enableSecondaryGroupAssignments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultAlertHistoryDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Alert History",
        "description": "Returns details of alerts that were triggered for a vehicle in the specified period. The value specified for the endDate cannot be before startDate and the period cannot be more than 7 days. Either vehicleId or groupId must be specified. If vehicleId is specified, then only alerts for the specified vehicle are included in the output. If groupId is specified, then alerts that were triggered for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are more than 100 triggered alerts that match the search criteria, then by default only the first 100 triggered alerts are returned. To view details of the other alerts you will need to specify values for pageSize and pageIndex."
      },
      "options": {
        "tags": [
          "/alert"
        ],
        "operationId": "optionsGetVehicleAlertHistory",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/alert/search": {
      "post": {
        "tags": [
          "/alert"
        ],
        "operationId": "searchAlerts",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/AlertSearchDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultAlertDto"
                }
              }
            }
          }
        },
        "summary": "Search Alert",
        "description": "Searches and filters data based on specified criteria."
      },
      "options": {
        "tags": [
          "/alert"
        ],
        "operationId": "optionsSearchAlerts",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/appshellmenu": {
      "get": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "getAppShellMenus",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppShellMenu"
                  }
                }
              }
            }
          }
        },
        "summary": "List App Shell Menu",
        "description": "Retrieves a list of available resources and their information."
      },
      "post": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "createAppShellMenu",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/AppShellMenu"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/AppShellMenu"
                }
              }
            }
          }
        },
        "summary": "Create App Shell Menu",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "options",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/appshellmenu/{key}": {
      "get": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "getAppShellMenu",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/AppShellMenu"
                }
              }
            }
          }
        },
        "summary": "Get App Shell Menu",
        "description": "Retrieves specific information for the requested resource."
      },
      "put": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "updateAppShellMenu",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/AppShellMenu"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/AppShellMenu"
                }
              }
            }
          }
        },
        "summary": "Update App Shell Menu",
        "description": "Updates an existing resource with new data."
      },
      "delete": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "deleteAppShellMenu",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete App Shell Menu",
        "description": "Deletes the specified resource from the system."
      },
      "options": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "optionsDetail",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/appshellmenu/getSsoPartners": {
      "get": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "getSsoPartners",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ThirdPartyDto"
                  }
                }
              }
            }
          }
        },
        "summary": "List App Shell Menu",
        "description": "Retrieves a list of available resources and their information."
      }
    },
    "/public/v1/appshellmenu/structure": {
      "get": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "getStructure",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppShellMenuItem"
                  }
                }
              }
            }
          }
        },
        "summary": "List App Shell Menu",
        "description": "Retrieves a list of available resources and their information."
      },
      "options": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "optionsStructure",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/appshellmenu/{key}/feature/{featureId}": {
      "post": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "linkAppShellMenu",
        "parameters": [
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/LinkAppShellMenuRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/MasternauthFeatureDto"
                }
              }
            }
          }
        },
        "summary": "Create App Shell Menu",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "optionsLinkAppShellMenu",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/appshellmenu/feature/{featureId}": {
      "delete": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "unlinkAppShellMenu",
        "parameters": [
          {
            "name": "featureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/MasternauthFeatureDto"
                }
              }
            }
          }
        },
        "summary": "Delete App Shell Menu",
        "description": "Deletes the specified resource from the system."
      },
      "options": {
        "tags": [
          "/appshellmenu"
        ],
        "operationId": "optionsUnlinkAppShellMenu",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/businesstravel/detail/driver": {
      "get": {
        "tags": [
          "/businesstravel"
        ],
        "operationId": "getDriverDetails",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classifications",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultTaxAndExpenseJourneyDetailResultDto"
                }
              }
            }
          }
        },
        "summary": "Driver Detailed Business Travel",
        "description": "Returns detailed business travel information for a driver for a journey that has been classified where the journey started in the period. The end date of the journey does not have to be within the period. No details are returned for journeys that have not been classified and submitted by the driver. Either driverIds or groupId must be specified as an input parameter. If groupId is specified, then the business travel for all drivers in the specified group are included in the output. Asset Day Limit: The asset day limit on this endpoint is 50 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction."
      },
      "options": {
        "tags": [
          "/businesstravel"
        ],
        "operationId": "optionsTaxAndExpenseJourneyDetailDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/businesstravel/summary/driver": {
      "get": {
        "tags": [
          "/businesstravel"
        ],
        "operationId": "getTaxAndExpenseJourneySummaryDriver",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classifications",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TaxAndExpenseManagerSummaryResultDtoTaxAndExpenseJourneySummaryDriverResultDto"
                }
              }
            }
          }
        },
        "summary": "Get Business Travel Summary",
        "description": "Retrieves summary information and aggregated data."
      },
      "options": {
        "tags": [
          "/businesstravel"
        ],
        "operationId": "optionsTaxAndExpenseJourneySummaryDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/businesstravel/summary/vehicle": {
      "get": {
        "tags": [
          "/businesstravel"
        ],
        "operationId": "getTaxAndExpenseJourneySummaryVehicle",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classifications",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TaxAndExpenseManagerSummaryResultDtoTaxAndExpenseJourneySummaryVehicleResultDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Business Travel",
        "description": "Returns summarised business travel information for a vehicle for all journeys where the journey started in the period. The end date of the journey does not have to be within the period. If vehicleIds or groupId is not specified, that details for all vehicles are returned. If groupId is specified, then the business travel for all vehicles in the specified group are included in the output. Either vehicleIds or groupId can be specified as an input parameter, an error is returned if both are specified."
      },
      "options": {
        "tags": [
          "/businesstravel"
        ],
        "operationId": "optionsTaxAndExpenseJourneySummaryVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/businesstravel/detail/vehicle": {
      "get": {
        "tags": [
          "/businesstravel"
        ],
        "operationId": "getVehicleDetails",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classifications",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultTaxAndExpenseJourneyDetailResultDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Detailed Business Travel",
        "description": "Returns detailed business travel information for a vehicle for a journey that has been submitted and where the journey started in the period. The end date of the journey does not have to be within the period. No details are returned for journeys that have not been classified and submitted by the driver. Either vehicleIds or groupId must be specified as an input parameter. If groupId is specified, then the business travel for all vehicles in the specified group are included in the output. Asset Day Limit: The asset day limit on this endpoint is 50 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction."
      },
      "options": {
        "tags": [
          "/businesstravel"
        ],
        "operationId": "optionsTaxAndExpenseJourneyDetailVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/device/{deviceId}": {
      "post": {
        "tags": [
          "/device"
        ],
        "operationId": "createDeviceRegistration",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRegistrationDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDetails"
                }
              }
            }
          }
        },
        "summary": "Create Device",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/customer/{customerId}/device/{deviceId}/batchposition": {
      "post": {
        "tags": [
          "/device"
        ],
        "operationId": "managePositionData",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceTrackingFrame"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Device",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/customer/{customerId}/driver/{driverId}/temporaryPrivacy": {
      "post": {
        "tags": [
          "/driver"
        ],
        "operationId": "addTempPrivacy",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[\\w]*$",
              "type": "string"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "next",
              "enum": [
                "today",
                "next"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Driver",
        "description": "Creates a new resource with the provided data."
      },
      "delete": {
        "tags": [
          "/driver"
        ],
        "operationId": "removeTempPrivacy",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete Driver",
        "description": "Deletes the specified resource from the system."
      }
    },
    "/public/v1/customer/{customerId}/driver": {
      "get": {
        "tags": [
          "/driver"
        ],
        "summary": "List Driver",
        "description": "Returns details for a driver. If there are more than 50 drivers, then by default only details for the first 50 drivers are returned. To view details for the other drivers you will need to specify values for pageSize and pageIndex.",
        "operationId": "findDrivers",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "defaultVehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keys",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Drivers were successfully returned or empty if none of drivers fulfill criteria"
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        }
      },
      "post": {
        "tags": [
          "/driver"
        ],
        "summary": "Add Driver",
        "operationId": "createDriver",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriverDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Drivers were successfully created to the hierarchy node."
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        },
        "description": "POST request to add a new driver.  When adding a new driver, the identifier for the newly added driver is included in the JSON object returned as the response.  The details for the driver are in a JSON object included in the HTTP body.  Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\". "
      },
      "options": {
        "tags": [
          "/driver"
        ],
        "operationId": "optionsDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/driver/{driverId}": {
      "get": {
        "tags": [
          "/driver"
        ],
        "operationId": "getDriver",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDto"
                }
              }
            }
          }
        },
        "summary": "Update Driver",
        "description": "PUT request to update the details for an existing driver.  This is a partial update and only those values specified will be updated.  The update details for the driver are in a JSON object included in the HTTP body.  Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\". "
      },
      "put": {
        "tags": [
          "/driver"
        ],
        "summary": "Update Driver",
        "operationId": "updateDriver",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriverDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Drivers were successfully created to the hierarchy node."
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        },
        "description": "PUT request to update the details for an existing driver.  This is a partial update and only those values specified will be updated.  The update details for the driver are in a JSON object included in the HTTP body.  Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\". "
      },
      "delete": {
        "tags": [
          "/driver"
        ],
        "operationId": "deleteDriver",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Update Driver",
        "description": "PUT request to update the details for an existing driver.  This is a partial update and only those values specified will be updated.  The update details for the driver are in a JSON object included in the HTTP body.  Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\". "
      },
      "options": {
        "tags": [
          "/driver"
        ],
        "operationId": "optionsOneDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/driver/{driverId}/enableAsUser": {
      "post": {
        "tags": [
          "/driver"
        ],
        "operationId": "enableAsUser",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreateResponseDto"
                }
              }
            }
          }
        },
        "summary": "Enable Driver as a User",
        "description": "POST request to enable a driver to also be a Connect Web User. The identifier for the newly added web user is included in the JSON object returned as the response. You cannot include the password for the new web user in the same request as enabling the user, instead you must use the Set User Password endpoint and include the token from the output response of this endpoint. You cannot enable a driver to be a user if the driver has already been enabled to be a user."
      }
    },
    "/public/v1/customer/{customerId}/driver/{driverId}/vehicle": {
      "get": {
        "tags": [
          "/driver"
        ],
        "operationId": "getAssignedVehicle",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "en-GB"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/AssignedVehicleDto"
                }
              }
            }
          }
        },
        "summary": "Unlink Driver Default Vehicle",
        "description": "DELETE request to unlink a driver to their default vehicle without having to specify the existing default vehicle. An error is returned in the following cases: â There is no default vehicle assigned to the driver."
      },
      "delete": {
        "tags": [
          "/driver"
        ],
        "operationId": "unlinkDefaultVehicle",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDto"
                }
              }
            }
          }
        },
        "summary": "Unlink Driver Default Vehicle",
        "description": "DELETE request to unlink a driver to their default vehicle without having to specify the existing default vehicle. An error is returned in the following cases: â There is no default vehicle assigned to the driver."
      }
    },
    "/public/v1/customer/{customerId}/driver/{driverId}/userInvitation": {
      "post": {
        "tags": [
          "/driver"
        ],
        "operationId": "inviteAsWebUser",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInvitationDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/MasternauthUserInvitationBulkResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Driver",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/customer/{customerId}/driver/{driverId}/vehicle/{vehicleId}": {
      "post": {
        "tags": [
          "/driver"
        ],
        "operationId": "linkVehicle",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDto"
                }
              }
            }
          }
        },
        "summary": "Set Driver Default Vehicle",
        "description": "POST request to set the default vehicle for a driver to the specified {vehicleId}.  An error is returned in the following cases: â If there is already a default vehicle assigned to the driver;  â If the vehicle is already assigned to be the default vehicle for another driver; "
      },
      "delete": {
        "tags": [
          "/driver"
        ],
        "operationId": "unlinkVehicle",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDto"
                }
              }
            }
          }
        },
        "summary": "Delete Driver Default Vehicle",
        "description": "DELETE request to delete the default vehicle for a driver.  An error is returned in the following cases: â There is no default vehicle assigned to the driver.  â The {vehicleId} does not match the existing default vehicle for the driver. "
      },
      "options": {
        "tags": [
          "/driver"
        ],
        "operationId": "optionsLinkDriverVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/driver/{driverId}/vehicle/{vehicleId}/temporary": {
      "post": {
        "tags": [
          "/driver"
        ],
        "operationId": "linkVehicleTemp",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[\\w]*$",
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[\\w]*$",
              "type": "string"
            }
          },
          {
            "name": "duration",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "next",
              "enum": [
                "today",
                "next"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Driver",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/customer/{customerId}/driver/{driverId}/vehicle/temporary": {
      "delete": {
        "tags": [
          "/driver"
        ],
        "operationId": "unlinkVehicleTemp",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete Driver",
        "description": "Deletes the specified resource from the system."
      }
    },
    "/public/v1/customer/{customerId}/driverbehaviourmetrics/rankings/group": {
      "post": {
        "tags": [
          "customers"
        ],
        "operationId": "calculateDriverBehaviourMetricsRankingsForGroup",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/DriverBehaviourPersonMetricsRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviourMetricPersonRankingDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Driver Behaviour Group Ranking",
        "description": "POST request to return the behaviour rank of a driver in their group. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate should be at least 7 days. The details for the user are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\"."
      }
    },
    "/public/v1/customer/{customerId}/driverbehaviourmetrics/vehicle/summary": {
      "get": {
        "tags": [
          "customers"
        ],
        "operationId": "getSummaryByAsset",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultDrivingBehaviourSummaryDto"
                }
              }
            }
          }
        },
        "summary": "Driver Behaviour Vehicle Summary",
        "description": "Returns the behaviour summary metrics for a vehicle. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate must be at least 7 days and cannot be more than 31 days. A value for either vehicleId or groupId must be specified If there are more than 50 details that match the search criteria, then by default only the first 50 summary details are returned. To view details of the summary details you will need to specify values for pageSize and pageIndex."
      }
    },
    "/public/v1/customer/{customerId}/driverbehaviourmetrics/driver/summary": {
      "get": {
        "tags": [
          "customers"
        ],
        "operationId": "getSummaryByPerson",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultDrivingBehaviourSummaryDto"
                }
              }
            }
          }
        },
        "summary": "Driver Behaviour Driver Summary",
        "description": "Returns the driver behaviour summary metrics for a driver. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate must be at least 7 days and cannot be more than 31 days. A value for either driverId or groupId must be specified If there are more than 50 details that match the search criteria, then by default only the first 50 summary details are returned. To view details of the summary details you will need to specify values for pageSize and pageIndex."
      }
    },
    "/public/v1/customer/{customerId}/driverbehaviourmetrics/group": {
      "post": {
        "tags": [
          "customers"
        ],
        "operationId": "metricsForGroup",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/GroupBehaviourMetricRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviourMetricDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Driver Behaviour Group Metrics",
        "description": "POST request to return behaviour metrics for a group for the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate should be at least 7 days. The details for the user are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\"."
      }
    },
    "/public/v1/customer/{customerId}/driverbehaviourmetrics": {
      "post": {
        "tags": [
          "customers"
        ],
        "operationId": "metricsForPerson",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/DriverBehaviourMetricRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviourMetricDailyDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Driver Behaviour Metrics",
        "description": "POST request to return the behaviour metrics for each day in the period for a driver. As well as a value for the behaviour metric for each day, the response also includes a value for the behaviour metric for the whole of the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate should be at least 7 days. The details for the user are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\"."
      }
    },
    "/public/v1/driverbehaviourmetrics/rankings/group": {
      "post": {
        "tags": [
          "/driverbehaviourmetrics"
        ],
        "operationId": "calculateDriverBehaviourMetricsRankingsForGroup_1",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/DriverBehaviourPersonMetricsRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviourMetricPersonRankingDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Create Driver",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/driverbehaviourmetrics/group": {
      "post": {
        "tags": [
          "/driverbehaviourmetrics"
        ],
        "operationId": "metricsForGroup_1",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/BehaviourMetricRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviourMetricDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Create Driver",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/driverbehaviourmetrics"
        ],
        "operationId": "optionsMetricsForGroup",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/ecoscore/driver": {
      "get": {
        "tags": [
          "/ecoscore"
        ],
        "operationId": "getEcoScoreDriver",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EcoScorePersonResponseDto"
                }
              }
            }
          }
        },
        "summary": "Driver Score",
        "description": "Note: â The Driver Behaviour endpoints (summary, metrics, group metrics and Group Ranking) should be used instead of EcoDrive Driver Score. Returns the score for a driver based on journeys that started in the specified period. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 90 days"
      },
      "options": {
        "tags": [
          "/ecoscore"
        ],
        "operationId": "optionsEcoScoreDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/ecoscore/event/driver": {
      "get": {
        "tags": [
          "/ecoscore"
        ],
        "operationId": "getEcoScoreEventDriver",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DriverBehaviourEventDateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultEcoScoreEventResponseDto"
                }
              }
            }
          }
        },
        "summary": "Driver Behaviour Driver Events",
        "description": "The following events are taken into account when deriving the Smoother KPI. â Harsh Braking (event id = behaviourHarshBraking) â Harsh Acceleration (event Id = behaviourHarshAcceleration) There is no endpoint that returns the driving events for the Smoother KPI. The 5.4.6 ecoDrive Driver Score Events endpoint can be used to retrieve the required events. This endpoint includes the following events in the output response which should be ignored as they are not used to calculate the Smoother KPI. â Driving over a speed threshold (event id = behaviourOverSpee) â Excessive idling (event id = behaviourExcessiveIdling) â Harsh Cornering (event id = behaviourHarshCornering) â Engine Over revving (event id = behaviourEngineOver"
      },
      "options": {
        "tags": [
          "/ecoscore"
        ],
        "operationId": "optionsEcoScoreEventDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/ecoscore/event/vehicle": {
      "get": {
        "tags": [
          "/ecoscore"
        ],
        "operationId": "getEcoScoreEventVehicle",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DriverBehaviourEventDateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultEcoScoreEventResponseDto"
                }
              }
            }
          }
        },
        "summary": "Driver Behaviour Vehicle Events",
        "description": "The following events are taken into account when deriving the Smoother KPI. â Harsh Braking (event id = behaviourHarshBraking) â Harsh Acceleration (event Id = behaviourHarshAcceleration) There is no endpoint that returns the driving events for the Smoother KPI. The 5,4,5 ecoDrive Vehicle Score Events endpoint can be used to retrieve the required events. The endpoint includes the following events in the output response which should be ignored as they are not used to calculate the Smoother KPI. â Driving over a speed threshold (even"
      },
      "options": {
        "tags": [
          "/ecoscore"
        ],
        "operationId": "optionsEcoScoreEventVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/ecoscore/vehicle": {
      "get": {
        "tags": [
          "/ecoscore"
        ],
        "operationId": "getEcoScoreVehicle",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EcoScoreVehicleResponseDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Score",
        "description": "Note: â The Driver Behaviour endpoints (summary, metrics, group metrics and Group Ranking) should be used instead of EcoDrive Vehicle Score. Returns the score for a vehicle based on journeys that started in the specified period. The end date of the journey does not have to be within the specified period. The value specified for the endDate Cannot be before startDate and the date range between startDate and endDate cannot be more than 90 days One of vehicleId or groupId must be specified. If vehicleId is specified, then details for the specified vehicle are included in the output. If groupId is specified, then details of all vehicles in the specified group are included in the output. Either vehicleId or gro"
      },
      "options": {
        "tags": [
          "/ecoscore"
        ],
        "operationId": "optionsEcoScoreVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/ecoscore/event/vehicle/latest": {
      "get": {
        "tags": [
          "/ecoscore"
        ],
        "summary": "Returns the vehicle score driving events that occurred/were modified after a specified \nmodifiedSinceDate date.\n<u><b>Parameters:</b></u>\n<ul><li><b>modifiedSinceDate</b> (Date) : Only events occurring or modified after this date will be returned. This field is mandatory. Users can calculate this value by taking the maximum lastModifiedTime field from previous invocations of this endpoint or the '/event/vehicle' endpoint.\n</li><li><b>vehicleId</b> (String) : Id of vehicle used for filtering. @Visible validation, mandatory if 'groupId' is not provided, but cannot be both filled\n</li><li><b>groupId</b> (String) : Id of Group used for filtering. @Visible validation, mandatory if 'vehicleId' is not provided, but cannot be both filled\n</li><li><b>eventFilter</b> (String)  : Optional event type corresponding to one of IncidentType enumeration values: RPM, HARSH_BRAKING, HARSH_ACCELERATION, HARSH_CORNERING, SPEEDING, IDLING_INSIDE_BASE, IDLING_OUTSIDE_BASE</li></ul>",
        "operationId": "getLatestEcoScoreEventVehicle",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modifiedSinceDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "eventFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of vehicle score driving events that occurred or were modified after the specified date",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LatestEcoScoreEventDetailsVehicleDto"
                }
              }
            }
          },
          "400": {
            "description": "When VehicleId or GroupId is not provided. Message is: 'One of following properties [VehicleId, GroupId] can not be null'\n\tWhen both VehicleId or GroupId are provided. Message is: 'One of following properties [VehicleId, GroupId] must be null'\n\tWhen given property, VehicleId or GroupId, are not visible for current User. Message is: 'Resource not visible to User'"
          }
        },
        "description": "Retrieves the most recent data and information."
      }
    },
    "/public/v1/ecodrive/driversScore": {
      "get": {
        "tags": [
          "/ecodrive"
        ],
        "operationId": "getEcodriveDriversScore",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userTimezone",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "object",
              "properties": {
                "language": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "variant": {
                  "type": "string"
                },
                "script": {
                  "type": "string"
                },
                "unicodeLocaleAttributes": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "unicodeLocaleKeys": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "displayLanguage": {
                  "type": "string"
                },
                "displayScript": {
                  "type": "string"
                },
                "displayCountry": {
                  "type": "string"
                },
                "displayVariant": {
                  "type": "string"
                },
                "extensionKeys": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "iso3Language": {
                  "type": "string"
                },
                "iso3Country": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "days",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "weeks",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "months",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EcodriveDriversScoreResultDto"
                }
              }
            }
          }
        },
        "summary": "List Driver",
        "description": "Retrieves a list of available resources and their information."
      },
      "options": {
        "tags": [
          "/ecodrive"
        ],
        "operationId": "optionsEcodriveDriversScore",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/ecodrive/summary": {
      "get": {
        "tags": [
          "/ecodrive"
        ],
        "operationId": "getEcodriveSummary",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userTimezone",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "object",
              "properties": {
                "language": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "variant": {
                  "type": "string"
                },
                "script": {
                  "type": "string"
                },
                "unicodeLocaleAttributes": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "unicodeLocaleKeys": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "displayLanguage": {
                  "type": "string"
                },
                "displayScript": {
                  "type": "string"
                },
                "displayCountry": {
                  "type": "string"
                },
                "displayVariant": {
                  "type": "string"
                },
                "extensionKeys": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "iso3Language": {
                  "type": "string"
                },
                "iso3Country": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "days",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "weeks",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "months",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxJourneySummaries",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EcodriveSummaryResultDto"
                }
              }
            }
          }
        },
        "summary": "Get Eco Drive Summary",
        "description": "Retrieves summary information and aggregated data."
      },
      "options": {
        "tags": [
          "/ecodrive"
        ],
        "operationId": "optionsEcodriveSummary",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/ecodrive/summary/driver/triggerEmail": {
      "post": {
        "tags": [
          "/ecodrive"
        ],
        "operationId": "triggerEcoDriveSummaryToPerson",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TriggerEcodriveSummaryRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Driver Summary",
        "description": "Creates summary information and aggregated data."
      }
    },
    "/public/v1/customer/{customerId}/eventTypes": {
      "get": {
        "tags": [
          "/eventTypes"
        ],
        "operationId": "getEventTypes",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultEventTypeDto"
                }
              }
            }
          }
        },
        "summary": "Get Eventtypes",
        "description": "Retrieves specific information for the requested resource."
      },
      "post": {
        "tags": [
          "/eventTypes"
        ],
        "operationId": "createEventType",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventTypeDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeDto"
                }
              }
            }
          }
        },
        "summary": "Create Eventtypes",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/eventTypes"
        ],
        "operationId": "optionsEventTypes",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/eventTypes/{eventKey}": {
      "get": {
        "tags": [
          "/eventTypes"
        ],
        "operationId": "getEventType",
        "parameters": [
          {
            "name": "eventKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeDto"
                }
              }
            }
          }
        },
        "summary": "Get Eventtypes",
        "description": "Retrieves specific information for the requested resource."
      },
      "put": {
        "tags": [
          "/eventTypes"
        ],
        "operationId": "updateEventType",
        "parameters": [
          {
            "name": "eventKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventTypeDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeDto"
                }
              }
            }
          }
        },
        "summary": "Update Eventtypes",
        "description": "Updates an existing resource with new data."
      },
      "delete": {
        "tags": [
          "/eventTypes"
        ],
        "operationId": "deleteEventType",
        "parameters": [
          {
            "name": "eventKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete Eventtypes",
        "description": "Deletes the specified resource from the system."
      },
      "options": {
        "tags": [
          "/eventTypes"
        ],
        "operationId": "optionsEventType",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/expenseSummary/cancel": {
      "post": {
        "tags": [
          "/expenseSummary"
        ],
        "operationId": "cancelUnapprovedExpenseSummaries",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseSummariesCancelRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseSummariesCancelResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Cancel Summary",
        "description": "Creates summary information and aggregated data."
      },
      "options": {
        "tags": [
          "/expenseSummary"
        ],
        "operationId": "optionsForCancelPath",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/expenseSummary/search": {
      "post": {
        "tags": [
          "/expenseSummary"
        ],
        "operationId": "findExpenseSummaries",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseSummaryRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpenseSummaryResultDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Create Search Summary",
        "description": "Creates summary information and aggregated data."
      }
    },
    "/public/v1/customer/{customerId}/expenseSummary": {
      "options": {
        "tags": [
          "/expenseSummary"
        ],
        "operationId": "optionsPersonSettings",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/fuel/driver": {
      "get": {
        "tags": [
          "/fuel"
        ],
        "operationId": "getDriverVehicleConsumptions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriverVehicleConsumptionResultDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Driver Fuel Consumption",
        "description": "Returns the fuel consumption and CO2 information for all journeys where the journey started in the period. The end date of the journey does not have to be within the period. Separate fuel consumption details are returned for each vehicle driven by a driver. Includes the fuel used on a private journey. If a value for driverId or groupId is not specified, then details for all drivers are returned. If groupId is specified, then the fuel consumption for all vehicles in the specified group is included in the output. Either driverId or groupId can be specified as an input parameter, an error is returned if both are specified."
      },
      "options": {
        "tags": [
          "/fuel"
        ],
        "operationId": "optionsDriverVehicleConsumptions",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/fuel/vehicle": {
      "get": {
        "tags": [
          "/fuel"
        ],
        "operationId": "getVehicleConsumptions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleConsumptionResultDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Vehicle Fuel Consumption",
        "description": "Returns the fuel consumption and CO2 information for a vehicle for all journeys where the journey started within the period. The end date of the journey does not have to be within the period. Includes the fuel used on a private journey. If vehicleId or groupId is not specified, then details for all vehicles are returned. If groupId is specified, then the fuel consumption for all vehicles in the specified group is included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified."
      },
      "options": {
        "tags": [
          "/fuel"
        ],
        "operationId": "optionsVehicleConsumptions",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/fuelEvents/fuelTransactions": {
      "get": {
        "tags": [
          "/fuelEvents"
        ],
        "operationId": "findFuelTransactionsForVehicles",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeUnmatchedVehicles",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeMatchedVehicles",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultFuelTransactionDTO"
                }
              }
            }
          }
        },
        "summary": "Fuel Card Transactions",
        "description": "Returns details of the fuel card transaction where the transaction occurred within the specified period. The value specified for the endDate cannot be before startDate. Either vehicleId or groupId must be specified. If vehicleId is specified, then transactions for the specified vehicle are included in the output. If groupId is specified, then the details for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If IncludeUnmatchedVehicles is set to true, then transactions not matched to a vehicle registered in Connect will be included in the output response. If a value is not specifi"
      },
      "options": {
        "tags": [
          "/fuelEvents"
        ],
        "operationId": "optionsFuelTransactions",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/group": {
      "get": {
        "tags": [
          "/group"
        ],
        "summary": "List Group",
        "description": "Returns the group hierarchy starting from the root node. ",
        "operationId": "getAllGroups",
        "responses": {
          "200": {
            "description": "List of Groups visible to request context with counts of drivers and vehicles",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupSearchResultDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "/group"
        ],
        "summary": "Update Group",
        "description": "PUT request to update the group that matches the {id} in the JSON object included in the HTTP body.  This is a partial update and only those details specified in the JSON body will be updated.  The request will fail when the updated group name contains illegal characters.  The details for the group to update are in a JSON object included in the HTTP body.  Ensure you set the content-type of the request body to \"application/json;charset=UTF-8\". ",
        "operationId": "updateGroup",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/GroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated group.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. When id is incorrect and group is not visible to user or is blank or doesn't fit for selected size.\nWhen name doesn't fit for selected size.\nWhen parentId is not visible to user\nWhen personIds or vehicleIds are not visible to user",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiErrorDto"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict message, when group name is already taken by another group or when parentId is ID of group which is currently one of group descendants.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "/group"
        ],
        "summary": "Add Group",
        "description": "POST request to add a new group. The identifier for the newly added group is included in the JSON object returned as the response.  The request will fail when the group name contains illegal characters.  The details for the location category in a JSON object included in the HTTP body.  Ensure you set the content-type of the request body to \"application/json;charset=UTF-8\". ",
        "operationId": "createGroup",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/GroupQueryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created group",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "400": {
            "description": "When name is blank or size name does not fit.\nWhen size parentId does not fit or it does not match pattern or it isn't visible for user.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiErrorDto"
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "/group"
        ],
        "operationId": "optionsGroup",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/group/{nodeId}": {
      "delete": {
        "tags": [
          "/group"
        ],
        "summary": "Delete Group",
        "description": "DELETE request to delete the group that matches the {groupId}.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "ID of group to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "groupID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - group has been deleted",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entity": {
                      "type": "object"
                    },
                    "length": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "location": {
                      "type": "string",
                      "format": "uri"
                    },
                    "language": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string"
                        },
                        "displayName": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "variant": {
                          "type": "string"
                        },
                        "script": {
                          "type": "string"
                        },
                        "unicodeLocaleAttributes": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unicodeLocaleKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "displayLanguage": {
                          "type": "string"
                        },
                        "displayScript": {
                          "type": "string"
                        },
                        "displayCountry": {
                          "type": "string"
                        },
                        "displayVariant": {
                          "type": "string"
                        },
                        "extensionKeys": {
                          "uniqueItems": true,
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "iso3Language": {
                          "type": "string"
                        },
                        "iso3Country": {
                          "type": "string"
                        }
                      }
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastModified": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "headers": {
                      "type": "object",
                      "properties": {
                        "empty": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "cookies": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "path": {
                            "type": "string"
                          },
                          "domain": {
                            "type": "string"
                          },
                          "comment": {
                            "type": "string"
                          },
                          "maxAge": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "expiry": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "secure": {
                            "type": "boolean"
                          },
                          "httpOnly": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "empty": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    },
                    "statusInfo": {
                      "type": "object",
                      "properties": {
                        "family": {
                          "type": "string",
                          "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                          ]
                        },
                        "statusCode": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "reasonPhrase": {
                          "type": "string"
                        }
                      }
                    },
                    "allowedMethods": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "stringHeaders": {
                      "type": "object",
                      "properties": {
                        "empty": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "mediaType": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "subtype": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "wildcardType": {
                          "type": "boolean"
                        },
                        "wildcardSubtype": {
                          "type": "boolean"
                        }
                      }
                    },
                    "entityTag": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "weak": {
                          "type": "boolean"
                        }
                      }
                    },
                    "links": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "uri": {
                            "type": "string",
                            "format": "uri"
                          },
                          "type": {
                            "type": "string"
                          },
                          "params": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "title": {
                            "type": "string"
                          },
                          "uriBuilder": {
                            "type": "object"
                          },
                          "rel": {
                            "type": "string"
                          },
                          "rels": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When group to be deleted is not visible to user.\nWhen group is customer (root) node or it is not allowed to be deleted.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiErrorDto"
                  }
                }
              }
            }
          },
          "409": {
            "description": "When group contains any person or vehicle or it has children nodes.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/idling/detail/vehicle": {
      "get": {
        "tags": [
          "/idling"
        ],
        "operationId": "getAssetIdlingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "idlingDurationSeconds",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultIdlingDetailDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Idling",
        "description": "Returns idling details for a vehicle for each idling activity block that started in the specified period. No details for idling that occurred inside a private journey are returned. The end date of the idling activity block does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days Either vehicleId or groupId must be specified. If vehicleId is specified, then idling activity for the specified vehicle is included in the output. If groupId is specified, then idling for all ve"
      }
    },
    "/public/v1/customer/{customerId}/idling/detail/driver": {
      "get": {
        "tags": [
          "/idling"
        ],
        "operationId": "getPersonIdlingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "idlingDurationSeconds",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultIdlingDetailDto"
                }
              }
            }
          }
        },
        "summary": "Driver Idling",
        "description": "Returns idling details for a driver for each idling activity block that started in the specified period. No details for idling that occurred inside a private journey. The end date of the idling activity block does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days Either driverId or groupId must be specified. If driverId is specified, then idling activity for the specified driver is included in the output. If groupId is specified, then idling for all drivers in the specified group is included in the output. Either driverId"
      }
    },
    "/public/v1/customer/{customerId}/idling/detail/driver/triggerEmail": {
      "post": {
        "tags": [
          "/idling"
        ],
        "operationId": "triggerIdlingDetailToPerson",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TriggerIdlingDetailRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Driver Details",
        "description": "Creates detailed information and comprehensive data."
      }
    },
    "/public/v1/customer/{customerId}/input/usage/driver": {
      "get": {
        "tags": [
          "/input"
        ],
        "operationId": "getInputUsageDriver",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enableSecondaryGroupAssignments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInputUsageDto"
                }
              }
            }
          }
        },
        "summary": "Driver Input Usage",
        "description": "Returns input usage details for each instance when an input on a vehicle was activated on a vehicle driven by the driver in the specified period. The input deactivation does not have to be within the specified period. Details of an input activated during a private journey are not included in the response. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 90 days. A value for driverId must be specified and only inputs activated on a vehicle driven by the specified driver are included in the output. If there are more than 50 input usage details that match the search criteria, then by default only the first 5"
      },
      "options": {
        "tags": [
          "/input"
        ],
        "operationId": "optionsInputUsageDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/input/usage/vehicle": {
      "get": {
        "tags": [
          "/input"
        ],
        "operationId": "getInputUsageVehicle",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enableSecondaryGroupAssignments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInputUsageDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Input Usage",
        "description": "Returns input usage details for each instance when an input on a vehicle was activated in the specified period. The input deactivation does not have to be within the specified period. Details of an input activated during a private journey are not included in the response. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 90 days. A value for vehicleId must be specified and only inputs activated on the specified vehicle are included in the output. If there are more than 50 input usage details that match the search criteria, then b"
      },
      "options": {
        "tags": [
          "/input"
        ],
        "operationId": "optionsInputUsageVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/inputEvents/asset/{assetId}": {
      "get": {
        "tags": [
          "/inputEvents"
        ],
        "operationId": "getInputEventsForAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enableSecondaryGroupAssignments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInputEventDto"
                }
              }
            }
          }
        },
        "summary": "Get Input",
        "description": "Retrieves specific information for the requested resource."
      },
      "options": {
        "tags": [
          "/inputEvents"
        ],
        "operationId": "optionsInputEventAsset",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/inputEvents": {
      "get": {
        "tags": [
          "/inputEvents"
        ],
        "operationId": "getInputEventsForAssets",
        "parameters": [
          {
            "name": "eventKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enableSecondaryGroupAssignments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampedWithPaginationResultInputEventDto"
                }
              }
            }
          }
        },
        "summary": "Get Input",
        "description": "Retrieves specific information for the requested resource."
      }
    },
    "/public/v1/customer/{customerId}/inputEvents/driver/{driverId}": {
      "get": {
        "tags": [
          "/inputEvents"
        ],
        "operationId": "getInputEventsForDriver",
        "parameters": [
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "enableSecondaryGroupAssignments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInputEventDto"
                }
              }
            }
          }
        },
        "summary": "Get Driver",
        "description": "Retrieves specific information for the requested resource."
      },
      "options": {
        "tags": [
          "/inputEvents"
        ],
        "operationId": "optionsInputEventDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/inputEvents/latest": {
      "get": {
        "tags": [
          "/inputEvents"
        ],
        "operationId": "getLatestInputEvents",
        "parameters": [
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enableSecondaryGroupAssignments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LatestInputEventsDto"
                }
              }
            }
          }
        },
        "summary": "Get Latest Input",
        "description": "Retrieves the most recent data and information."
      },
      "options": {
        "tags": [
          "/inputEvents"
        ],
        "operationId": "optionsLatestInputEvents",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/inputTypes": {
      "get": {
        "tags": [
          "/inputTypes"
        ],
        "operationId": "getInputTypes",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInputTypeDto"
                }
              }
            }
          }
        },
        "summary": "Get Input",
        "description": "Retrieves specific information for the requested resource."
      },
      "post": {
        "tags": [
          "/inputTypes"
        ],
        "operationId": "createInputType",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InputTypeDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InputTypeDto"
                }
              }
            }
          }
        },
        "summary": "Create Input",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/inputTypes"
        ],
        "operationId": "optionsInputTypes",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/inputTypes/{inputKey}": {
      "get": {
        "tags": [
          "/inputTypes"
        ],
        "operationId": "getInputType",
        "parameters": [
          {
            "name": "inputKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InputTypeDto"
                }
              }
            }
          }
        },
        "summary": "Get Input",
        "description": "Retrieves specific information for the requested resource."
      },
      "put": {
        "tags": [
          "/inputTypes"
        ],
        "operationId": "updateInputType",
        "parameters": [
          {
            "name": "inputKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InputTypeDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InputTypeDto"
                }
              }
            }
          }
        },
        "summary": "Update Input",
        "description": "Updates an existing resource with new data."
      },
      "delete": {
        "tags": [
          "/inputTypes"
        ],
        "operationId": "deleteInputType",
        "parameters": [
          {
            "name": "inputKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete Input",
        "description": "Deletes the specified resource from the system."
      },
      "options": {
        "tags": [
          "/inputTypes"
        ],
        "operationId": "optionsInputType",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/insanity/history": {
      "delete": {
        "tags": [
          "/insanity"
        ],
        "operationId": "clearHistory",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete Data Protection History",
        "description": "Deletes historical data and records."
      }
    },
    "/public/v1/customer/{customerId}/insanity/isProtectionEnabled": {
      "get": {
        "tags": [
          "/insanity"
        ],
        "operationId": "isProtectionEnabled",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "summary": "Get Data Protection",
        "description": "Retrieves specific information for the requested resource."
      }
    },
    "/public/v1/customer/{customerId}/insanity/protectionEnabled": {
      "post": {
        "tags": [
          "/insanity"
        ],
        "operationId": "protectionEnabled",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Data Protection",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/assets/asset/{assetId}": {
      "get": {
        "tags": [
          "/interestedparty/assets"
        ],
        "operationId": "getVehicle",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InterestedPartyVehicleDto"
                }
              }
            }
          }
        },
        "summary": "Get Interested Party",
        "description": "Retrieves specific information for the requested resource."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/assets": {
      "post": {
        "tags": [
          "/interestedparty/assets"
        ],
        "operationId": "listVehicles",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InterestedPartyVehicleRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInterestedPartyVehicleDto"
                }
              }
            }
          }
        },
        "summary": "Create Interested Party",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/usage": {
      "post": {
        "tags": [
          "/interestedparty/usage"
        ],
        "operationId": "listVehiclesUsage",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InterestedPartyAssetSummaryRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInterestedPartyAssetSummaryResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Interested Party",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/location": {
      "post": {
        "tags": [
          "/interestedparty/location"
        ],
        "operationId": "listCurrentPositionResponses",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InterestedPartyCurrentPositionResultsRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInterestedPartyCurrentPositionResultsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Interested Party",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/location/asset/{assetId}": {
      "get": {
        "tags": [
          "/interestedparty/location"
        ],
        "operationId": "listCurrentPositionResponsesByAssetId",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InterestedPartyCurrentPositionResultsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get Interested Party",
        "description": "Retrieves specific information for the requested resource."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/faultmaintenance": {
      "post": {
        "tags": [
          "/interestedparty/faultmaintenance"
        ],
        "operationId": "listVehiclesFaultMaintenance",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InterestedPartyFaultMaintenanceRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInterestedPartyFaultMaintenanceResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Interested Party",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/faultmaintenance/asset/{assetId}": {
      "get": {
        "tags": [
          "/interestedparty/faultmaintenance"
        ],
        "operationId": "listVehiclesFaultMaintenanceByAssetId",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InterestedPartyFaultMaintenanceResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get Interested Party",
        "description": "Retrieves specific information for the requested resource."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/odometer/asset/{assetId}": {
      "get": {
        "tags": [
          "/interestedparty/odometer"
        ],
        "operationId": "listVehicleOdometerByAssetId",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InterestedPartyVehicleOdometerResponseDTO"
                }
              }
            }
          }
        },
        "summary": "Get Interested Party",
        "description": "Retrieves specific information for the requested resource."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/odometer": {
      "post": {
        "tags": [
          "/interestedparty/odometer"
        ],
        "operationId": "listVehiclesOdometer",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InterestedPartyVehicleOdometerRequestDTO"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInterestedPartyVehicleOdometerResponseDTO"
                }
              }
            }
          }
        },
        "summary": "Create Interested Party",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/service": {
      "post": {
        "tags": [
          "/interestedparty/service"
        ],
        "operationId": "listServiceDueDate",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InterestedPartyServiceDueDateRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInterestedPartyServiceDueDateResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Interested Party",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/service/asset/{assetId}": {
      "get": {
        "tags": [
          "/interestedparty/service"
        ],
        "operationId": "listServiceDueDate_1",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InterestedPartyServiceDueDateResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get Interested Party",
        "description": "Retrieves specific information for the requested resource."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/tag/add": {
      "post": {
        "tags": [
          "/interestedparty/tag"
        ],
        "operationId": "addInterestedPartyTagToAssets",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[\\w]*$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InterestedPartyTagRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Interested Party",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/tag/list": {
      "get": {
        "tags": [
          "/interestedparty/tag"
        ],
        "operationId": "listInterestedPartyTags",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InterestedPartyTagsDto"
                }
              }
            }
          }
        },
        "summary": "Get Interested Party",
        "description": "Retrieves specific information for the requested resource."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/tag/list/asset/{assetId}": {
      "get": {
        "tags": [
          "/interestedparty/tag"
        ],
        "operationId": "listInterestedPartyTagsForAsset",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/InterestedPartyTagsDto"
                }
              }
            }
          }
        },
        "summary": "Get Interested Party",
        "description": "Retrieves specific information for the requested resource."
      }
    },
    "/public/v1/interestedparty/{interestedPartyId}/tag/remove": {
      "post": {
        "tags": [
          "/interestedparty/tag"
        ],
        "operationId": "removeInterestedPartyTagFromAssets",
        "parameters": [
          {
            "name": "interestedPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[\\w]*$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/InterestedPartyTagRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Interested Party",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/customer/{customerId}/io": {
      "put": {
        "tags": [
          "/io"
        ],
        "operationId": "manageInputs",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PartnerIoFrameDto"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/IoManagementResponseDto"
                }
              }
            }
          }
        },
        "summary": "Update Input/Output",
        "description": "Updates an existing resource with new data."
      }
    },
    "/public/v1/customer/{customerId}/journey/detail/driver": {
      "get": {
        "tags": [
          "/journey/detail"
        ],
        "summary": "Driver Journeys",
        "description": "Returns summary journey details for a driver for each journey that started in the specified period. For a private journey only limited details are returned. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate. Either driverId or groupId must be specified. If driverId is specified, then only journeys for the specified driver are included in the output. If groupId is specified, then the details for all drivers in the specified group are included in the output. Either driverId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are mo",
        "operationId": "getJourneyDetailDriver",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List for Journeys Details (TimestampedWithPaginationResult) selected by GroupId or DriverId, and from given Execution time. May be empty list if now Journeys has been found."
          },
          "400": {
            "description": "When DriverId or GroupId is not provided. Message is: 'One of following properties [DriverId, GroupId] can not be null'\n\tWhen both DriverId or GroupId are provided. Message is: 'One of following properties [DriverId, GroupId] must be null'\n\tWhen given property, DriverId or GroupId, are not visible for current User. Message is: 'Resource not visible to User'"
          }
        }
      },
      "options": {
        "tags": [
          "/journey/detail"
        ],
        "operationId": "optionsJourneyDetailDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/journey/detail/vehicle": {
      "get": {
        "tags": [
          "/journey/detail"
        ],
        "summary": "Vehicle Journeys",
        "description": "Returns summary journey details for a vehicle for each journey that started in the specified period. For a private journey only limited details are returned. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate. Either vehicleId or groupId must be specified. If vehicleId is specified, then only journeys for the specified vehicle are included in the output. If groupId is specified, then the details for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are more than 50 journeys that match the search criteria, then by default only the first 50 journeys are",
        "operationId": "getJourneyDetailVehicle",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List for Journeys Details (TimestampedWithPaginationResult) selected by VehicleId or GroupId, and from given Execution time. May be empty list if now Journeys has been found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampedWithPaginationResult"
                }
              }
            }
          },
          "400": {
            "description": "When VehicleId or GroupId is not provided. Message is: 'One of following properties [VehicleId, GroupId] can not be null'\n\tWhen both VehicleId or GroupId are provided. Message is: 'One of following properties [VehicleId, GroupId] must be null'\n\tWhen given property, VehicleId or GroupId, are not visible for current User. Message is: 'Resource not visible to User'"
          }
        }
      },
      "options": {
        "tags": [
          "/journey/detail"
        ],
        "operationId": "optionsJourneyDetailVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/journey/detail/driver/latest": {
      "get": {
        "tags": [
          "/journey/detail"
        ],
        "summary": "Driver Journeys Latest",
        "description": "Returns summary journey details for a driver for each journey that was processed by Connect since the specified date/time. For a private journey only limited details are returned. To use this endpoint to return details for only those drivers where the journey was processed since a specified date/time, the procedure is as follows: 1. Call the Driver Journeys endpoint to see what journeys have been completed so far. 2. Call the Driver Journey Latest endpoint, specify the value for fromDateTime to be processedDateTime from the response of the call to Driver Journeys endpoint. 3. Call the Driver Journey Latest endpoint, specify the value for fromDateTime to be processedDateTime from the previous call to this endpoint. Either driverId or",
        "operationId": "getLatestJourneyDetailDriver",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List for latest Journeys Details (LatestJourneyDetailsDriverDto) selected by DriverId, and from given Execution time. May be empty list if now Journeys has been found."
          },
          "400": {
            "description": "When DriverId or GroupId is not provided. Message is: 'One of following properties [DriverId, GroupId] can not be null'\n\tWhen both DriverId or GroupId are provided. Message is: 'One of following properties [DriverId, GroupId] must be null'\n\tWhen given property, DriverId or GroupId, are not visible for current User. Message is: 'Resource not visible to User'"
          }
        }
      },
      "options": {
        "tags": [
          "/journey/detail"
        ],
        "operationId": "optionsJourneyDetailDriverLatest",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/journey/detail/vehicle/latest": {
      "get": {
        "tags": [
          "/journey/detail"
        ],
        "summary": "Vehicle Journeys Latest",
        "description": "Returns summary journey details for a vehicle for each journey that was processed by Connect since the specified date/time. For a private journey only limited details are returned. To use this endpoint to return details for only those vehicles where the journey was processed since a specified date/time, the procedure is as follows: 1. Call the Vehicle Journey endpoint to see what journeys have been completed so far. 2. Call the Vehicle Journey Latest endpoint, specify the value for fromDateTime to be processedDateTime from the response of the call to Vehicle Journey endpoint. 3. Call the Vehicle Journey Latest endpoint, specify the value for fromDateTime to be processedDateTime from the previous call to this endpoint. Either vehicleId",
        "operationId": "getLatestJourneyDetailVehicle",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List for Journeys Details (LatestJourneyDetailsVehicleDto) selected by VehicleId, and from Execution time which is no older than hour ago from current time. May be empty list if now Journeys has been found.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LatestJourneyDetailsVehicleDto"
                }
              }
            }
          },
          "400": {
            "description": "When VehicleId or GroupId is not provided. Message is: 'One of following properties [VehicleId, GroupId] can not be null'\n\tWhen both VehicleId or GroupId are provided. Message is: 'One of following properties [VehicleId, GroupId] must be null'\n\tWhen given property, VehicleId or GroupId, are not visible for current User. Message is: 'Resource not visible to User'"
          }
        }
      },
      "options": {
        "tags": [
          "/journey/detail"
        ],
        "operationId": "optionsJourneyDetailVehicleLatest",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/journey/detail/driver/triggerEmail": {
      "post": {
        "tags": [
          "/journey/detail"
        ],
        "operationId": "triggerJourneyDetailedDriverReport",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/JourneyDriverReportTriggerRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Driver Details",
        "description": "Creates detailed information and comprehensive data."
      }
    },
    "/public/v1/customer/{customerId}/journey/summary/driver/triggerEmail": {
      "post": {
        "tags": [
          "/journey/summary"
        ],
        "operationId": "getJourneySummaryDriver",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/JourneyDriverReportTriggerRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Driver Summary",
        "description": "Creates summary information and aggregated data."
      }
    },
    "/public/v1/customer/{customerId}/journey/summary/vehicle": {
      "post": {
        "tags": [
          "/journey/summary"
        ],
        "operationId": "getJourneySummaryVehicle",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/JourneySummaryRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultJourneySummaryResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Journey Summary",
        "description": "Creates summary information and aggregated data."
      },
      "options": {
        "tags": [
          "/journey/summary"
        ],
        "operationId": "optionsJourneySummaryVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/location/category": {
      "get": {
        "tags": [
          "/location/category"
        ],
        "operationId": "getAllCategories",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationCategoryWithLocationsCountDto"
                  }
                }
              }
            }
          }
        },
        "summary": "List Location Category",
        "description": "Returns details for all location categories. If a location category identifier is specified, then only details of the specified location category are returned."
      },
      "put": {
        "tags": [
          "/location/category"
        ],
        "operationId": "createOrUpdateCategory",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/LocationCategoryDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCategoryDto"
                }
              }
            }
          }
        },
        "summary": "Add Location Category",
        "description": "PUT request to add a new location category.  The identifier for the newly added location category is included in the JSON object returned as the response.  The details for the location category in a JSON object included in the HTTP body.  Ensure you set the content-type of the request body to \"application/json;charset=UTF-8\". "
      },
      "options": {
        "tags": [
          "/location/category"
        ],
        "operationId": "optionsCategory",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/location/category/{categoryId}": {
      "get": {
        "tags": [
          "/location/category"
        ],
        "operationId": "getOneCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCategoryDto"
                }
              }
            }
          }
        },
        "summary": "List (one) Location Category",
        "description": "Returns details for all location categories. If a location category identifier is specified, then only details of the specified location category are returned."
      },
      "delete": {
        "tags": [
          "/location/category"
        ],
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete Location Category",
        "description": "DELETE request to delete the location category that matches the {categoryId}. "
      },
      "options": {
        "tags": [
          "/location/category"
        ],
        "operationId": "optionsOneCategory",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/location": {
      "put": {
        "tags": [
          "/location"
        ],
        "operationId": "updateLocation",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/LocationDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LocationDto"
                }
              }
            }
          }
        },
        "summary": "Update Location",
        "description": "PUT request to update a location. This is a partial update and only those values specified will be updated. The type of a location can be updated from a circle to a polygon or from a polygon to a circle, by specifying the the geofence for the location as either: â radius A geofence for the location is a circle.  The radius for the circle must be between 0.001 and 1.  â polygon The geofence for the location is a polygon which is specified as an array of longitude and latitude pairs.  There must be at least three longitude and latitude pairs specified.  The geofence boundary is closed by automatically linking the first longitude and latitude pair to the last longitude and latitude pair specified.  The geofence for a location can overlap the geofence for another location.  The geofence for this location can overlap up to 5 locations.  The location details are in a JSON object included in the HTTP body.  Ensure you have set the content-type of the request body to âapplication/json;charset=UTF-8â. "
      },
      "post": {
        "tags": [
          "/location"
        ],
        "operationId": "createLocation",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/LocationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LocationDto"
                }
              }
            }
          }
        },
        "summary": "Add Location",
        "description": "POST request to add a new location with a geo-fence boundary that can be either CIRCULAR or POLYGON.  There cannot be an existing location with the same name as the location being created.  The maximum number of POI that can be created in your account is limited based on the number of vehicles in your fleet.  â If your fleet size is less than 1,000 then you can create up to 250,000 locations.  â If your fleet size is more than 1,000, then the maximum is reduced on a sliding scale depending on the number of vehicles in your fleet.  The address for the location can be specified as either: â longitude and latitude coordinates An address lookup is done to determine values for roadNumber, road, city, postcode and country.  The formattedAddress is constructed as a comma separated set of values from roadNumber, road, city "
      },
      "options": {
        "tags": [
          "/location"
        ],
        "operationId": "optionsLocation",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/location/{placeId}": {
      "delete": {
        "tags": [
          "/location"
        ],
        "operationId": "deletePlace",
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete Location",
        "description": "DELETE request to delete a location that matches the {locationId}."
      },
      "options": {
        "tags": [
          "/location"
        ],
        "operationId": "optionsOneLocation",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/location/gps": {
      "get": {
        "tags": [
          "/location"
        ],
        "summary": "Please provide either formatted address or at least city, postCode and country.",
        "operationId": "findLocation",
        "parameters": [
          {
            "name": "formattedAddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "road",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roadNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stateProvince",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CoordinateDto"
                }
              }
            }
          }
        },
        "description": "Retrieves specific information for the requested resource."
      },
      "options": {
        "tags": [
          "/location"
        ],
        "operationId": "optionsGeocodeLocation",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/location/nearest": {
      "get": {
        "tags": [
          "/location"
        ],
        "operationId": "findNearestPlaces",
        "parameters": [
          {
            "name": "longitude",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "maximumResultsToReturn",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "road",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roadNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NearestLocationsSearchResultDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Find Nearest Location",
        "description": "Returns all the nearest Point of Interest (POI) locations to a search point. The number returned is restricted to the maximum specified. The locations returned are ordered based on distance from the specified search point. The search point can be specified as either latitude and longitude or an address (at least one of roadNumber, road, city, pos"
      },
      "options": {
        "tags": [
          "/location"
        ],
        "operationId": "optionsNearestLocation",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/location/current": {
      "get": {
        "tags": [
          "/location"
        ],
        "operationId": "getCurrentPlaces",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contact",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultLocationSearchResultDto"
                }
              }
            }
          }
        },
        "summary": "List Location",
        "description": "Returns details for all current locations. If there are more than 50 locations, then by default only details for the first 50 locations are returned. To view details for the other locations you will need to specify values for pageSize and pageIndex."
      },
      "options": {
        "tags": [
          "/location"
        ],
        "operationId": "optionsCurrentLocation",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/person/{personId}/settings": {
      "get": {
        "tags": [
          "/person"
        ],
        "operationId": "getPersonSettings",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/PersonSettingsResultDto"
                }
              }
            }
          }
        },
        "summary": "Get Person",
        "description": "Retrieves specific information for the requested resource."
      },
      "post": {
        "tags": [
          "/person"
        ],
        "operationId": "updatePersonSettings_1",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/PersonSettingsUpdateRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/PersonSettingsResultDto"
                }
              }
            }
          }
        },
        "summary": "Create Person",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/person"
        ],
        "operationId": "optionsPersonSettings_1",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/person/settings": {
      "post": {
        "tags": [
          "/person"
        ],
        "operationId": "updatePersonSettings",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/PersonSettingsPatchRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/PersonSettingsWithTaxAndExpenseResultDto"
                }
              }
            }
          }
        },
        "summary": "Create Person",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/person"
        ],
        "operationId": "optionsSettings",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/person/email": {
      "put": {
        "tags": [
          "/person"
        ],
        "operationId": "updatePersonEmail",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/PersonEmailUpdateRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/PersonSettingsResultDto"
                }
              }
            }
          }
        },
        "summary": "Update Person",
        "description": "Updates an existing resource with new data."
      }
    },
    "/public/v1/person/settings": {
      "get": {
        "tags": [
          "/person/settings"
        ],
        "operationId": "getPersonSettings_1",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/PersonSettingsResultDto"
                }
              }
            }
          }
        },
        "summary": "List Person",
        "description": "Retrieves a list of available resources and their information."
      },
      "options": {
        "tags": [
          "/person/settings"
        ],
        "operationId": "options_1",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/role": {
      "get": {
        "tags": [
          "/role"
        ],
        "operationId": "getAll",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDto"
                  }
                }
              }
            }
          }
        },
        "summary": "List Role",
        "description": "Returns all roles and the active features for each role. "
      },
      "options": {
        "tags": [
          "/role"
        ],
        "operationId": "optionsRole",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/role/{roleId}": {
      "get": {
        "tags": [
          "/role"
        ],
        "operationId": "getOne",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            }
          }
        },
        "summary": "List Role Details",
        "description": "Returns details for a single role."
      },
      "options": {
        "tags": [
          "/role"
        ],
        "operationId": "optionsOneRole",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/speeding/detail/driver": {
      "get": {
        "tags": [
          "/speeding"
        ],
        "operationId": "getDriverSpeedingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "percentAboveLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultSpeedingDetailDto"
                }
              }
            }
          }
        },
        "summary": "Driver Speeding Detail",
        "description": "Returns details for speeding episodes that occurred within the specified period. The end of the speeding episode does not have to be within the specified period. No details are returned for speeding episodes during a private journey. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. A value for either driverId or groupId must be specified. If there are more than 50 speeding episodes that match the search criteria, then by default only the first 50 speeding episodes are returned. To view details of the other speeding episodes you will need to specify values for pageSize and pageIndex. A"
      }
    },
    "/public/v1/customer/{customerId}/speeding/detail/driver/latest": {
      "get": {
        "tags": [
          "/speeding"
        ],
        "summary": "Latest speeding events for a driver",
        "description": "Returns the latest set of speeding events for the specified driver, by customerId and driverId",
        "operationId": "getLatestDriverSpeedingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "percentAboveLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest set of speeding events for the customerId and driverId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unathorized - invalid token"
          },
          "404": {
            "description": "Unable to find SpeedingDetailDto for driver [driverId] in Customer with id [customerId]"
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/speeding/detail/vehicle/latest": {
      "get": {
        "tags": [
          "/speeding"
        ],
        "summary": "Latest speeding events for a vehicle",
        "description": "Returns the latest set of speeding events for the specified vehicle, by customerId and assetId",
        "operationId": "getLatestVehicleSpeedingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "percentAboveLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest set of speeding events for the customerId and assetId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unathorized - invalid token"
          },
          "404": {
            "description": "Unable to find SpeedingDetailDto for asset [assetId] in Customer with id [customerId]"
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/speeding/detail/vehicle": {
      "get": {
        "tags": [
          "/speeding"
        ],
        "operationId": "getVehicleSpeedingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "percentAboveLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultSpeedingDetailDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Speeding Detail",
        "description": "Returns details for speeding episodes that occurred within the specified period. The end of the speeding episode does not have to be within the specified period. No details are returned for speeding episodes during a private journey. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. A value for either vehicleId or groupId must be specified. If there are more than 50 speeding episodes that match the search criteria, then by default only the first 50 speeding episodes are returned. To view details of the other speeding episodes you will need to specify values for pageSize and pageIndex. Asset Day Limit: The asset day limit on this endpoint is 50 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction."
      }
    },
    "/public/v1/customer/{customerId}/speeding/detail/driver/triggerEmail": {
      "post": {
        "tags": [
          "/speeding"
        ],
        "operationId": "triggerSpeedingDetailToPerson",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TriggerSpeedingDetailRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Create Driver Details",
        "description": "Creates detailed information and comprehensive data."
      }
    },
    "/public/v1/tokenInformation": {
      "get": {
        "tags": [
          "/tokenInformation"
        ],
        "operationId": "getPersonInformation",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInformationResultDto"
                }
              }
            }
          }
        },
        "summary": "List Input/Output",
        "description": "Retrieves a list of available resources and their information."
      }
    },
    "/public/v1/customer/{customerId}/tracking/history/driver": {
      "get": {
        "tags": [
          "/tracking/history"
        ],
        "operationId": "getEventHistoryByDriver",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverIdAsSet",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TrackingVehicleHistoryEventDateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultTrackingHistoryResultDto"
                }
              }
            }
          }
        },
        "summary": "Driver Journey History",
        "description": "Returns the journey tracking history for a driver for each journey that started in the specified period. No details are returned for a private journey. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days . driverId must be specified and only journeys for the specified driver are included in the output. If there are more than 50 tracking events that match the search criteria, then by default only the first 50 tracking events are returned. To view details of the other events you will need to specify values for pageSize and pageIndex."
      },
      "options": {
        "tags": [
          "/tracking/history"
        ],
        "operationId": "optionsEventHistoryByDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/history/vehicle": {
      "get": {
        "tags": [
          "/tracking/history"
        ],
        "operationId": "getEventHistoryByVehicle",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleIdAsSet",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TrackingVehicleHistoryEventDateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultTrackingHistoryResultDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Journey History",
        "description": "Returns the journey tracking history for a vehicle for each journey that started in the specified period. No details are returned for a private journey. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days . vehicleId must be specified and only journeys for the specified vehicle are included in the output. If there are more than 50 tracking events that match the search criteria, then by default only the first 50 tracking events are returned. To view details of the other events you will need to specify values for pageSize and pageIndex."
      },
      "options": {
        "tags": [
          "/tracking/history"
        ],
        "operationId": "optionsEventHistoryByVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/history/driver/latest": {
      "get": {
        "tags": [
          "/tracking/history"
        ],
        "operationId": "getLatestEventHistoryByDriver",
        "parameters": [
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTrackingHistoryResultsDto"
                }
              }
            }
          }
        },
        "summary": "Driver Journey History Latest",
        "description": "Returns the latest tracking events that have been processed by Connect for a driver since the specified date. No details are returned for a private journey. An error is returned if the value specified for fromDateTime is more than 14 days in the past or is a future date. The output response is limited to a maximum of 500 tracking events as the output is not paged. To use this endpoint to return tracking events for only those drivers that have been processed by Connect since a specified processed date/time, the procedure is as follows: 1. Call the endpoint with a value for fromDateTime that is not 14 days in the past. 2. In the next call this endpoint, specify the value for fromDateTime to"
      },
      "options": {
        "tags": [
          "/tracking/history"
        ],
        "operationId": "optionsEventLatestHistoryByDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/history/vehicle/latest": {
      "get": {
        "tags": [
          "/tracking/history"
        ],
        "operationId": "getLatestEventHistoryByVehicle",
        "parameters": [
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTrackingHistoryResultsDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Journey History Latest",
        "description": "Returns the latest tracking events that have been processed by Connect for a vehicle since the specified date. No details are returned for a private journey. An error is returned if the value specified for fromDateTime is more than 14 days in the past or is a future date. The output response is limited to a maximum of 500 tracking events as the output is not paged. To use this endpoint to return tracking events for only those vehicles that have been processed by Connect since a specified processed date/time, the procedure is as follows: 1. Call the endpoint with a value for fromDateTime tha"
      },
      "options": {
        "tags": [
          "/tracking/history"
        ],
        "operationId": "optionsEventLatestHistoryByVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/journey/detail": {
      "get": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "getJourneyDetails",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "classifications",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ifModifiedSince",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "startDateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultTrackingJourneyDetailResultDto"
                }
              }
            }
          }
        },
        "summary": "Get Journey Details",
        "description": "Retrieves detailed information and comprehensive data."
      },
      "post": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "updateJourneyDetails",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TrackingJourneyDetailUpdateRequestDto"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingJourneyDetailResultDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Create Journey Details",
        "description": "Creates detailed information and comprehensive data."
      },
      "options": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "optionsJourneyDetail",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/journey/detailExpense": {
      "get": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "getJourneyExpenseDetails",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "classifications",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ifModifiedSince",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "startDateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultTrackingJourneyDetailResultDto"
                }
              }
            }
          }
        },
        "summary": "Get Journey Details",
        "description": "Retrieves detailed information and comprehensive data."
      },
      "post": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "updateJourneyAndExpensesDetails",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TrackingJourneyDetailUpdateRequestDto"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingJourneyDetailResultDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Create Journey Details",
        "description": "Creates detailed information and comprehensive data."
      },
      "delete": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "resetJourneyExpense",
        "parameters": [
          {
            "name": "journeyId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingJourneyDetailResultDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Delete Journey Details",
        "description": "Deletes detailed information and comprehensive data."
      }
    },
    "/public/v1/customer/{customerId}/tracking/journey/summary": {
      "get": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "getJourneySummary",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startDateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingJourneySummaryResultDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Distance Travelled",
        "description": "Returns the distance travelled (in kilometres) by a vehicle for all journeys where the journey started within the period. The end date for the journey does not have to be within the period. The distance travelled on private journeys that started in the period is included. If groupIds is specified, then the distance travelled by all the vehicles in the specified groups are included in the output. Either vehicleIds or groupIds can be specified as an input parameter, an error is returned if both are specified."
      },
      "options": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "optionsJourneySummary",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/journey/submit": {
      "post": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "submitJourneys",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TrackingJourneySubmitDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/JourneySubmitResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Journey",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/tracking/journey"
        ],
        "operationId": "optionsJourneySubmit",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/live/inputEvents": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Endpoint fetches latest detailed tracking inputs with pagination and starting with the most recent entry based on filtering.",
        "description": "Returned Journeys are not older than day ago from current time.\n CurrentPositionResult data are being selected based personId, where personId is from request context.\nIf CurrentPositionResult data are empty list it returns empty list. Else it walks through list, fetches Asset data from customer_shared.asset database and combines both data (CurrentPositionResult, Asset)which are saved to result list.",
        "operationId": "getLatestInputEventsLiveStatus",
        "responses": {
          "200": {
            "description": "List of most recent detailed tracking inputs, where 1 item is LatestTrackingInputEventsResultsDto and contains combined CurrentPositionResult and Asset data. Data are selected from DB based on personId which is from requestContext.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTrackingInputEventsResultsDto"
                }
              }
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/live/latest": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position Latest",
        "description": "Returns the live position and status for a resource (driver or vehicle).  The live position for a vehicle on a private journey is not returned.  By default vehicles which have a status of SOLD are not included in the response.  This endpoint can be used to return details for only those vehicles where tracking data has been processed since a specified processed date/time as follows: 1. Call the endpoint and do not specify a value for fromDateTime.  2. In the next call to this endpoint, specify the value for fromDateTime to be processedDateTime from the previous call.  If vehicleIds, driverIds or groupIds are not specified, then the live position for all vehicles is returned.  If driverIds is specified, then the driver must be recorded against their vehicle for their live position to be returned.  If groupIds is specified, then the current position for all drivers/vehicles in the specified groups are included in the output.  Only one of ve ",
        "operationId": "getLatestLiveStatus",
        "parameters": [
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideSpeedIfSpeedSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated List of most recent detailed tracking inputs (LatestTrackingLiveResultsDto), where 1 item is TrackingLiveResultDto and contains combined CurrentPositionResult and Asset data. Asset data contains vehicle vin number. Data are selected from DB based on either vehicleIds or driverIds or groupIds. If none of the DB selector fits it returns empty list",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTrackingLiveResultsDto"
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in (vehicleIds and groupIds OR vehicleIds and driverIds OR driverIds and groupIds).\nWhen filtering field contains id of resource which is not visible to user. Message is: 'fieldName: Invalid value [value] => Resource not visible to User'",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/live/latest/aemp": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position Latest AEMP",
        "description": "Returns the latest live position and status for a vehicle in AEMP format. The live position for a vehicle on a private journey is not returned. By default vehicles which have a status of SOLD are not included in the response. This endpoint can be used to return details for only those vehicles where tracking data has been processed since a specified processed date/time. If fromDateTime is specified, then only vehicles where tracking information has been processed since the specified date/time are included in the output response. An error is returned if the value specified for fromDateTime is more than one day in the past. No details are returned if the value specified for fromDateTime is a future date.",
        "operationId": "getLatestLiveStatusAemp",
        "parameters": [
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of most recent detailed tracking input, where 1 item contains combined CurrentPositionResult and Asset data. Data are selected from DB based on either vehicleIds or driverIds or groupIds. If none of the DB selector fits it returns empty list",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Fleet"
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in (vehicleIds and groupIds OR vehicleIds and driverIds OR driverIds and groupIds).\nWhen filtering field contains id of resource which is not visible to user. Message is: 'fieldName: Invalid value [value] => Resource not visible to User'",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/live/latest/geojson": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position Latest GeoJSON",
        "description": "Returns the live position and status for all vehicles in GeoJSON Specification (RFC 7946) format. Returns the live position and status for a resource (driver or vehicle). The live position for a vehicle on a private journey is not returned. By default vehicles which have a status of SOLD are not included in the response. This endpoint can be used to return details for only those vehicles where tracking data has been processed since a specified processed date/time as follows: 3. Call the endpoint and do not specify a value for fromDateTime. 4. In the next call to this endpoint, specify the value for fromDateTime to be processedDateTime from the previous call. If vehicleIds, driverIds or groupIds are not specified, then the live position for all vehicles i",
        "operationId": "getLatestLiveStatusAsGeoJson",
        "parameters": [
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideSpeedIfSpeedSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated List of most recent detailed tracking inputs (LatestTrackingLiveResultsDto), where 1 item is TrackingLiveResultDto and contains combined CurrentPositionResult and Asset data. Data are selected from DB based on either vehicleIds or driverIds or groupIds. If none of the DB selector fits it returns empty list",
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureCollection"
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in (vehicleIds and groupIds OR vehicleIds and driverIds OR driverIds and groupIds).\nWhen filtering field contains id of resource which is not visible to user. Message is: 'fieldName: Invalid value [value] => Resource not visible to User'",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/live": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position",
        "description": "Returns the live position and status for a resource (driver or vehicle).  The live position for a vehicle on a private journey is not returned.  By default vehicles which have a status of SOLD are not included in the response.  If vehicleIds, driverIds or groupIds are not specified, then the live position for all vehicles is returned.  If driverIds is specified, then the driver must be recorded with their vehicle for their live position to be returned.  If groupIds is specified, then the current position for all drivers/vehicles in the specified groups are included in the output.  Only one of vehicleIds, driverIds or groupIds can be specified as an input parameter.  Request Limit The request limit on this endpoint is one request every 15 seconds.  You will receive an HTTP status code of 429 (too man ",
        "operationId": "getLiveStatus",
        "parameters": [
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Comma separated list of vehicle identifiers (alphanumeric)."
          },
          {
            "name": "groupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Comma separated list of group ids."
          },
          {
            "name": "driverIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Comma separated list of driver identifiers (alphanumeric) ."
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Boolean (true/false) to indicate if details of all vehicles should be included, irrespective of their status. If not specified, defaults to FALSE, so vehicles with a status of SOLD are excluded from the response."
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideSpeedIfSpeedSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Boolean (true/false) to indicate if the vehicle speed should be excluded from the output if the driver;âs group (if there is a driver for the vehicle) or the vehicleâs group has been defined to be speed sensitive. If not specified, defaults to FALSE, so the vehicleâs speed is included in the response."
          }
        ],
        "responses": {
          "200": {
            "description": "List of most recent detailed tracking inputs (TrackingLiveResultDto), where 1 item contains combined CurrentPositionResult and Asset data. Asset data contains vehicle vin number.Data are selected from DB based on either vehicleIds or driverIds or groupIds. If none of the DB selector fits it returns empty list",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TrackingLiveRequestDto"
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in (vehicleIds and groupIds OR vehicleIds and driverIds OR driverIds and groupIds).\nWhen filtering field contains id of resource which is not visible to user. Message is: 'fieldName: Invalid value [value] => Resource not visible to User'",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "/tracking/live"
        ],
        "operationId": "optionsTrackingLive",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/live/aemp": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position AEMP",
        "description": "Returns the live position and status for all vehicles in AEMP XML format. The live position for a vehicle on a private journey is not returned. By default vehicles which have a status of SOLD are not included in the response. Request Limit: The request limit on this endpoint is one request every 15 seconds. You will receive an HTTP status code of 429 (too many requests) and no details will be returned if you exceed this restriction.",
        "operationId": "getLiveStatusAemp",
        "parameters": [
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of most recent detailed tracking input, where 1 item contains combined CurrentPositionResult and Asset data. Data are selected from DB based on either vehicleIds or driverIds or groupIds. If none of the DB selector fits it returns empty list",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Fleet"
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in (vehicleIds and groupIds OR vehicleIds and driverIds OR driverIds and groupIds).\nWhen filtering field contains id of resource which is not visible to user. Message is: 'fieldName: Invalid value [value] => Resource not visible to User'",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/live/geojson": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position GeoJSON",
        "description": "Returns the live position and status for all vehicles in GeoJSON Specification (RFC 7946) format. Returns the live position and status for a resource (driver or vehicle). The live position for a vehicle on a private journey is not returned. By default vehicles which have a status of SOLD are not included in the response. If vehicleIds, driverIds or groupIds are not specified, then the live position for all vehicles is returned. If driverIds is specified, then the driver must be recorded with their vehicle for their live position to be returned. If groupIds is specified, then the current position for all drivers/vehicles in the specified groups are included in the output. Only one of vehicleIds, driverIds or groupIds can be specified as an",
        "operationId": "getLiveStatusAsGeoJson",
        "parameters": [
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideSpeedIfSpeedSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of most recent detailed tracking inputs (TrackingLiveResultDto), where 1 item contains combined CurrentPositionResult and Asset data. Data are selected from DB based on either vehicleIds or driverIds or groupIds. If none of the DB selector fits it returns empty list",
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureCollection"
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in (vehicleIds and groupIds OR vehicleIds and driverIds OR driverIds and groupIds).\nWhen filtering field contains id of resource which is not visible to user. Message is: 'fieldName: Invalid value [value] => Resource not visible to User'",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/tracking/manualjourney": {
      "get": {
        "tags": [
          "/manualjourneys"
        ],
        "operationId": "getManualJourney",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManualJourneyDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get Journey",
        "description": "Retrieves specific information for the requested resource."
      },
      "put": {
        "tags": [
          "/manualjourneys"
        ],
        "operationId": "updateManualJourney",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[\\w]*$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ManualJourneyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ManualJourneyDto"
                }
              }
            }
          }
        },
        "summary": "Update Journey",
        "description": "Updates an existing resource with new data."
      },
      "post": {
        "tags": [
          "/manualjourneys"
        ],
        "operationId": "createManualJourney",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[\\w]*$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ManualJourneyBaseDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ManualJourneyDto"
                }
              }
            }
          }
        },
        "summary": "Create Journey",
        "description": "Creates a new resource with the provided data."
      },
      "delete": {
        "tags": [
          "/manualjourneys"
        ],
        "operationId": "deleteManualJourney",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "journeyId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete Journey",
        "description": "Deletes the specified resource from the system."
      }
    },
    "/public/v1/customer/{customerId}/tracking/manualjourneys": {
      "put": {
        "tags": [
          "/manualjourneys"
        ],
        "operationId": "updateMultipleManualJourneys",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[\\w]*$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManualJourneyDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleManualJourneysResponseDto"
                }
              }
            }
          }
        },
        "summary": "Update Journey",
        "description": "Updates an existing resource with new data."
      },
      "post": {
        "tags": [
          "/manualjourneys"
        ],
        "operationId": "createMultipleManualJourneys",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[\\w]*$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManualJourneyDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleManualJourneysResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create Journey",
        "description": "Creates a new resource with the provided data."
      }
    },
    "/public/v1/customer/{customerId}/user": {
      "get": {
        "tags": [
          "/user"
        ],
        "summary": "List User",
        "operationId": "listAllUsers",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users were successfully returned."
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        },
        "description": "Returns details for all active users. No details are returned for inactive users.  If there are more than 50 users, then by default only details for the first 50 users are returned.  To view details for the other users you will need to specify values for pageSize and pageIndex. "
      },
      "post": {
        "tags": [
          "/user"
        ],
        "summary": "Add User",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User were successfully created to the hierarchy node."
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        },
        "description": "POST request to add a web user.  You cannot include the password for the new user in the same request as adding a user, instead you must use the Set User Password endpoint and include the token from the output response of this endpoint.  The generated token will expire if it is not used within 30 days or if a password reset token is requested.  If a value for externalIdentifier is specified, then the user will be enabled for SSO and a Connect password cannot be set.  If the user being created will be using the SmarterDriver Mobile application and login using SSO, then the same values must be specified for both username and emailAddress.  The details for the user are in a JSON object included in the HTTP body.  Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\". "
      },
      "options": {
        "tags": [
          "/user"
        ],
        "operationId": "optionsUser",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/user/{userId}": {
      "get": {
        "tags": [
          "/user"
        ],
        "summary": "List User Details",
        "operationId": "getOne_1",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully returned."
          },
          "400": {
            "description": "Missing validation."
          }
        },
        "description": "Returns details for a single user. "
      },
      "put": {
        "tags": [
          "/user"
        ],
        "summary": "Update User",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Users were successfully created to the hierarchy node."
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        },
        "description": "PUT request to update an existing user. This is a partial update and only those values specified will be updated.  You cannot use this endpoint to update the username or the password for an existing user.  To update the password you must first get a token from the Password Reset Token endpoint and then use that token with the Set User Password endpoint.  If a value for externalIdentifier is specified, then â the user will be enabled for SSO â the existing password for the user will be removed â if the user had been enabled for âConnect using Googleâ this feature will be removed.  If the value specified for externalIdentifier is an empty string, then SSO functionality is removed from the user, allowing for a Connect password to be set.  The details for the user are in a JSON object included in the HTTP body. Ensure you have "
      },
      "delete": {
        "tags": [
          "/user"
        ],
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        },
        "summary": "Delete User",
        "description": "DELETE request to delete a user that matches the {userId}. "
      },
      "options": {
        "tags": [
          "/user"
        ],
        "operationId": "optionsOneDriver_1",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/user/{userId}/passwordResetToken": {
      "get": {
        "tags": [
          "/user"
        ],
        "operationId": "getPasswordResetToken",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/UserTokenDto"
                }
              }
            }
          }
        },
        "summary": "Password Reset Token",
        "description": "GET request to generate a password reset token."
      },
      "options": {
        "tags": [
          "/user"
        ],
        "operationId": "optionsPasswordResetToken",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/user/password": {
      "post": {
        "tags": [
          "/user"
        ],
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePasswordResultDto"
                }
              }
            }
          }
        },
        "summary": "Set User Password",
        "description": "POST request to set the password for a user.  You must include the token generated when a new user was added or when a password reset token was requested.  A password cannot be set for a user enabled for SSO, i.e. a value for externalIdentifier has been set.  The details for the password are in a JSON object included in the HTTP body.  Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\". "
      },
      "options": {
        "tags": [
          "/user"
        ],
        "operationId": "optionsUpdatePassword",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/utilisation/driver": {
      "get": {
        "tags": [
          "/utilisation"
        ],
        "operationId": "getDriverUtilisation",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/UtilisationDriverResultDto"
                }
              }
            }
          }
        },
        "summary": "Driver Utilisation Hours",
        "description": "Returns summary utilisation information for a driver for all journeys where the journey started in the specified period. The end date of the journey does not have to be within the period. If the vehicle driven by the driver has been configured for a PTO, then driving and idling time with PTO active and with PTO inactive are included in the response. Details for private journeys that started in the period are included in the utilisation values. If driverId or groupId is not specified, then details for all drivers are returned. If groupId is specified, then the utilisation for all drivers in the specified group are included in the output. Either driverId or groupId can be specified as an input parameter, an error is returned if both are specified."
      },
      "options": {
        "tags": [
          "/utilisation"
        ],
        "operationId": "optionsUtilisationDriver",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/utilisation/vehicle": {
      "get": {
        "tags": [
          "/utilisation"
        ],
        "operationId": "getVehicleUtilisation",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateRange",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DateRange"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/UtilisationVehicleResultDto"
                }
              }
            }
          }
        },
        "summary": "Vehicle Utilisation Hours",
        "description": "Returns summary utilisation information for a vehicle for all journeys where the journey started in the period. The end date of the journey does not have to be within the period. If the vehicle has been configured for a PTO, then driv"
      },
      "options": {
        "tags": [
          "/utilisation"
        ],
        "operationId": "optionsUtilisationVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/vehicle/nearest": {
      "get": {
        "tags": [
          "/vehicle"
        ],
        "operationId": "findNearestVehicles",
        "parameters": [
          {
            "name": "lastMovedStartDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "lastMovedEndDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "radius",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "maximumResultsToReturn",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "road",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roadNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NearestVehiclesSearchResultDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Find Nearest Vehicle",
        "description": "Returns all the nearest vehicles to the search point. Details for a vehicle on a private journey are not returned. The number of vehicles returned is restricted to the maximum specified. The vehicles are ordered based on distance from the search point. The search point can be specified as either latitude and longitude or as an address (at least one of roadNumber, road, city, postcode or country). A date range can optionally be specified. If specified, then vehicles that were within the search area in the specified time period are returned. If no date range is provided, then the previous 24 hour period is used."
      },
      "options": {
        "tags": [
          "/vehicle"
        ],
        "operationId": "optionsNearestVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/vehicle/{vehicleId}": {
      "put": {
        "tags": [
          "/vehicle"
        ],
        "description": "PUT request to update the details for an existing vehicle.  This is a partial update and only those values specified will be updated.  The update details for the vehicle are in a JSON object included in the HTTP body.  Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\". ",
        "operationId": "updateVehicle",
        "parameters": [
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/VehicleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "updated asset with correct values"
          },
          "400": {
            "description": "Message related to validation"
          }
        },
        "summary": "Update Vehicle"
      },
      "options": {
        "tags": [
          "/vehicle"
        ],
        "operationId": "optionsOneVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/vehicle": {
      "get": {
        "tags": [
          "/vehicle"
        ],
        "summary": "List Vehicle",
        "operationId": "searchVehicles",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "only the specified vehicles are included in the output."
          },
          {
            "name": "groupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
            "description": "all vehicles in the specified groups are included in the output."
            }
          },
          {
            "name": "registration",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "only the vehicle with the specified name is included in the output"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicles were successfully returned."
          },
          "400": {
            "description": "Missing validation on parameters."
          }
        },
        "description": "Returns the registration, group and current odometer reading for a vehicle.  The odometer reading is in kilometres. If no parameters are specified, then d "
      },
      "options": {
        "tags": [
          "/vehicle"
        ],
        "operationId": "optionsVehicle",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/vehicle/faults": {
      "get": {
        "tags": [
          "/vehicle"
        ],
        "operationId": "searchVehiclesWithFaults",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultVehicleSearchResultWithFaultsDto"
                }
              }
            }
          }
        },
        "summary": "Get Vehicle",
        "description": "Retrieves specific information for the requested resource."
      },
      "options": {
        "tags": [
          "/vehicle"
        ],
        "operationId": "optionsVehicleFaults",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v1/customer/{customerId}/vehicle/serviceDate": {
      "get": {
        "tags": [
          "/vehicle"
        ],
        "operationId": "searchVehiclesWithServiceDate",
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultVehicleSearchResultWithServiceDateDto"
                }
              }
            }
          }
        },
        "summary": "Service Due Date",
        "description": "Returns the service due date for a vehicle. If no parameters are specified, then details for all vehicles with a service due date are returned. If groupId is specified, then all vehicles in the specified group are included in the output. If vehicleId is specified, then only the specified vehicle is included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If startDate is specified, then only those vehicles where the service due date is on or after the specified date are returned. If endDate is specified, then only those vehicles where the service due date is on or before the specified end date are returned. If both startDate and endDate are specified, then endDate cannot be before startDate. If there are mo"
      },
      "options": {
        "tags": [
          "/vehicle"
        ],
        "operationId": "optionsVehicleServiceDate",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v2/driverbehaviourmetrics": {
      "post": {
        "tags": [
          "/v2/driverbehaviourmetrics"
        ],
        "operationId": "metricsForPersonV2",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/BehaviourMetricRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviourMetricDailyDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Create Driver",
        "description": "Creates a new resource with the provided data."
      },
      "options": {
        "tags": [
          "/v2/driverbehaviourmetrics"
        ],
        "operationId": "optionsMetricsForPersonV2",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/public/v2/person/settings/basic": {
      "get": {
        "tags": [
          "/v2/person/settings"
        ],
        "operationId": "getBasicSettings",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/BasicPersonSettingsDto"
                }
              }
            }
          }
        },
        "summary": "List Person",
        "description": "Retrieves a list of available resources and their information."
      }
    },
    "/public/v2/person/settings": {
      "get": {
        "tags": [
          "/v2/person/settings"
        ],
        "operationId": "getPersonSettings_2",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/PersonSettingsWithTaxAndExpenseResultDto"
                }
              }
            }
          }
        },
        "summary": "List Person",
        "description": "Retrieves a list of available resources and their information."
      },
      "put": {
        "tags": [
          "/v2/person/settings"
        ],
        "operationId": "updateUserSettings",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Update Person",
        "description": "Updates an existing resource with new data."
      },
      "options": {
        "tags": [
          "/v2/person/settings"
        ],
        "operationId": "options_2",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AlertEventDto": {
        "type": "object",
        "properties": {
          "dynamicRuleId": {
            "pattern": "^[\\w]*$",
            "type": "string"
          },
          "eventDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "assetId": {
            "pattern": "^[\\w]*$",
            "type": "string"
          },
          "personId": {
            "pattern": "^[\\w]*$",
            "type": "string"
          },
          "eventData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "AlertHistoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "assetId": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "assetRegistration": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "personName": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberDto"
            }
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SubscriberDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "WithPaginationResultAlertHistoryDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of drivers that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertHistoryDto"
            },
            "description": "Array of triggered alerts."
          }
        }
      },
      "AlertPersonSearchRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "subscriberEmail": {
            "type": "string"
          },
          "subscriberTelephone": {
            "type": "string"
          },
          "subscriberWebUser": {
            "type": "string"
          },
          "enableSecondaryGroupAssignments": {
            "type": "boolean"
          },
          "driverId": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          }
        }
      },
      "AlertAssetSearchRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "subscriberEmail": {
            "type": "string"
          },
          "subscriberTelephone": {
            "type": "string"
          },
          "subscriberWebUser": {
            "type": "string"
          },
          "enableSecondaryGroupAssignments": {
            "type": "boolean"
          },
          "vehicleId": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          }
        }
      },
      "ActivityProfile": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Alert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "templateName": {
            "type": "string"
          },
          "ownerHierarchyId": {
            "type": "string"
          },
          "secondaryOwnerHierarchyIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdByPersonId": {
            "type": "string"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "dynamicRuleId": {
            "type": "string"
          },
          "assetSelection": {
            "$ref": "#/components/schemas/AssetSelection"
          },
          "personSelection": {
            "$ref": "#/components/schemas/PersonSelection"
          },
          "activityProfile": {
            "$ref": "#/components/schemas/ActivityProfile"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscriber"
            }
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedTime": {
            "type": "string",
            "format": "date-time"
          },
          "activityProfileIntervalType": {
            "type": "string"
          },
          "locale": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "variant": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "unicodeLocaleKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "iso3Language": {
                "type": "string"
              },
              "iso3Country": {
                "type": "string"
              }
            }
          },
          "unitSettings": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "engineType": {
            "type": "string"
          },
          "paddingtonTimezoneId": {
            "type": "string"
          }
        }
      },
      "AlertDto": {
        "type": "object",
        "properties": {
          "alert": {
            "$ref": "#/components/schemas/Alert"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "AssetSelection": {
        "type": "object",
        "properties": {
          "hierarchyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assetIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tagsFilter": {
            "$ref": "#/components/schemas/AssetSelectionTags"
          }
        }
      },
      "AssetSelectionTags": {
        "type": "object",
        "properties": {
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeWithNoTags": {
            "type": "boolean"
          }
        }
      },
      "Chronology": {
        "type": "object",
        "properties": {
          "zone": {
            "$ref": "#/components/schemas/DateTimeZone"
          }
        }
      },
      "DateTimeField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DateTimeFieldType"
          },
          "supported": {
            "type": "boolean"
          },
          "lenient": {
            "type": "boolean"
          },
          "durationField": {
            "$ref": "#/components/schemas/DurationField"
          },
          "rangeDurationField": {
            "$ref": "#/components/schemas/DurationField"
          },
          "leapDurationField": {
            "$ref": "#/components/schemas/DurationField"
          },
          "minimumValue": {
            "type": "integer",
            "format": "int32"
          },
          "maximumValue": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DateTimeFieldType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "durationType": {
            "$ref": "#/components/schemas/DurationFieldType"
          },
          "rangeDurationType": {
            "$ref": "#/components/schemas/DurationFieldType"
          }
        }
      },
      "DateTimeZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fixed": {
            "type": "boolean"
          }
        }
      },
      "DurationField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DurationFieldType"
          },
          "supported": {
            "type": "boolean"
          },
          "unitMillis": {
            "type": "integer",
            "format": "int64"
          },
          "precise": {
            "type": "boolean"
          }
        }
      },
      "DurationFieldType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "EmailSubscriber": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscriber"
          }
        ]
      },
      "LocalHourMinute": {
        "type": "object",
        "properties": {
          "chronology": {
            "$ref": "#/components/schemas/Chronology"
          },
          "localMillis": {
            "type": "integer",
            "format": "int64"
          },
          "hourOfDay": {
            "type": "integer",
            "format": "int32"
          },
          "minuteOfHour": {
            "type": "integer",
            "format": "int32"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DateTimeField"
            }
          },
          "values": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "fieldTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DateTimeFieldType"
            }
          }
        }
      },
      "PersonSelection": {
        "type": "object",
        "properties": {
          "personIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hierarchyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProfileDateRange": {
        "type": "object",
        "properties": {
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProfileItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ActivityProfile"
          },
          {
            "type": "object",
            "properties": {
              "paddingtonTimezoneId": {
                "type": "string"
              },
              "activeDateRange": {
                "$ref": "#/components/schemas/ProfileDateRange"
              },
              "activeHoursTimeRange": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProfileTimeRange"
                }
              }
            }
          }
        ]
      },
      "ProfileTimeRange": {
        "type": "object",
        "properties": {
          "startTime": {
            "$ref": "#/components/schemas/LocalHourMinute"
          },
          "endTime": {
            "$ref": "#/components/schemas/LocalHourMinute"
          },
          "dayOfWeek": {
            "type": "string",
            "enum": [
              "SUNDAY",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY"
            ]
          }
        }
      },
      "SmsMessageStatus": {
        "type": "object",
        "properties": {
          "destination": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "messageLength": {
            "type": "integer",
            "format": "int32"
          },
          "httpStatus": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "Subscriber": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "destinations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TelephoneSubscriber": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscriber"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SmsMessageStatus"
                }
              }
            }
          }
        ]
      },
      "UnitSettings": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "string"
        }
      },
      "WebUserSubscriber": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscriber"
          }
        ]
      },
      "WithPaginationResultAlertDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertDto"
            }
          }
        }
      },
      "AlertSearchDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "customerId": {
            "type": "string"
          },
          "engineType": {
            "type": "string"
          },
          "templateName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "excludePaddingtonAlerts": {
            "type": "boolean"
          },
          "assetSelection": {
            "$ref": "#/components/schemas/AssetSelection"
          },
          "personSelection": {
            "$ref": "#/components/schemas/PersonSelection"
          },
          "subscriberDestinations": {
            "$ref": "#/components/schemas/SubscriberDestinations"
          },
          "ownerHierarchyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SubscriberDestinations": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "webUser": {
            "type": "string"
          }
        }
      },
      "AppShellMenu": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "parentAppShellMenuId": {
            "type": "string"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "locales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedName"
            }
          },
          "friendlyURL": {
            "type": "string"
          },
          "accountItem": {
            "type": "boolean"
          },
          "hideForReadOnlyAccount": {
            "type": "boolean"
          },
          "hideItem": {
            "type": "boolean"
          }
        }
      },
      "LocalizedName": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tooltip": {
            "type": "string"
          }
        }
      },
      "ThirdPartyDto": {
        "type": "object",
        "properties": {
          "friendlyName": {
            "type": "string"
          },
          "thirdPartyUrl": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "featureKey": {
            "type": "string"
          }
        }
      },
      "AppShellMenuItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tooltip": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppShellMenuItem"
            }
          },
          "parentAppShellMenuId": {
            "type": "string"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "feature": {
            "$ref": "#/components/schemas/FeatureInfo"
          },
          "friendlyURL": {
            "type": "string"
          },
          "hideForReadOnlyAccount": {
            "type": "boolean"
          },
          "hideItem": {
            "type": "boolean"
          },
          "accountItem": {
            "type": "boolean"
          }
        }
      },
      "FeatureInfo": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "messageOrigin": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "targetType": {
            "type": "string",
            "enum": [
              "LINTON_FEATURE",
              "ADJACENT_SERVICE_APP",
              "ADJACENT_SERVICE_COMPONENT"
            ]
          },
          "ignoreGarbageCollect": {
            "type": "boolean"
          },
          "sharedOrigin": {
            "type": "boolean"
          },
          "messagingDisabled": {
            "type": "boolean"
          },
          "origins": {
            "$ref": "#/components/schemas/OriginRegionsDto"
          },
          "messageOrigins": {
            "$ref": "#/components/schemas/OriginRegionsDto"
          }
        }
      },
      "OriginRegionsDto": {
        "type": "object",
        "properties": {
          "default": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eu-west-2": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "us-east-1": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LintonMenuDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "keyName": {
            "type": "string"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MasternauthFeatureDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "keyName": {
            "type": "string"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleDto"
            }
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "lintonMenu": {
            "$ref": "#/components/schemas/LintonMenuDto"
          },
          "appShellMenu": {
            "$ref": "#/components/schemas/AppShellMenu"
          },
          "appShellDisplayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "targetType": {
            "type": "integer",
            "format": "int32"
          },
          "parentFeatureIdentifier": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "messageOrigin": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "ignoreGarbageCollect": {
            "type": "boolean"
          },
          "locked": {
            "type": "boolean"
          },
          "locales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedName"
            }
          },
          "sharedOrigin": {
            "type": "boolean"
          },
          "messagingDisabled": {
            "type": "boolean"
          },
          "origins": {
            "$ref": "#/components/schemas/OriginRegionsDto"
          },
          "messageOrigins": {
            "$ref": "#/components/schemas/OriginRegionsDto"
          }
        }
      },
      "ModuleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LinkAppShellMenuRequestDto": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "string"
          },
          "messageOrigin": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "targetType": {
            "type": "integer",
            "format": "int32"
          },
          "ignoreGarbageCollect": {
            "type": "boolean"
          }
        }
      },
      "Coordinate": {
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "format": "double",
            "description": "The longitude value for one of the coordinate."
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "The latitude value for one of the coordinate."
          }
        }
      },
      "TaxAndExpenseJourneyDetailResultDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleId": {
            "type": "string"
          },
          "vehicleRegistration": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          },
          "vehicleGroupId": {
            "type": "string"
          },
          "vehicleGroupName": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "driverGroupId": {
            "type": "string"
          },
          "driverGroupName": {
            "type": "string"
          },
          "durationSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "distanceKms": {
            "type": "number",
            "format": "double"
          },
          "startAddress": {
            "type": "string"
          },
          "endAddress": {
            "type": "string"
          },
          "startCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "classification": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "startOdometer": {
            "type": "number",
            "format": "double"
          },
          "endOdometer": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "WithPaginationResultTaxAndExpenseJourneyDetailResultDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of drivers that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxAndExpenseJourneyDetailResultDto"
            },
            "description": "Array of transactions."
          }
        }
      },
      "DateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TaxAndExpenseJourneyDetailRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "driverIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupId": {
            "type": "string"
          },
          "classifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "TaxAndExpenseJourneySummaryDriverResultDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "distanceKm": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "driverId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          }
        }
      },
      "TaxAndExpenseManagerSummaryResultDtoTaxAndExpenseJourneySummaryDriverResultDto": {
        "type": "object",
        "properties": {
          "journeyCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalSummaryDistanceKm": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxAndExpenseJourneySummaryDriverResultDto"
            }
          }
        }
      },
      "TaxAndExpenseJourneySummaryDriverRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "classifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "driverIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "TaxAndExpenseJourneySummaryVehicleResultDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "distanceKm": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "vehicleId": {
            "type": "string"
          },
          "vehicleRegistration": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          }
        }
      },
      "TaxAndExpenseManagerSummaryResultDtoTaxAndExpenseJourneySummaryVehicleResultDto": {
        "type": "object",
        "properties": {
          "journeyCount": {
            "type": "integer",
            "format": "int32",
            "description": "Number of journeys where the start date was in the specified period."
          },
          "totalSummaryDistanceKm": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxAndExpenseJourneySummaryVehicleResultDto"
            },
            "description": "Array of business travel details"
          }
        }
      },
      "TaxAndExpenseJourneySummaryVehicleRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "classifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vehicleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "DeviceDetails": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "hierarchyId": {
            "type": "string"
          },
          "imei": {
            "type": "string"
          },
          "simNumber": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "DeviceRegistrationDto": {
        "type": "object",
        "properties": {
          "simNumber": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "BehaviourAlert": {
        "type": "object",
        "properties": {
          "threshold": {
            "type": "number",
            "format": "double"
          },
          "maxValue": {
            "type": "number",
            "format": "double"
          },
          "averageValue": {
            "type": "number",
            "format": "double"
          },
          "duration": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DeviceTrackingFrame": {
        "type": "object",
        "properties": {
          "eventCode": {
            "type": "integer",
            "format": "int32"
          },
          "eventDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "movement": {
            "$ref": "#/components/schemas/Movement"
          },
          "behaviourAlert": {
            "$ref": "#/components/schemas/BehaviourAlert"
          },
          "journey": {
            "$ref": "#/components/schemas/Journey"
          }
        }
      },
      "Journey": {
        "type": "object",
        "properties": {
          "gpsDistance": {
            "type": "number",
            "format": "double"
          },
          "canDistance": {
            "type": "number",
            "format": "double"
          },
          "gpsOrCanDistance": {
            "type": "number",
            "format": "double"
          },
          "fuelUsed": {
            "type": "number",
            "format": "double"
          },
          "co2": {
            "type": "number",
            "format": "double"
          },
          "evConsumptionKwh": {
            "type": "number",
            "format": "float"
          },
          "gasConsumptionKg": {
            "type": "number",
            "format": "float"
          },
          "fuelUsedDuringIdlingLiters": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "Movement": {
        "type": "object",
        "properties": {
          "speed": {
            "type": "number",
            "format": "float"
          },
          "direction": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "DriverDto": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^[\\w]*$",
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the driver. "
          },
          "customerId": {
            "type": "string",
            "description": "MCF customer identifier (alphanumeric). "
          },
          "name": {
            "type": "string",
            "description": "Name of the driver. "
          },
          "active": {
            "type": "boolean",
            "description": "Boolean (true/false) to indicate if this driver is active. "
          },
          "activeDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date this driver became active. UTC, in the format of YYYY-MM-DDThh:mm:ss. Not included if the driver is inactive (i.e. active = false) "
          },
          "groupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the group assigned to this driver. "
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group assigned to this driver. "
          },
          "defaultVehicleId": {
            "type": "string",
            "description": "Default vehicle identifier (alphanumeric) for this driver. Not returned if there is no default vehicle for this driver. "
          },
          "tempVehicleId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the temporary vehicle."
          },
          "tempVehicleExpiry": {
            "type": "string",
            "format": "date-time"
            ,
            "description": "Date the temporary vehicle assignment will end, in UTC, in the format of YYYY-MM-DDThh:mm:ss."
          },
          "tempVehicleNextJourneyOnly": {
            "type": "boolean",
            "description": "Boolean (true / false) to indicate that defaultVehicleId is a temporary assigned vehicle for just the next journey."
          },
          "tempPrivateMode": {
            "type": "boolean",
            "description": "Boolean (true / false) to indicate if journeys for this driver will be private for the remainder of the day."
          },
          "tempPrivateModeExpiry": {
            "type": "string",
            "format": "date-time",
            "description": ""
          },
          "tempPrivateModeNextJourneyOnly": {
            "type": "boolean",
            "description": "Boolean (true / false) to indicate if just the next journey for the driver will be a private journey."
          },
          "autoCreated": {
            "type": "boolean",
            "description": "Boolean (true / false) to indicate if this driver was automatically created as part of Tachograph functionality."
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverKeyDto"
            },
            "description": "Array of keys for the driver. "
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of tags for this driver. "
          },
          "secondaryGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameDto"
            }
          },
          "externalId": {
            "pattern": "^[a-zA-Z0-9]{0,25}$|",
            "type": "string",
            "description": "An external alphanumeric identifier for this driver. "
          }
        }
      },
      "DriverKeyDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value for the key."
          },
          "type": {
            "type": "string",
            "description": "Type of key. Can be one of DALLAS, RFID or TachoID."
          },
          "privateMode": {
            "type": "boolean",
            "description": "Boolean (true / false) to indicate if journeys with this key are always private."
          }
        }
      },
      "IdNameDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "UserCreateResponseDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "userName": {
            "type": "string",
            "description": "Username that can contain alp"
          },
          "externalIdentifier": {
            "type": "string",
            "description": "The SSO external identifier for the user. If specified, must be unique, i.e. it cannot be the same value as set for another user within the Connect Web Application. "
          },
          "fullName": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string",
            "description": "Correctly formatted email address for the user. "
          },
          "language": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "variant": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "unicodeLocaleKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "iso3Language": {
                "type": "string"
              },
              "iso3Country": {
                "type": "string"
              }
            },
            "description": "See Connect Web User section for the supported language locale values. "
          },
          "timezone": {
            "type": "string",
            "description": "See Connect Web User section for the supported timezone values. "
          },
          "roleId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of an existing role to be assigned to this user. "
          },
          "roleName": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "unitPreferences": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "sendWelcomeEmail": {
            "type": "boolean"
          },
          "secondaryGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameDto"
            }
          }
        }
      },
      "DriverSearchResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "activeDate": {
            "type": "string",
            "format": "date-time"
          },
          "timezoneId": {
            "type": "string"
          },
          "defaultVehicleId": {
            "type": "string"
          },
          "tempVehicleId": {
            "type": "string"
          },
          "tempVehicleExpiry": {
            "type": "string",
            "format": "date-time"
          },
          "tempVehicleNextJourneyOnly": {
            "type": "boolean"
          },
          "tempPrivateMode": {
            "type": "boolean"
          },
          "tempPrivateModeExpiry": {
            "type": "string",
            "format": "date-time"
          },
          "tempPrivateModeNextJourneyOnly": {
            "type": "boolean"
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverKeyDto"
            }
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secondaryGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameDto"
            }
          },
          "externalId": {
            "type": "string"
          }
        }
      },
      "WithPaginationResultDriverSearchResultDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverSearchResultDto"
            }
          }
        }
      },
      "DriverSearchRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "defaultVehicleId": {
            "type": "string"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AssetDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "currentOdometer": {
            "$ref": "#/components/schemas/OdometerReading"
          },
          "status": {
            "type": "string",
            "enum": [
              "IN_CIRCULATION",
              "IN_MAINTENANCE",
              "SOLD"
            ]
          },
          "primaryFuelSource": {
            "$ref": "#/components/schemas/FuelSource"
          },
          "secondaryFuelSource": {
            "$ref": "#/components/schemas/FuelSource"
          },
          "energy": {
            "type": "string",
            "enum": [
              "ICE",
              "EV",
              "HEV",
              "PHEV",
              "CNG",
              "LNG",
              "LPG",
              "FCEV",
              "BI_FUEL",
              "UNDEFINED"
            ]
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "latestEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingLiveInputEventOverviewDto"
            }
          }
        }
      },
      "AssignedVehicleDto": {
        "type": "object",
        "properties": {
          "assignedVehicleType": {
            "type": "string",
            "enum": [
              "TEMPORARY",
              "DEFAULT",
              "NONE"
            ]
          },
          "vehicle": {
            "$ref": "#/components/schemas/AssetDto"
          },
          "trackingLive": {
            "$ref": "#/components/schemas/TrackingLiveDto"
          }
        }
      },
      "FuelSource": {
        "type": "object",
        "properties": {
          "fuelType": {
            "type": "string",
            "enum": [
              "PETROL",
              "DIESEL",
              "METHANE",
              "PROPANE",
              "HYDROGEN",
              "ELECTRIC"
            ]
          },
          "fuelCapacity": {
            "type": "number",
            "format": "float"
          },
          "averageConsumption": {
            "type": "number",
            "format": "float"
          },
          "averageRangeKm": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "OdometerReading": {
        "type": "object",
        "properties": {
          "kms": {
            "type": "number",
            "format": "double"
          },
          "readingDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "CAN",
              "GPS",
              "DO_NOT_APPLY_ODOMETER_FILTER",
              "ALL_WITH_ODOMETERS"
            ]
          },
          "odometerKmsLastModified": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TrackingLiveDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "speed": {
            "type": "number",
            "format": "double"
          },
          "odometer": {
            "type": "number",
            "format": "double"
          },
          "heading": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "road": {
            "type": "string"
          },
          "roadNumber": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "formattedAddress": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          },
          "locationGroupName": {
            "type": "string"
          },
          "locationId": {
            "type": "string"
          },
          "privacy": {
            "type": "boolean"
          },
          "electricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "electricRangeKmEstimated": {
            "type": "boolean"
          },
          "electricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "electricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "electricCharging": {
            "type": "boolean"
          },
          "electricChargingTimeRemainingMins": {
            "type": "number",
            "format": "float"
          },
          "engineTotalHoursType": {
            "type": "string",
            "enum": [
              "CAN",
              "ESTIMATED"
            ]
          },
          "engineTotalHours": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "TrackingLiveInputEventChannelOverviewDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "stringValue": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "groupNumber": {
            "type": "integer",
            "format": "int32"
          },
          "key": {
            "type": "string"
          },
          "coldReadyState": {
            "type": "boolean"
          }
        }
      },
      "TrackingLiveInputEventOverviewDto": {
        "type": "object",
        "properties": {
          "eventDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "eventKey": {
            "type": "string"
          },
          "eventLabel": {
            "type": "string"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingLiveInputEventChannelOverviewDto"
            }
          }
        }
      },
      "MasternauthUserInvitationBulkResponseDto": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasternauthUserInvitationResult"
            }
          }
        }
      },
      "MasternauthUserInvitationResult": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "UserInvitationDto": {
        "required": [
          "customerId",
          "locale",
          "personId",
          "roleId",
          "type",
          "userName"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "mobile": {
            "pattern": "^([+][0-9]{1,20})?$",
            "type": "string"
          },
          "roleId": {
            "type": "string"
          },
          "locale": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "variant": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "unicodeLocaleKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "iso3Language": {
                "type": "string"
              },
              "iso3Country": {
                "type": "string"
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "WEB",
              "MOBILE"
            ]
          }
        }
      },
      "BehaviourMetricPersonRankingDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "rankInGroup": {
            "$ref": "#/components/schemas/BehaviourMetricRankDto"
          },
          "rankInCustomer": {
            "$ref": "#/components/schemas/BehaviourMetricRankDto"
          }
        }
      },
      "BehaviourMetricRankDto": {
        "type": "object",
        "properties": {
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "activeDriverCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DriverBehaviourPersonMetricsRequest": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Period start date and time, in UTC in format YYYY-MM-DDThh:mm:ss"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Period end date and time, in UTC in format YYYY-MM-DDThh:mm:ss"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of keys for the KPI to return details for. Possible values are: â DrivingPercentage - Cleaner KPI â SpeedCompliance - Safe Speed KPI â HarshEventsPercentage - Smoother K"
          },
          "includeTopHierarchy": {
            "type": "boolean"
          },
          "driverId": {
            "type": "string",
            "description": "Identifier (alphanumeric) of a driver."
          }
        }
      },
      "DrivingBehaviourSummaryDto": {
        "type": "object",
        "properties": {
          "fuel": {
            "type": "number",
            "format": "double"
          },
          "stops": {
            "type": "integer",
            "format": "int32"
          },
          "harshBraking": {
            "type": "integer",
            "format": "int64"
          },
          "harshAcceleration": {
            "type": "integer",
            "format": "int64"
          },
          "idleTime": {
            "type": "integer",
            "format": "int64"
          },
          "ptoIdle": {
            "type": "integer",
            "format": "int64"
          },
          "distanceKm": {
            "type": "number",
            "format": "double"
          },
          "speedingKms": {
            "type": "number",
            "format": "double"
          },
          "countOfSpeedingEpisodes": {
            "type": "integer",
            "format": "int32"
          },
          "driveTime": {
            "type": "integer",
            "format": "int64"
          },
          "harshEvents": {
            "type": "integer",
            "format": "int64"
          },
          "drivePlusIdleTime": {
            "type": "integer",
            "format": "int64"
          },
          "smootherHarshPer100km": {
            "type": "number",
            "format": "double"
          },
          "smootherPercentage": {
            "type": "number",
            "format": "double"
          },
          "safeSpeedPercentage": {
            "type": "number",
            "format": "double"
          },
          "cleanerPercentage": {
            "type": "number",
            "format": "double"
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "totalCo2Kg": {
            "type": "number",
            "format": "double"
          },
          "co2gPerKm": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleRegistration": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "energyType": {
            "type": "string",
            "enum": [
              "ICE",
              "EV",
              "HEV",
              "PHEV",
              "CNG",
              "LNG",
              "LPG",
              "FCEV",
              "BI_FUEL",
              "UNDEFINED"
            ]
          },
          "fuelType": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PETROL",
                "DIESEL",
                "METHANE",
                "PROPANE",
                "HYDROGEN",
                "ELECTRIC"
              ]
            }
          },
          "fuelUsedPetrolEquivalentLitres": {
            "type": "number",
            "format": "double"
          },
          "gasUsedKg": {
            "type": "number",
            "format": "double"
          },
          "electricUsedkWh": {
            "type": "number",
            "format": "double"
          },
          "fuelUsedLitres": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "WithPaginationResultDrivingBehaviourSummaryDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "To"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DrivingBehaviourSummaryDto"
            },
            "description": "Array of behaviour metrics."
          }
        }
      },
      "DriverBehaviourSummaryRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "driverId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          }
        }
      },
      "BehaviourMetricDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "A key for the KPI, will be one of â SpeedCompliance - Safer KPI â DrivingPercentage - Cleaner KPI â HarshEventsPercentage - Smoother KPI"
          },
          "value": {
            "type": "number",
            "format": "double",
            "description": "Percentage value for the KPI for the specified period."
          },
          "previousValue": {
            "type": "number",
            "format": "double",
            "description": "Previous percentage value for the KPI."
          }
        }
      },
      "GroupBehaviourMetricRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Period start date and time, in UTC in format YYYY-MM-DDThh:mm:ss"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Period end date and time, in UTC in format YYYY-MM-DDThh:mm:ss"
          },
          "keys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timeZone": {
            "type": "string"
          },
          "hierarchyNodeId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of an existing group to return the Driver Behaviour metrics for."
          }
        }
      },
      "BehaviourMetricDailyDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "previousValue": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DriverBehaviourMetricRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Period start date and time, in UTC in format YYYY-MM-DDThh:mm:ss"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Period end date and time, in UTC in format YYYY-MM-DDThh:mm:ss"
          },
          "keys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of keys for the KPI to return details for. Possible values are: â DrivingPercentage - Cleaner KPI â SpeedCompliance - Safe Speed KPI â HarshEventsPercentage - Smoother KPI"
          },
          "timeZone": {
            "type": "string"
          },
          "driverId": {
            "type": "string",
            "description": "Identifier of a driver."
          }
        }
      },
      "BehaviourMetricRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "keys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timeZone": {
            "type": "string"
          }
        }
      },
      "DriverSummaryWithAssetsDto": {
        "type": "object",
        "properties": {
          "numberOfEngineOverRevvingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfSpeedingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfHarshAccelerationEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfHarshBrakingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfHarshCorneringEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfExcessiveIdlingOutsideBaseEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfExcessiveIdlingInsideBaseEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfEngineOverRevvingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfSpeedingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfHarshAccelerationEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfHarshBrakingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfHarshCorneringEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfExcessiveIdlingOutsideBaseEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfExcessiveIdlingInsideBaseEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scorePerHour": {
            "type": "number",
            "format": "double"
          },
          "durationSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "groupName": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupRank": {
            "type": "integer",
            "format": "int32"
          },
          "entityInGroup": {
            "type": "integer",
            "format": "int32"
          },
          "driverName": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          }
        }
      },
      "EcoScorePersonResponseDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverSummaryWithAssetsDto"
            },
            "description": "Array of drivers."
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of drivers that matched the search parameters."
          }
        }
      },
      "EcoScoreDriverRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "formattedAddress": {
            "type": "string"
          },
          "road": {
            "type": "string"
          },
          "roadNumber": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "roadSpeedKph": {
            "type": "number",
            "format": "float"
          },
          "roadType": {
            "type": "string"
          },
          "speedLimitType": {
            "type": "integer",
            "format": "int32"
          },
          "countryIsoCode": {
            "type": "string"
          },
          "division": {
            "type": "string"
          },
          "subDivision": {
            "type": "string"
          },
          "privateRoadMinSpeedLimit": {
            "type": "number",
            "format": "float"
          },
          "divisionIsoCode": {
            "type": "string"
          },
          "subDivisionIsoCode": {
            "type": "string"
          },
          "private": {
            "type": "boolean"
          }
        }
      },
      "EcoScoreEventResponseDto": {
        "type": "object",
        "properties": {
          "vehicleRegistration": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "vehicleGroupName": {
            "type": "string"
          },
          "vehicleGroupId": {
            "type": "string"
          },
          "driverGroupName": {
            "type": "string"
          },
          "driverGroupId": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "eventDurationMs": {
            "type": "number",
            "format": "double"
          },
          "speedKph": {
            "type": "number",
            "format": "double"
          },
          "maximumRecordedSpeedKph": {
            "type": "number",
            "format": "double"
          },
          "rateOfAcceleration": {
            "type": "number",
            "format": "double"
          },
          "rateOfLateralAcceleration": {
            "type": "number",
            "format": "double"
          },
          "rateOfDeceleration": {
            "type": "number",
            "format": "double"
          },
          "durationInSeconds": {
            "type": "number",
            "format": "double"
          },
          "maximumRecordedRPM": {
            "type": "number",
            "format": "double"
          },
          "locationId": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          },
          "locationCategoryId": {
            "type": "string"
          },
          "locationCategoryName": {
            "type": "string"
          },
          "isAtBaseLocation": {
            "type": "boolean"
          },
          "idlingFidelity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WithPaginationResultEcoScoreEventResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcoScoreEventResponseDto"
            }
          }
        }
      },
      "DriverBehaviourEventDateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "dateType": {
            "type": "string",
            "enum": [
              "EVENT_START_DATE_TIME",
              "CREATED_TIME"
            ]
          },
          "supportedDateTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EVENT_START_DATE_TIME",
                "CREATED_TIME"
              ]
            }
          }
        }
      },
      "EcoScoreEventDriverRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "dateType": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "eventFilter": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DriverBehaviourEventDateRange"
          }
        }
      },
      "EcoScoreEventVehicleRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "dateType": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "eventFilter": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DriverBehaviourEventDateRange"
          }
        }
      },
      "AssetSummaryWithDriversDto": {
        "type": "object",
        "properties": {
          "numberOfEngineOverRevvingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfSpeedingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfHarshAccelerationEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfHarshBrakingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfHarshCorneringEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfExcessiveIdlingOutsideBaseEvents": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfExcessiveIdlingInsideBaseEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfEngineOverRevvingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfSpeedingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfHarshAccelerationEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfHarshBrakingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfHarshCorneringEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfExcessiveIdlingOutsideBaseEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scoreForNumberOfExcessiveIdlingInsideBaseEvents": {
            "type": "integer",
            "format": "int64"
          },
          "scorePerHour": {
            "type": "number",
            "format": "double"
          },
          "durationSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "groupName": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupRank": {
            "type": "integer",
            "format": "int32"
          },
          "entityInGroup": {
            "type": "integer",
            "format": "int32"
          },
          "assetRegistration": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          }
        }
      },
      "EcoScoreVehicleResponseDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetSummaryWithDriversDto"
            }
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EcoScoreVehicleRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "LatestEcoScoreEventDetailsVehicleDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcoScoreEventResponseDto"
            }
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LatestEcoScoreEventVehicleRequestDto": {
        "required": [
          "modifiedSinceDate"
        ],
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "modifiedSinceDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventFilter": {
            "type": "string"
          }
        }
      },
      "EcodriveDriverScoreDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "score": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "EcodriveDriversScoreDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "driversScore": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcodriveDriverScoreDto"
            }
          }
        }
      },
      "EcodriveDriversScoreResultDto": {
        "type": "object",
        "properties": {
          "scoresAggregatedByDay": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcodriveDriversScoreDto"
            }
          },
          "scoresAggregatedByWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcodriveDriversScoreDto"
            }
          },
          "scoresAggregatedByMonth": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcodriveDriversScoreDto"
            }
          }
        }
      },
      "EcodriveDriversScoreRequestDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "userTimezone": {
            "type": "string"
          },
          "locale": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "variant": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "unicodeLocaleKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "iso3Language": {
                "type": "string"
              },
              "iso3Country": {
                "type": "string"
              }
            }
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "weeks": {
            "type": "integer",
            "format": "int32"
          },
          "months": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EcodriveJourneySummaryDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "fuelConsumptionLitresPer100Km": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "EcodriveScoreSummaryDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "distance": {
            "type": "number",
            "format": "double"
          },
          "totalEngineOverRewingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "totalSpeedingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "totalHarshAccelerationEvents": {
            "type": "integer",
            "format": "int64"
          },
          "totalHarshBreakingEvents": {
            "type": "integer",
            "format": "int64"
          },
          "totalHarshCorneringEvents": {
            "type": "integer",
            "format": "int64"
          },
          "totalIdlingInsideEvents": {
            "type": "integer",
            "format": "int64"
          },
          "totalIdlingOutsideEvents": {
            "type": "integer",
            "format": "int64"
          },
          "groupMinScore": {
            "type": "number",
            "format": "double"
          },
          "groupMaxScore": {
            "type": "number",
            "format": "double"
          },
          "groupAvgScore": {
            "type": "number",
            "format": "double"
          },
          "rank": {
            "type": "string"
          },
          "fuelConsumptionLitresPer100Km": {
            "type": "number",
            "format": "double"
          },
          "co2EmissionsKg": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "EcodriveSummaryResultDto": {
        "type": "object",
        "properties": {
          "scoresAggregatedByDay": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcodriveScoreSummaryDto"
            }
          },
          "scoresAggregatedByWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcodriveScoreSummaryDto"
            }
          },
          "scoresAggregatedByMonth": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcodriveScoreSummaryDto"
            }
          },
          "ecodriveJourneySummaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EcodriveJourneySummaryDto"
            }
          }
        }
      },
      "EcodriveSummaryRequestDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "userTimezone": {
            "type": "string"
          },
          "locale": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "variant": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "unicodeLocaleKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "iso3Language": {
                "type": "string"
              },
              "iso3Country": {
                "type": "string"
              }
            }
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "weeks": {
            "type": "integer",
            "format": "int32"
          },
          "months": {
            "type": "integer",
            "format": "int32"
          },
          "maxJourneySummaries": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TriggerEcodriveSummaryRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EventLocaleLabelDto": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "EventTypeDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "eventKey": {
            "type": "string"
          },
          "eventLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventLocaleLabelDto"
            }
          }
        }
      },
      "WithPaginationResultEventTypeDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypeDto"
            }
          }
        }
      },
      "WithPaginationRequest": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExpenseSummariesCancelResponseDto": {
        "type": "object",
        "properties": {
          "cancelledSubmittedSummaries": {
            "type": "integer",
            "format": "int32"
          },
          "cancelledSubmittedJourneys": {
            "type": "integer",
            "format": "int32"
          },
          "cancelledSubmittedManualJourneys": {
            "type": "integer",
            "format": "int32"
          },
          "cancelledSummaryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cancelledJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cancelledManualJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExpenseSummariesCancelRequestDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExpenseSummaryResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "submittedTimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "submittedRate": {
            "type": "number",
            "format": "double"
          },
          "submittedCurrencyCode": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "totalClaim": {
            "type": "number",
            "format": "double"
          },
          "businessDistance": {
            "type": "number",
            "format": "double"
          },
          "personalDistance": {
            "type": "number",
            "format": "double"
          },
          "approverEmailAddress": {
            "type": "string"
          },
          "rejectedReason": {
            "type": "string"
          },
          "startPeriod": {
            "type": "string",
            "format": "date-time"
          },
          "endPeriod": {
            "type": "string",
            "format": "date-time"
          },
          "businessJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "personalJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "commuteAJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "commuteBJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "businessManualJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "personalManualJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "commuteAManualJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "commuteBManualJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExpenseSummaryRequestDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DriverVehicleConsumptionResultDto": {
        "type": "object",
        "properties": {
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the driver.."
          },
          "driverName": {
            "type": "string",
            "description": "Driver name."
          },
          "vehicles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleConsumptionResultDto"
            }
          }
        }
      },
      "VehicleConsumptionResultDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the vehicle."
          },
          "assetRegistration": {
            "type": "string",
            "description": "Vehicle registration."
          },
          "assetName": {
            "type": "string",
            "description": "Friendly name of the vehicle."
          },
          "distance": {
            "type": "number",
            "format": "double",
            "description": "Total distance (in KM) for journeys."
          },
          "totalFuel": {
            "type": "number",
            "format": "double"
          },
          "benchmarkConsumption": {
            "type": "number",
            "format": "double"
          },
          "manufacturerConsumption": {
            "type": "number",
            "format": "float"
          },
          "energyType": {
            "type": "string",
            "enum": [
              "ICE",
              "EV",
              "HEV",
              "PHEV",
              "CNG",
              "LNG",
              "LPG",
              "FCEV",
              "BI_FUEL",
              "UNDEFINED"
            ],
            "description": "The energy type for the vehicle. Can be one of the following: â UNDEFINED â EV - Battery Electric Vehicle â PHEV - Plug-in Hybrid Electric Vehicle â HEV - Hybrid Electric Vehicle â FECV - Fuel Cell Electric Vehicle (Hydrogen) â ICE - Internal combustion engine â CNG - Compressed Natural Gas â LNG - Liquefied natural gas â LPG - Liquefied petroleum gas â BI-FUEL - multi-fuel engines capable of running on two fuels."
          },
          "fuelType": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PETROL",
                "DIESEL",
                "METHANE",
                "PROPANE",
                "HYDROGEN",
                "ELECTRIC"
              ]
            },
            "description": "A list of the primary and secondary fuel types for the vehicle. Values in the list can included: â PETROL â DIESEL â PROPANE â METHANE â ELECTRIC â HYDROGEN"
          },
          "electricUsedkWh": {
            "type": "number",
            "format": "float",
            "description": "Electricity used for all journeys in kWh."
          },
          "gasUsedKg": {
            "type": "number",
            "format": "float",
            "description": "Gas for all journeys in Kg."
          },
          "fuelUsedLitres": {
            "type": "number",
            "format": "double",
            "description": "Petrol or Diesel fuel used for all journeys, in litres"
          },
          "fuelUsedPetrolEquivalentLitres": {
            "type": "number",
            "format": "double"
          },
          "co2": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DriverVehicleConsumptionRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "driverId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "startDateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "VehicleConsumptionRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "startDateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "FuelTransactionDTO": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string"
          },
          "cardProvider": {
            "type": "string"
          },
          "cardAccountNumber": {
            "type": "string"
          },
          "transactionTimeStamp": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          },
          "fleetCode": {
            "type": "string"
          },
          "accountName": {
            "type": "string"
          },
          "siteId": {
            "type": "string"
          },
          "siteCountry": {
            "type": "string"
          },
          "cardNo": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "vatRate": {
            "type": "number",
            "format": "double"
          },
          "costPerLitre": {
            "type": "number",
            "format": "double"
          },
          "costPerLitreWithoutTax": {
            "type": "number",
            "format": "double"
          },
          "transactionCost": {
            "type": "number",
            "format": "double"
          },
          "quantityLitres": {
            "type": "number",
            "format": "double"
          },
          "priceNet": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string"
          },
          "odometerKm": {
            "type": "integer",
            "format": "int64"
          },
          "accountVRN": {
            "type": "string"
          },
          "enteredVRN": {
            "type": "string"
          },
          "transactionType": {
            "type": "string"
          },
          "productDescription": {
            "type": "string"
          },
          "priceGross": {
            "type": "number",
            "format": "double"
          },
          "hasTranTime": {
            "type": "boolean"
          },
          "siteType": {
            "type": "string"
          },
          "siteName": {
            "type": "string"
          },
          "fuelStationLocation": {
            "type": "string"
          },
          "manuallyUpdated": {
            "type": "boolean"
          }
        }
      },
      "WithPaginationResultFuelTransactionDTO": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FuelTransactionDTO"
            }
          }
        }
      },
      "FuelTransactionRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "includeUnmatchedVehicles": {
            "type": "boolean"
          },
          "includeMatchedVehicles": {
            "type": "boolean"
          }
        }
      },
      "GroupDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 24,
            "minLength": 1,
            "pattern": "^[a-z0-9]+$",
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the newly added / updated group.",
            "example": "groupID"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name for the group",
            "example": "group-name"
          },
          "parentId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the parent of this group.",
            "example": "rootGroupId"
          },
          "path": {
            "type": "string",
            "description": "List of the unique, unchangeable system generated identifiers (alphanumeric) for all the parent groups (starting from the root node) of this group, separated by full stops. The list includes the identifier for this group. ",
            "readOnly": true,
            "example": "rootGroupId.groupID"
          },
          "vehicleIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "List of Vehicle IDs to assign for concrete group",
              "example": "[\"vehicleID1\",\"vehicleID2\"]"
            },
            "description": "Array of unique, unchangeable system generated identifiers (alphanumeric) for the vehicles assigned to this group."
          },
          "personIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "List of Person IDs to assign for concrete group",
              "example": "[\"personID1\",\"personID2\"]"
            },
            "description": "Array of unique, unchangeable system generated identifiers (alphanumeric) for the drivers and web users assigned to this group. Wil be an empty array for a newly created group."
          }
        }
      },
      "ApiErrorDto": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "errorMessage": {
            "type": "string"
          },
          "offendingFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GroupQueryDto": {
        "required": [
          "Name of the group"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "Group Name",
            "description": "The name for the group - name must not contain any of the characters <>?\"/|\\%{}*[]"
          },
          "parentId": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[a-z0-9]*$",
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the parent of this group. This value is mandatory, a new top root node for the hierarchy cannot be created.",
            "example": "parentGroupId"
          }
        }
      },
      "GroupSearchResultDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 24,
            "minLength": 1,
            "pattern": "^[a-z0-9]+$",
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the group.",
            "example": "groupID"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the group.",
            "example": "group-name"
          },
          "parentId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the parent of this group.Not included for the root group in the hierarchy",
            "example": "rootGroupId"
          },
          "path": {
            "type": "string",
            "description": "List of the unique, unchangeable system generated identifiers (alphanumeric) for all the parent groups (starting from the root node) of this group, separated by full stops.The list includes the identifier for this group",
            "readOnly": true,
            "example": "rootGroupId.groupID"
          },
          "countDrivers": {
            "type": "integer",
            "description": "Count of the number of drivers in this group node.",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "countSecondaryDrivers": {
            "type": "integer",
            "description": "Count of assigned secondary drivers to group",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "countSecondaryVehicles": {
            "type": "integer",
            "description": "Count of assigned secondary vehicles to group",
            "format": "int32",
            "readOnly": true,
            "example": 0
          },
          "countVehicles": {
            "type": "integer",
            "description": "Count of the number of vehicles in this group node.",
            "format": "int32",
            "readOnly": true,
            "example": 0
          }
        }
      },
      "CoordinateDto": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "IdlingDetailDto": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string"
          },
          "vehicleRegistration": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "coordinates": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "address": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          }
        }
      },
      "LocationDto": {
        "required": [
          "categoryName",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^[\\w]*$",
            "type": "string",
            "description": "Unique, unchangeable system generated identifier of the location. "
          },
          "radius": {
            "type": "number",
            "format": "double",
            "description": "Radius (in km) of the location boundary. Must be between 0.001 and 1. Must be specified if polygon details are not specified. "
          },
          "name": {
            "type": "string",
            "description": "Unique name for the location."
          },
          "categoryName": {
            "type": "string",
            "description": "Name of an existing location category. "
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto",
            "description": "Address object of the location. "
          },
          "coordinate": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "polygon": {
            "maxItems": 2147483647,
            "minItems": 3,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CoordinateDto"
            },
            "description": "Array of points that define the geo-fence boundary of the polygon. Must be specified if radius is not specified. "
          },
          "reference": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "A reference for this location. Included in the response if a reference has been specified for this location. "
          },
          "phoneNumber": {
            "maxLength": 20,
            "minLength": 0,
            "pattern": "^\\+?\\d+$",
            "type": "string",
            "description": "A phone number for this location. Included in the response if a phone number has been specified for this location. "
          },
          "contact": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "A contact for this location. Included in the response if a contact has been specified for this location. "
          },
          "email": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "A valid email address for this location. Cannot be more than 50 characters."
          },
          "notes": {
            "maxLength": 140,
            "minLength": 0,
            "type": "string",
            "description": "Notes for this location, Cannot be more than 140 characters. "
          }
        }
      },
      "WithPaginationResultIdlingDetailDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of idling activity blocks that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdlingDetailDto"
            },
            "description": "Array of idling activity block details."
          }
        }
      },
      "AssetIdlingDetailRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "idlingDurationSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "vehicleId": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          }
        }
      },
      "PersonIdlingDetailRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "idlingDurationSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "driverId": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          }
        }
      },
      "TriggerIdlingDetailRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InputBlockDto": {
        "type": "object",
        "properties": {
          "eventStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventStartLatitude": {
            "type": "number",
            "format": "double"
          },
          "eventStartLongitude": {
            "type": "number",
            "format": "double"
          },
          "eventStartFormattedAddress": {
            "type": "string"
          },
          "eventStartLocationName": {
            "type": "string"
          },
          "eventStartLocationGroupName": {
            "type": "string"
          },
          "eventStartLocationId": {
            "type": "string"
          },
          "eventStartLocationGroupId": {
            "type": "string"
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventEndLatitude": {
            "type": "number",
            "format": "double"
          },
          "eventEndLongitude": {
            "type": "number",
            "format": "double"
          },
          "eventEndFormattedAddress": {
            "type": "string"
          },
          "eventEndLocationName": {
            "type": "string"
          },
          "eventEndLocationGroupName": {
            "type": "string"
          },
          "eventEndLocationId": {
            "type": "string"
          },
          "eventEndLocationGroupId": {
            "type": "string"
          },
          "inputLabel": {
            "type": "string"
          },
          "inputId": {
            "type": "string"
          },
          "customLabel": {
            "type": "string"
          },
          "activeStateLabel": {
            "type": "string"
          },
          "customActiveStateLabel": {
            "type": "string"
          },
          "inactiveStateLabel": {
            "type": "string"
          },
          "customInactiveStateLabel": {
            "type": "string"
          },
          "fuelUsed": {
            "type": "number",
            "format": "double"
          },
          "distanceKms": {
            "type": "number",
            "format": "double"
          },
          "speedKph": {
            "type": "number",
            "format": "double"
          },
          "durationSeconds": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "InputUsageDto": {
        "type": "object",
        "properties": {
          "vehicleRegistration": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "vehicleGroupName": {
            "type": "string"
          },
          "vehicleGroupId": {
            "type": "string"
          },
          "driverGroupName": {
            "type": "string"
          },
          "driverGroupId": {
            "type": "string"
          },
          "inputBlock": {
            "$ref": "#/components/schemas/InputBlockDto"
          },
          "secondaryVehicleGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameDto"
            }
          },
          "secondaryDriverGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameDto"
            }
          }
        }
      },
      "WithPaginationResultInputUsageDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of input blocks that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputUsageDto"
            },
            "description": "Array of input usage blocks."
          }
        }
      },
      "InputUsageDriverRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "enableSecondaryGroupAssignments": {
            "type": "boolean"
          },
          "driverId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "InputUsageVehicleRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "enableSecondaryGroupAssignments": {
            "type": "boolean"
          },
          "vehicleId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "ChannelDto": {
        "type": "object",
        "properties": {
          "inputKey": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "calcValue": {
            "type": "number"
          },
          "lastUpdatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "isValid": {
            "type": "boolean"
          }
        }
      },
      "InputEventDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "assetRegistration": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "assetGroupName": {
            "type": "string"
          },
          "assetGroupId": {
            "type": "string"
          },
          "assetSecondaryGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameDto"
            }
          },
          "driverId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "driverGroupName": {
            "type": "string"
          },
          "driverGroupId": {
            "type": "string"
          },
          "driverSecondaryGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameDto"
            }
          },
          "eventDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "coordinate": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "formattedAddress": {
            "type": "string"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationDto"
            }
          },
          "eventKey": {
            "type": "string"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelDto"
            }
          },
          "private": {
            "type": "boolean"
          }
        }
      },
      "WithPaginationResultInputEventDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputEventDto"
            }
          }
        }
      },
      "InputEventRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "enableSecondaryGroupAssignments": {
            "type": "boolean"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "TimestampedWithPaginationResultInputEventDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputEventDto"
            }
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "InputEventRequestAssetDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "enableSecondaryGroupAssignments": {
            "type": "boolean"
          },
          "assetId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "LatestInputEventsDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputEventDto"
            }
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LatestInputEventsRequestDto": {
        "type": "object",
        "properties": {
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "assetId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "eventKey": {
            "type": "string"
          },
          "enableSecondaryGroupAssignments": {
            "type": "boolean"
          }
        }
      },
      "InputLocaleCustomLabelDto": {
        "type": "object",
        "properties": {
          "active": {
            "type": "string"
          },
          "inactive": {
            "type": "string"
          }
        }
      },
      "InputLocaleLabelDto": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "customLabel": {
            "$ref": "#/components/schemas/InputLocaleCustomLabelDto"
          }
        }
      },
      "InputTypeDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "inputTypeKey": {
            "type": "string"
          },
          "inputDataType": {
            "type": "string"
          },
          "multiplier": {
            "type": "number",
            "format": "float"
          },
          "offset": {
            "type": "number",
            "format": "float"
          },
          "inputLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputLocaleLabelDto"
            }
          },
          "visible": {
            "type": "boolean"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "mediaType": {
            "type": "string"
          },
          "category": {
            "type": "string"
          }
        }
      },
      "WithPaginationResultInputTypeDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputTypeDto"
            }
          }
        }
      },
      "InterestedPartyVehicleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "assetType": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "interestedPartyTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "energyType": {
            "type": "string"
          },
          "fuelType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WithPaginationResultInterestedPartyVehicleDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterestedPartyVehicleDto"
            }
          }
        }
      },
      "InterestedPartyVehicleRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customerIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InterestedPartyAssetSummaryResponseDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "assetRegistration": {
            "type": "string"
          },
          "weeks": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterestedPartyAssetSummaryResponseWeekDto"
            }
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "interestedPartyTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InterestedPartyAssetSummaryResponseWeekDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "activeDays": {
            "type": "integer",
            "format": "int32"
          },
          "inactiveDays": {
            "type": "integer",
            "format": "int32"
          },
          "distanceKm": {
            "type": "number",
            "format": "double"
          },
          "journeysCount": {
            "type": "integer",
            "format": "int32"
          },
          "fuelUsed": {
            "type": "number",
            "format": "double"
          },
          "movingWithoutPtoDurationSec": {
            "type": "integer",
            "format": "int64"
          },
          "movingWithPtoDurationSec": {
            "type": "integer",
            "format": "int64"
          },
          "movingDurationSec": {
            "type": "integer",
            "format": "int64"
          },
          "movingDurationPercentage": {
            "type": "number",
            "format": "double"
          },
          "idlingWithoutPtoDurationSec": {
            "type": "integer",
            "format": "int64"
          },
          "idlingWithPtoDurationSec": {
            "type": "integer",
            "format": "int64"
          },
          "engineOverRevvingCount": {
            "type": "integer",
            "format": "int32"
          },
          "harshAccelerationCount": {
            "type": "integer",
            "format": "int32"
          },
          "harshBrakingCount": {
            "type": "integer",
            "format": "int32"
          },
          "harshCorneringCount": {
            "type": "integer",
            "format": "int32"
          },
          "speedingEventCount": {
            "type": "integer",
            "format": "int32"
          },
          "excessiveIdlingInsideBaseCount": {
            "type": "integer",
            "format": "int32"
          },
          "excessiveIdlingOutsideBaseCount": {
            "type": "integer",
            "format": "int32"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "averageSpeedKmsPerHour": {
            "type": "number",
            "format": "double"
          },
          "fuelConsumptionLitresPerKms": {
            "type": "number",
            "format": "double"
          },
          "co2Kg": {
            "type": "number",
            "format": "double"
          },
          "co2GrmPerKm": {
            "type": "number",
            "format": "double"
          },
          "fuelUsedPetrolEquivalentLitres": {
            "type": "number",
            "format": "double"
          },
          "fuelUsedLitres": {
            "type": "number",
            "format": "double"
          },
          "gasUsedKg": {
            "type": "number",
            "format": "double"
          },
          "electricUsedkWh": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "WithPaginationResultInterestedPartyAssetSummaryResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterestedPartyAssetSummaryResponseDto"
            }
          }
        }
      },
      "InterestedPartyAssetSummaryRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "customerIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assetIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InterestedPartyCurrentPositionResultsAddress": {
        "type": "object",
        "properties": {
          "formattedAddress": {
            "type": "string"
          },
          "road": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "InterestedPartyCurrentPositionResultsResponseDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "assetRegistration": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "interestedPartyTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eventDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "eventType": {
            "type": "string"
          },
          "eventStatus": {
            "type": "string"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "address": {
            "$ref": "#/components/schemas/InterestedPartyCurrentPositionResultsAddress"
          },
          "odometerKms": {
            "type": "number",
            "format": "double"
          },
          "electricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "electricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "electricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "electricRangeKmEstimated": {
            "type": "boolean"
          },
          "electricChargingTimeRemainingMins": {
            "type": "number",
            "format": "float"
          },
          "electricCharging": {
            "type": "string",
            "enum": [
              "CHARGING",
              "DISCHARGING"
            ]
          },
          "fuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "fuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "engineRpm": {
            "type": "number",
            "format": "float"
          },
          "engineTotalHours": {
            "type": "number",
            "format": "float"
          },
          "speedKph": {
            "type": "number",
            "format": "double"
          },
          "energyType": {
            "type": "string"
          },
          "fuelType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WithPaginationResultInterestedPartyCurrentPositionResultsResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterestedPartyCurrentPositionResultsResponseDto"
            }
          }
        }
      },
      "InterestedPartyCurrentPositionResultsRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "customerIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FaultDetailsResultDto": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "sourceDescription": {
            "type": "string"
          },
          "occurrenceCount": {
            "type": "integer",
            "format": "int32"
          },
          "fmi": {
            "type": "string"
          },
          "fmiDescription": {
            "type": "string"
          },
          "lamps": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InterestedPartyFaultMaintenanceResponseDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "interestedPartyTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "startOdometer": {
            "type": "number",
            "format": "double"
          },
          "endOdometer": {
            "type": "number",
            "format": "double"
          },
          "faultInProgress": {
            "type": "boolean"
          },
          "faultCode": {
            "type": "string"
          },
          "faultDescription": {
            "type": "string"
          },
          "faultType": {
            "type": "string"
          },
          "faultDetails": {
            "$ref": "#/components/schemas/FaultDetailsResultDto"
          }
        }
      },
      "WithPaginationResultInterestedPartyFaultMaintenanceResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterestedPartyFaultMaintenanceResponseDto"
            }
          }
        }
      },
      "InterestedPartyFaultMaintenanceRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "onlyActiveFaults": {
            "type": "boolean"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customerIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assetIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InterestedPartyVehicleOdometerResponseDTO": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "assetType": {
            "type": "string"
          },
          "odometerKms": {
            "type": "number",
            "format": "double"
          },
          "odometerType": {
            "type": "string",
            "enum": [
              "CAN",
              "GPS",
              "DO_NOT_APPLY_ODOMETER_FILTER",
              "ALL_WITH_ODOMETERS"
            ]
          },
          "odometerReadingDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "interestedPartyTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WithPaginationResultInterestedPartyVehicleOdometerResponseDTO": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterestedPartyVehicleOdometerResponseDTO"
            }
          }
        }
      },
      "InterestedPartyVehicleOdometerRequestDTO": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customerIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "odometerType": {
            "type": "string"
          }
        }
      },
      "InterestedPartyServiceDueDateResponseDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "distanceToServiceKms": {
            "type": "number",
            "format": "double"
          },
          "serviceDueDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WithPaginationResultInterestedPartyServiceDueDateResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterestedPartyServiceDueDateResponseDto"
            }
          }
        }
      },
      "InterestedPartyServiceDueDateRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customerIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assetIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InterestedPartyTagRequestDto": {
        "required": [
          "assets",
          "tag"
        ],
        "type": "object",
        "properties": {
          "tag": {
            "type": "string"
          },
          "assets": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InterestedPartyTagsDto": {
        "type": "object",
        "properties": {
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IoManagementResponseDto": {
        "type": "object",
        "properties": {
          "failedEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerIoFrameDto"
            }
          },
          "successEvents": {
            "type": "integer",
            "format": "int32"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "PartnerIOCoordinateDto": {
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "PartnerIoChannelDto": {
        "type": "object",
        "properties": {
          "inputKey": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PartnerIoFrameDto": {
        "type": "object",
        "properties": {
          "partnerAssetId": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "eventDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "coordinate": {
            "$ref": "#/components/schemas/PartnerIOCoordinateDto"
          },
          "privacy": {
            "type": "boolean"
          },
          "eventKey": {
            "type": "string"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerIoChannelDto"
            }
          },
          "failReason": {
            "type": "string"
          }
        }
      },
      "Asset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vin": {
            "type": "string"
          },
          "assetType": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          },
          "defaultDriverId": {
            "type": "string"
          },
          "tempDriverId": {
            "type": "string"
          },
          "tempDriverExpiry": {
            "type": "string",
            "format": "date-time"
          },
          "tempDriverNextJourneyOnly": {
            "type": "boolean"
          },
          "litresPer100KmBenchmark": {
            "$ref": "#/components/schemas/LitresPer100KmBenchmark"
          },
          "manualOdometerReading": {
            "$ref": "#/components/schemas/OdometerReading"
          },
          "currentOdometer": {
            "$ref": "#/components/schemas/OdometerReading"
          },
          "cumulativeRuntimeSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "cumulativePtoRuntimeSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "cumulativeIdleTimeSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "cumulativeRuntimeSecondsLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "cumulativeFuelUsed": {
            "type": "number",
            "format": "double"
          },
          "vehicle": {
            "$ref": "#/components/schemas/EcoTaxVehicleParameters"
          },
          "assetFeatureTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TRACK",
                "PING",
                "BATTERY",
                "WIRED",
                "DRIVERKEY",
                "GENERICINPUTS",
                "PTO",
                "GRITTING",
                "SERVICE",
                "DEFECTS",
                "TRUE_ENGINE_IDLING",
                "NO_IDLING",
                "SUSPLUS",
                "SERVICE_CAN",
                "MOBILEDEVICE",
                "FAULT_MBOX_200",
                "FAULT_MBOX_201",
                "FAULT_MBOX_205",
                "FAULT_MBOX_207",
                "FAULT_MBOX_210",
                "FAULT_MBOX_211",
                "FAULT_MBOX_214",
                "FAULT_MBOX_216",
                "FAULT_MBOX_217",
                "FAULT_MBOX_218",
                "FAULT_MBOX_219",
                "FAULT_MBOX_220",
                "FAULT_MBOX_222",
                "FAULT_MBOX_223",
                "FAULT_MBOX_226",
                "FAULT_MBOX_227",
                "TACHO_BVFM",
                "WATEA",
                "DOOR",
                "UNTRACKED"
              ]
            }
          },
          "historicAssetFeatureTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TRACK",
                "PING",
                "BATTERY",
                "WIRED",
                "DRIVERKEY",
                "GENERICINPUTS",
                "PTO",
                "GRITTING",
                "SERVICE",
                "DEFECTS",
                "TRUE_ENGINE_IDLING",
                "NO_IDLING",
                "SUSPLUS",
                "SERVICE_CAN",
                "MOBILEDEVICE",
                "FAULT_MBOX_200",
                "FAULT_MBOX_201",
                "FAULT_MBOX_205",
                "FAULT_MBOX_207",
                "FAULT_MBOX_210",
                "FAULT_MBOX_211",
                "FAULT_MBOX_214",
                "FAULT_MBOX_216",
                "FAULT_MBOX_217",
                "FAULT_MBOX_218",
                "FAULT_MBOX_219",
                "FAULT_MBOX_220",
                "FAULT_MBOX_222",
                "FAULT_MBOX_223",
                "FAULT_MBOX_226",
                "FAULT_MBOX_227",
                "TACHO_BVFM",
                "WATEA",
                "DOOR",
                "UNTRACKED"
              ]
            }
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nextService": {
            "$ref": "#/components/schemas/NextService"
          },
          "serviceHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceHistory"
            }
          },
          "defects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Defect"
            }
          },
          "makeModelVersion": {
            "type": "string"
          },
          "interestedParties": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "interestedPartyTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "yearOfManufacture": {
            "type": "integer",
            "format": "int32"
          },
          "ownershipStartDate": {
            "type": "string",
            "format": "date"
          },
          "ownershipEndDate": {
            "type": "string",
            "format": "date"
          },
          "purchaseCost": {
            "type": "number"
          },
          "monthlyLeaseCost": {
            "type": "number"
          },
          "monthlyInsuranceCost": {
            "type": "number"
          },
          "monthlyMaintenanceCost": {
            "type": "number"
          },
          "scheduledMaintenanceAmount": {
            "type": "number"
          },
          "unscheduledMaintenanceAmount": {
            "type": "number"
          },
          "monthlyFuelCost": {
            "type": "number"
          },
          "mileageAuthorised": {
            "type": "integer",
            "format": "int32"
          },
          "costPerMileOverLimit": {
            "type": "number"
          },
          "costOfDisposal": {
            "type": "number"
          },
          "buyoutAmount": {
            "type": "number"
          },
          "costCurrency": {
            "type": "object",
            "properties": {
              "currencyCode": {
                "type": "string"
              },
              "defaultFractionDigits": {
                "type": "integer",
                "format": "int32"
              },
              "numericCode": {
                "type": "integer",
                "format": "int32"
              },
              "numericCodeAsString": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "IN_CIRCULATION",
              "IN_MAINTENANCE",
              "SOLD"
            ]
          },
          "dateStatusChange": {
            "type": "string",
            "format": "date-time"
          },
          "primaryFuelSource": {
            "$ref": "#/components/schemas/FuelSource"
          },
          "secondaryFuelSource": {
            "$ref": "#/components/schemas/FuelSource"
          },
          "peripherals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Peripheral"
            }
          },
          "enginePowerKW": {
            "type": "number",
            "format": "double"
          },
          "boxType": {
            "type": "string"
          },
          "secondaryFuelType": {
            "type": "string",
            "enum": [
              "PETROL",
              "DIESEL",
              "METHANE",
              "PROPANE",
              "HYDROGEN",
              "ELECTRIC"
            ]
          },
          "energy": {
            "type": "string",
            "enum": [
              "ICE",
              "EV",
              "HEV",
              "PHEV",
              "CNG",
              "LNG",
              "LPG",
              "FCEV",
              "BI_FUEL",
              "UNDEFINED"
            ]
          },
          "electricVehicleCompatibility": {
            "$ref": "#/components/schemas/ElectricVehicleCompatibility"
          },
          "assetTypeGroup": {
            "type": "string"
          },
          "lastManualEngineHoursUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "weightSettings": {
            "$ref": "#/components/schemas/AssetWeightSettings"
          },
          "dimensionSettings": {
            "$ref": "#/components/schemas/AssetDimensionSettings"
          },
          "usageSettings": {
            "$ref": "#/components/schemas/AssetUsageSettings"
          },
          "brakeSettings": {
            "$ref": "#/components/schemas/AssetBrakeSettings"
          },
          "estimateBatteryLevelPercent": {
            "type": "boolean"
          },
          "estimateRange": {
            "type": "boolean"
          },
          "estimateConsumption": {
            "type": "boolean"
          },
          "lastService": {
            "$ref": "#/components/schemas/ServiceHistory"
          },
          "manualService": {
            "type": "boolean"
          },
          "tempDriverIdRaw": {
            "type": "string"
          },
          "tempDriverExpiryRaw": {
            "type": "string",
            "format": "date-time"
          },
          "tempDriverNextJourneyOnlyRaw": {
            "type": "boolean"
          },
          "previousService": {
            "$ref": "#/components/schemas/ServiceHistory"
          }
        }
      },
      "AssetBrakeSettings": {
        "type": "object",
        "properties": {
          "absPer100Km": {
            "type": "number",
            "format": "double"
          },
          "brakingPer100Km": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "AssetDimensionSettings": {
        "type": "object",
        "properties": {
          "heightMeters": {
            "type": "number",
            "format": "double"
          },
          "lengthMeters": {
            "type": "number",
            "format": "double"
          },
          "widthMeters": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "AssetUsageSettings": {
        "type": "object",
        "properties": {
          "usageHoursPerDay": {
            "type": "number",
            "format": "double"
          },
          "usageDaysPerWeek": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "profitabilityDistanceKm": {
            "type": "number",
            "format": "double"
          },
          "stoppedThresholdHours": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "AssetWeightSettings": {
        "type": "object",
        "properties": {
          "unladenWeightKg": {
            "type": "number",
            "format": "double"
          },
          "maxGrossWeightKg": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Defect": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "eventDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EcoTaxVehicleParameters": {
        "type": "object",
        "properties": {
          "ecoTaxApplicable": {
            "type": "boolean"
          },
          "vehicleWeight": {
            "type": "number",
            "format": "double"
          },
          "euroEngine": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfAxles": {
            "type": "integer",
            "format": "int32"
          },
          "fuelType": {
            "type": "string"
          }
        }
      },
      "ElectricVehicleCompatibility": {
        "type": "object",
        "properties": {
          "estimateBatteryLevelPercent": {
            "type": "boolean"
          },
          "estimateRange": {
            "type": "boolean"
          },
          "estimateConsumption": {
            "type": "boolean"
          },
          "estimateSecondaryConsumption": {
            "type": "boolean"
          }
        }
      },
      "JourneyDetailDriverDto": {
        "type": "object",
        "properties": {
          "vehicleRegistration": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "totalTimeIdledSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeDrivenSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeDrivenWithPtoSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeDrivenWithoutPtoSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeIdledWithPtoSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeStoppedSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "startAddress": {
            "type": "string"
          },
          "endAddress": {
            "type": "string"
          },
          "distanceKm": {
            "type": "number",
            "format": "double"
          },
          "maximumSpeedKph": {
            "type": "number",
            "format": "double"
          },
          "averageSpeedKph": {
            "type": "number",
            "format": "double"
          },
          "startCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "startOdometer": {
            "type": "number",
            "format": "double"
          },
          "endOdometer": {
            "type": "number",
            "format": "double"
          },
          "startLocationName": {
            "type": "string"
          },
          "endLocationName": {
            "type": "string"
          },
          "startLocationId": {
            "type": "string"
          },
          "endLocationId": {
            "type": "string"
          },
          "idlingFidelity": {
            "type": "integer",
            "format": "int32"
          },
          "startElectricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "startElectricRangeKmEstimated": {
            "type": "boolean"
          },
          "endElectricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "endElectricRangeKmEstimated": {
            "type": "boolean"
          },
          "startElectricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "startElectricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "endElectricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "endElectricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "startFuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "endFuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "startFuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "endFuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "startEngineHours": {
            "type": "number",
            "format": "float"
          },
          "endEngineHours": {
            "type": "number",
            "format": "float"
          },
          "fuelUsedPetrolEquivalentLitres": {
            "type": "number",
            "format": "double"
          },
          "co2Kg": {
            "type": "number",
            "format": "double"
          },
          "fuelUsedLitres": {
            "type": "number",
            "format": "double"
          },
          "electricUsedkWh": {
            "type": "number",
            "format": "float"
          },
          "electricUsedkWhEstimated": {
            "type": "boolean"
          },
          "gasUsedKg": {
            "type": "number",
            "format": "float"
          },
          "driverId": {
            "type": "string"
          },
          "driverGroupName": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "commonAttributesFromJourneyTimeSheetDetail": {
            "$ref": "#/components/schemas/JourneyTimeSheetDetail"
          },
          "commonAttributesFromAsset": {
            "$ref": "#/components/schemas/Asset"
          }
        }
      },
      "JourneyTimeSheetDetail": {
        "type": "object",
        "properties": {
          "requestNodeName": {
            "type": "string"
          },
          "startElectricRangeKmEstimated": {
            "type": "boolean"
          },
          "endElectricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "endElectricRangeKmEstimated": {
            "type": "boolean"
          },
          "startElectricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "endElectricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "startLocationName": {
            "type": "string"
          },
          "endLocationName": {
            "type": "string"
          },
          "entityGroupName": {
            "type": "string"
          },
          "stoppedTimeSeconds": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true
          },
          "startElectricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "endElectricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "startFuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "endFuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "startEngineHours": {
            "type": "number",
            "format": "float"
          },
          "endEngineHours": {
            "type": "number",
            "format": "float"
          },
          "startElectricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "totalFuel": {
            "type": "number",
            "format": "double"
          },
          "distanceKm": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "assetId": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "personName": {
            "type": "string"
          },
          "assetRegistration": {
            "type": "string"
          },
          "private": {
            "type": "boolean"
          },
          "startOdometer": {
            "type": "number",
            "format": "double"
          },
          "endOdometer": {
            "type": "number",
            "format": "double"
          },
          "idlingFidelity": {
            "type": "integer",
            "format": "int32"
          },
          "evConsumptionKwh": {
            "type": "number",
            "format": "float"
          },
          "gasConsumptionKg": {
            "type": "number",
            "format": "float"
          },
          "totalTimeIdledSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeDrivenSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeDrivenWithPtoSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeIdledWithPtoSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "maximumSpeedKph": {
            "type": "number",
            "format": "double"
          },
          "averageSpeedKph": {
            "type": "number",
            "format": "double"
          },
          "ptoEnabled": {
            "type": "boolean"
          },
          "totalTimeDrivenWithoutPtoSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "classification": {
            "type": "string"
          },
          "startAddress": {
            "type": "string"
          },
          "endAddress": {
            "type": "string"
          },
          "startCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "startLocationId": {
            "type": "string"
          },
          "endLocationId": {
            "type": "string"
          },
          "speedSensitive": {
            "type": "boolean"
          },
          "journeyCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalTimeStoppedSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "startFuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "endFuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "evConsumptionKwhEstimated": {
            "type": "boolean"
          },
          "linkedAssetName": {
            "type": "string"
          },
          "assetHierarchyNodeId": {
            "type": "string"
          },
          "personHierarchyNodeId": {
            "type": "string"
          }
        }
      },
      "LitresPer100KmBenchmark": {
        "type": "object",
        "properties": {
          "kms": {
            "type": "number",
            "format": "double"
          },
          "litres": {
            "type": "number",
            "format": "double"
          },
          "litresPer100Km": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "NextService": {
        "type": "object",
        "properties": {
          "kmsToService": {
            "type": "number",
            "format": "float"
          },
          "daysToService": {
            "type": "number",
            "format": "float"
          },
          "estimatedKmsPerDay": {
            "type": "integer",
            "format": "int32"
          },
          "dueKms": {
            "type": "number",
            "format": "double"
          },
          "overdue": {
            "type": "boolean"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDateSource": {
            "type": "string",
            "enum": [
              "VEHICLE",
              "ESTIMATE"
            ]
          },
          "updatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "referenceDueDate": {
            "type": "string",
            "format": "date-time"
          },
          "firstJourneyDueKms": {
            "type": "integer",
            "format": "int32"
          },
          "firstJourneyDate": {
            "type": "string",
            "format": "date-time"
          },
          "manualEntry": {
            "type": "boolean"
          },
          "manualDueDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Peripheral": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ServiceHistory": {
        "type": "object",
        "properties": {
          "dueKms": {
            "type": "number",
            "format": "double"
          },
          "serviceDate": {
            "type": "string",
            "format": "date-time"
          },
          "updatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "serviceOdometer": {
            "type": "number",
            "format": "double"
          },
          "serviceDueDate": {
            "type": "string",
            "format": "date-time"
          },
          "overdue": {
            "type": "boolean"
          },
          "manualEntry": {
            "type": "boolean"
          }
        }
      },
      "TimestampedWithPaginationResultJourneyDetailDriverDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyDetailDriverDto"
            }
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "JourneyDetailDriverRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "driverId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "TimestampedWithPaginationResult": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "JourneyDetailVehicleDto": {
        "type": "object",
        "properties": {
          "vehicleRegistration": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "totalTimeIdledSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeDrivenSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeDrivenWithPtoSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeDrivenWithoutPtoSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeIdledWithPtoSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "totalTimeStoppedSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "startAddress": {
            "type": "string"
          },
          "endAddress": {
            "type": "string"
          },
          "distanceKm": {
            "type": "number",
            "format": "double"
          },
          "maximumSpeedKph": {
            "type": "number",
            "format": "double"
          },
          "averageSpeedKph": {
            "type": "number",
            "format": "double"
          },
          "startCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "startOdometer": {
            "type": "number",
            "format": "double"
          },
          "endOdometer": {
            "type": "number",
            "format": "double"
          },
          "startLocationName": {
            "type": "string"
          },
          "endLocationName": {
            "type": "string"
          },
          "startLocationId": {
            "type": "string"
          },
          "endLocationId": {
            "type": "string"
          },
          "idlingFidelity": {
            "type": "integer",
            "format": "int32"
          },
          "startElectricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "startElectricRangeKmEstimated": {
            "type": "boolean"
          },
          "endElectricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "endElectricRangeKmEstimated": {
            "type": "boolean"
          },
          "startElectricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "startElectricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "endElectricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "endElectricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "startFuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "endFuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "startFuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "endFuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "startEngineHours": {
            "type": "number",
            "format": "float"
          },
          "endEngineHours": {
            "type": "number",
            "format": "float"
          },
          "fuelUsedPetrolEquivalentLitres": {
            "type": "number",
            "format": "double"
          },
          "co2Kg": {
            "type": "number",
            "format": "double"
          },
          "fuelUsedLitres": {
            "type": "number",
            "format": "double"
          },
          "electricUsedkWh": {
            "type": "number",
            "format": "float"
          },
          "electricUsedkWhEstimated": {
            "type": "boolean"
          },
          "gasUsedKg": {
            "type": "number",
            "format": "float"
          },
          "vehicleId": {
            "type": "string"
          },
          "vehicleGroupName": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "commonAttributesFromJourneyTimeSheetDetail": {
            "$ref": "#/components/schemas/JourneyTimeSheetDetail"
          },
          "commonAttributesFromAsset": {
            "$ref": "#/components/schemas/Asset"
          }
        }
      },
      "TimestampedWithPaginationResultJourneyDetailVehicleDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyDetailVehicleDto"
            }
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "JourneyDetailVehicleRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "vehicleId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "LatestJourneyDetailsDriverDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyDetailDriverDto"
            }
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LatestJourneyDetailsDriverRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "driverId": {
            "type": "string"
          },
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "LatestJourneyDetailsVehicleDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyDetailVehicleDto"
            },
            "description": "Array of jo"
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the request was completed, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms."
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of journeys that matched the search parameters."
          }
        }
      },
      "LatestJourneyDetailsVehicleRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "vehicleId": {
            "type": "string"
          },
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "JourneyDriverReportTriggerRequest": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "JourneySummaryResponseDto": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          },
          "vehicleGroupId": {
            "type": "string"
          },
          "vehicleGroupName": {
            "type": "string"
          },
          "vehicleModel": {
            "type": "string"
          },
          "vehicleMake": {
            "type": "string"
          },
          "vehicleVersion": {
            "type": "string"
          },
          "vehicleGroupType": {
            "type": "string"
          },
          "vehicleType": {
            "type": "string"
          },
          "primaryFuelType": {
            "type": "string"
          },
          "secondaryFuelType": {
            "type": "string"
          },
          "energyType": {
            "type": "string"
          },
          "distanceKM": {
            "type": "number",
            "format": "double"
          },
          "fuelUsedLitres": {
            "type": "number",
            "format": "double"
          },
          "gasUsedKg": {
            "type": "number",
            "format": "double"
          },
          "electricUsedkWh": {
            "type": "number",
            "format": "double"
          },
          "electricUsedkWhEstimated": {
            "type": "boolean"
          },
          "fuelUsedPetrolEquivalentLitres": {
            "type": "number",
            "format": "double"
          },
          "co2Kg": {
            "type": "number",
            "format": "double"
          },
          "driveTimeSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "idleTimeSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "percentageFuel": {
            "type": "number",
            "format": "double"
          },
          "percentageGas": {
            "type": "number",
            "format": "double"
          },
          "percentageElectric": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "WithPaginationResultJourneySummaryResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneySummaryResponseDto"
            }
          }
        }
      },
      "JourneySummaryRequest": {
        "required": [
          "groupId"
        ],
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "groupId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "LocationCategoryDto": {
        "required": [
          "icon",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^[\\w]*$",
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the newly added location category. "
          },
          "name": {
            "type": "string",
            "description": "The name for the location category. "
          },
          "icon": {
            "type": "string",
            "description": "The icon for the location category - see the Point of Interest (POI) section. "
          }
        }
      },
      "LocationCategoryWithLocationsCountDto": {
        "required": [
          "icon",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^[\\w]*$",
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the newly added location category. "
          },
          "name": {
            "type": "string",
            "description": "The name of the location category."
          },
          "icon": {
            "type": "string",
            "description": "The icon assigned to the location category"
          },
          "locationsCount": {
            "type": "integer",
            "format": "int64",
            "description": "The number of locations with this location category."
          }
        }
      },
      "AddressDto": {
        "required": [
          "city",
          "country",
          "postCode"
        ],
        "type": "object",
        "properties": {
          "formattedAddress": {
            "type": "string"
          },
          "road": {
            "type": "string",
            "description": "Road name"
          },
          "roadNumber": {
            "type": "string",
            "description": "Road number"
          },
          "city": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
            ,
            "description": "City. Cannot be more than 50 characters."
          },
          "postCode": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Postcode. Cannot be more than 20 characters."
          },
          "country": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
            ,
            "description": "Country. Cannot be more than 50 characters."
          },
          "roadType": {
            "type": "string"
          }
        }
      },
      "AddressSearchDto": {
        "type": "object",
        "properties": {
          "formattedAddress": {
            "type": "string"
          },
          "road": {
            "type": "string"
          },
          "roadNumber": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateProvince": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "NearestLocationsSearchResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the location."
          },
          "name": {
            "type": "string",
            "description": "Location name."
          },
          "straightLineDistanceKilometers": {
            "type": "number",
            "format": "double",
            "description": "Distan"
          }
        }
      },
      "NearestLocationsSearchRequestDto": {
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "radius": {
            "type": "number",
            "format": "double"
          },
          "maximumResultsToReturn": {
            "type": "integer",
            "format": "int32"
          },
          "road": {
            "type": "string"
          },
          "roadNumber": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          }
        }
      },
      "BoundingBox": {
        "type": "object",
        "properties": {
          "topRight": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "bottomLeft": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CircularGeofence": {
        "type": "object",
        "properties": {
          "centre": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "radiusKm": {
            "type": "number",
            "format": "double"
          },
          "boundingBox": {
            "$ref": "#/components/schemas/BoundingBox"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "LocationSearchResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the location."
          },
          "name": {
            "type": "string",
            "description": "Name of the location."
          },
          "address": {
            "$ref": "#/components/schemas/MMAddressDto"
          },
          "coordinate": {
            "$ref": "#/components/schemas/MMCoordinateDto"
          },
          "customerId": {
            "type": "string",
            "description": "MCF customer identifier (alphanumeric)"
          },
          "customerReference": {
            "type": "string",
            "description": "MCF customer reference."
          },
          "categoryId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the location category."
          },
          "categoryName": {
            "type": "string",
            "description": "The name of the location category."
          },
          "radiusKm": {
            "type": "number",
            "format": "double"
          },
          "polygon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MMCoordinateDto"
            }
          },
          "type": {
            "type": "string",
            "description": "Specifies if the geo-fence boundary for this location has been defined as a circle or a polygon; can be POLYGON or CIRCULAR."
          },
          "reference": {
            "type": "string",
            "description": "A reference for this location. Included in the response if a reference has been specified for this location."
          },
          "phoneNumber": {
            "type": "string",
            "description": "A phone number for this location. Included in the response if a phone number has been specified for this location."
          },
          "contact": {
            "type": "string",
            "description": "A contact for this location. Included in the response if a contact has been specified for this location."
          },
          "email": {
            "type": "string",
            "description": "An email address for this location. Included in the response if an email address has been specified for this location."
          },
          "notes": {
            "type": "string",
            "description": "The notes for this location. Included in the response if notes have been specified for this location."
          },
          "polygonGeofence": {
            "$ref": "#/components/schemas/PolygonGeofence"
          },
          "circularGeofence": {
            "$ref": "#/components/schemas/CircularGeofence"
          }
        }
      },
      "MMAddressDto": {
        "type": "object",
        "properties": {
          "formattedAddress": {
            "type": "string",
            "description": "Formatted address for the location."
          },
          "road": {
            "type": "string",
            "description": "Road name."
          },
          "roadNumber": {
            "type": "string",
            "description": "Road number"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "postCode": {
            "type": "string",
            "description": "Postcode"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "roadType": {
            "type": "string"
          }
        }
      },
      "MMCoordinateDto": {
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "format": "double",
            "description": "Longitude value for the central point of the location."
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "Latitude value for the central point of the location."
          }
        }
      },
      "PolygonGeofence": {
        "type": "object",
        "properties": {
          "polygon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coordinate"
            }
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "centre": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "boundingBox": {
            "$ref": "#/components/schemas/BoundingBox"
          }
        }
      },
      "WithPaginationResultLocationSearchResultDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize. "
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of items that matched the search parameters "
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationSearchResultDto"
            },
            "description": "Array of locations. "
          }
        }
      },
      "LocationSearchRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "contact": {
            "type": "string"
          }
        }
      },
      "PersonSettingsResultDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabledFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unitSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "userSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "classifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupId": {
            "type": "string"
          },
          "ragThreshold": {
            "$ref": "#/components/schemas/RagThresholdDto"
          },
          "emailAddress": {
            "type": "string"
          },
          "approverEmailAddress": {
            "type": "string"
          },
          "emergencyPhoneNumber": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "canChangePassword": {
            "type": "boolean"
          },
          "accountRegion": {
            "type": "string"
          }
        }
      },
      "RagThresholdDto": {
        "type": "object",
        "properties": {
          "greenThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "amberThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "redThreshold": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PersonEmailUpdateRequestDto": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "approverEmailAddress": {
            "type": "string"
          }
        }
      },
      "DataCleanupSettingDto": {
        "type": "object",
        "properties": {
          "truncate": {
            "type": "boolean"
          },
          "daysRetention": {
            "type": "integer",
            "format": "int32"
          },
          "daysRetentionExtended": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PersonSettingsWithTaxAndExpenseResultDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabledFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unitSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "userSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "classifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupId": {
            "type": "string"
          },
          "ragThreshold": {
            "$ref": "#/components/schemas/RagThresholdDto"
          },
          "emailAddress": {
            "type": "string"
          },
          "approverEmailAddress": {
            "type": "string"
          },
          "emergencyPhoneNumber": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "canChangePassword": {
            "type": "boolean"
          },
          "accountRegion": {
            "type": "string"
          },
          "personalPurposes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "businessPurposes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mileageRate": {
            "type": "number"
          },
          "timezoneId": {
            "type": "string"
          },
          "timezoneCodes": {
            "$ref": "#/components/schemas/TimezoneCodesDto"
          },
          "currency": {
            "type": "string"
          },
          "managerId": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string"
          },
          "homeBaseId": {
            "type": "string"
          },
          "roleId": {
            "type": "string"
          },
          "skin": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "enabledCustomerFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dataCleanupSettings": {
            "$ref": "#/components/schemas/DataCleanupSettingDto"
          },
          "activeModules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleDto"
            }
          },
          "credentialsType": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "hierarchyNodePath": {
            "type": "string"
          },
          "branding": {
            "type": "string"
          },
          "moveElectricExpert": {
            "type": "boolean"
          }
        }
      },
      "TimezoneCodesDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "dojoTimezoneCode": {
            "type": "string"
          },
          "javaTimezoneId": {
            "type": "string"
          },
          "dotNetTimezoneId": {
            "type": "string"
          }
        }
      },
      "PersonSettingsPatchRequestDto": {
        "type": "object",
        "properties": {
          "unitSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "emailAddress": {
            "type": "string"
          },
          "approverEmailAddress": {
            "type": "string"
          },
          "personalPurposes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "businessPurposes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mileageRate": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string"
          },
          "timezoneId": {
            "type": "string"
          }
        }
      },
      "PersonSettingsUpdateRequestDto": {
        "type": "object",
        "properties": {
          "unitSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the role. "
          },
          "name": {
            "type": "string",
            "description": "Role name. "
          },
          "activeFeatureKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of active features. "
          }
        }
      },
      "SpeedingDetailDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "maxSpeedTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "assetId": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "assetRegistration": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "startAddress": {
            "type": "string"
          },
          "endAddress": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "distanceKms": {
            "type": "number",
            "format": "double"
          },
          "groupName": {
            "type": "string"
          },
          "averageSpeed": {
            "type": "number",
            "format": "float"
          },
          "maxSpeed": {
            "type": "number",
            "format": "float"
          },
          "maxPercentageOver": {
            "type": "number",
            "format": "float"
          },
          "maxSpeedAddress": {
            "type": "string"
          },
          "maxSpeedCoordinates": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "startCoordinates": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "endCoordinates": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "speedingPointCount": {
            "type": "integer",
            "format": "int32"
          },
          "assetSpeedLimitKph": {
            "type": "number",
            "format": "float"
          },
          "roadSpeedLimitKph": {
            "type": "number",
            "format": "float"
          },
          "maxSpeedDistanceKm": {
            "type": "number",
            "format": "double"
          },
          "startLocation": {
            "type": "string"
          },
          "endLocation": {
            "type": "string"
          },
          "maxSpeedLocation": {
            "type": "string"
          },
          "startLocationId": {
            "type": "string"
          },
          "endLocationId": {
            "type": "string"
          },
          "maxSpeedLocationId": {
            "type": "string"
          }
        }
      },
      "WithPaginationResultSpeedingDetailDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of input blocks that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeedingDetailDto"
            },
            "description": "Array"
          }
        }
      },
      "PersonSpeedingDetailRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "percentAboveLimit": {
            "type": "integer",
            "format": "int32"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "driverId": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "groupId": {
            "type": "string"
          }
        }
      },
      "WithPaginationResult": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "AssetSpeedingDetailRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "percentAboveLimit": {
            "type": "integer",
            "format": "int32"
          },
          "excludeChildGroups": {
            "type": "boolean"
          },
          "vehicleId": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "groupId": {
            "type": "string"
          }
        }
      },
      "TriggerSpeedingDetailRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GroupResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "TokenInformationResultDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "locale": {
            "type": "object",
            "properties": {
              "language": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "variant": {
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "unicodeLocaleAttributes": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "unicodeLocaleKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "displayLanguage": {
                "type": "string"
              },
              "displayScript": {
                "type": "string"
              },
              "displayCountry": {
                "type": "string"
              },
              "displayVariant": {
                "type": "string"
              },
              "extensionKeys": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "iso3Language": {
                "type": "string"
              },
              "iso3Country": {
                "type": "string"
              }
            }
          },
          "currency": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "groupPath": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupResultDto"
            }
          },
          "enabledFeatures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fullName": {
            "type": "string"
          },
          "customerIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tempAdminUser": {
            "type": "boolean"
          }
        }
      },
      "TrackingHistoryResultDto": {
        "type": "object",
        "properties": {
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleId": {
            "type": "string"
          },
          "vehicleRegistration": {
            "type": "string"
          },
          "vehicleName": {
            "type": "string"
          },
          "vehicleGroupName": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "driverGroupName": {
            "type": "string"
          },
          "eventStatus": {
            "type": "string"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "formattedAddress": {
            "type": "string"
          },
          "locationId": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          },
          "locationCategory": {
            "type": "string"
          },
          "speed": {
            "type": "number",
            "format": "double"
          },
          "heading": {
            "type": "number",
            "format": "double"
          },
          "inputId": {
            "type": "string"
          },
          "inputLabel": {
            "type": "string"
          },
          "inputState": {
            "type": "string"
          },
          "customInputLabel": {
            "type": "string"
          },
          "customInputState": {
            "type": "string"
          },
          "cumulativeRuntime": {
            "type": "integer",
            "format": "int64"
          },
          "cumulativeRuntimeType": {
            "type": "string",
            "enum": [
              "CAN",
              "ESTIMATED"
            ]
          },
          "cumulativeIdleTime": {
            "type": "integer",
            "format": "int64"
          },
          "cumulativePtoTime": {
            "type": "integer",
            "format": "int64"
          },
          "cumulativeDistance": {
            "type": "number",
            "format": "double"
          },
          "cumulativeFuelUsage": {
            "type": "number",
            "format": "double"
          },
          "fuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "fuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "electricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "electricRangeKmEstimated": {
            "type": "boolean"
          },
          "electricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "electricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "distanceKms": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "WithPaginationResultTrackingHistoryResultDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of journeys that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingHistoryResultDto"
            },
            "description": "Array of journey details"
          }
        }
      },
      "TrackingHistoryDriverRequestDto": {
        "required": [
          "driverId"
        ],
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "dateType": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "driverIdAsSet": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dateRange": {
            "$ref": "#/components/schemas/TrackingVehicleHistoryEventDateRange"
          }
        }
      },
      "TrackingVehicleHistoryEventDateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "dateType": {
            "type": "string",
            "enum": [
              "EVENT_START_DATE_TIME",
              "CREATED_TIME"
            ]
          },
          "supportedDateTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EVENT_START_DATE_TIME",
                "CREATED_TIME"
              ]
            }
          }
        }
      },
      "TrackingHistoryVehicleRequestDto": {
        "required": [
          "vehicleId"
        ],
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "dateType": {
            "type": "string"
          },
          "vehicleId": {
            "type": "string"
          },
          "vehicleIdAsSet": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dateRange": {
            "$ref": "#/components/schemas/TrackingVehicleHistoryEventDateRange"
          }
        }
      },
      "LatestTrackingHistoryResultsDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingHistoryResultDto"
            },
            "description": "Array of driver position details"
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Processed date and time of the last tracking event included in the response, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms."
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of tracking events that have been processed since the specified date/time."
          }
        }
      },
      "TrackingLatestHistoryDriverRequestDto": {
        "required": [
          "driverId"
        ],
        "type": "object",
        "properties": {
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "driverId": {
            "type": "string"
          }
        }
      },
      "TrackingLatestHistoryVehicleRequestDto": {
        "type": "object",
        "properties": {
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleId": {
            "type": "string"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TrackingJourneyDetailResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "assetRegistration": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "distanceKms": {
            "type": "number",
            "format": "double"
          },
          "amendedDistanceKms": {
            "type": "number",
            "format": "double"
          },
          "startOdometer": {
            "type": "number",
            "format": "double"
          },
          "endOdometer": {
            "type": "number",
            "format": "double"
          },
          "startAddress": {
            "type": "string"
          },
          "endAddress": {
            "type": "string"
          },
          "startCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "state": {
            "type": "string"
          },
          "classification": {
            "type": "string"
          },
          "lastModifiedTime": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "amendedReason": {
            "type": "string"
          },
          "purposeOfTrip": {
            "type": "string"
          },
          "amendedStartCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "amendedEndCoordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "amendedStartAddressText": {
            "type": "string"
          },
          "amendedEndAddressText": {
            "type": "string"
          },
          "amendedExpenseFlag": {
            "type": "boolean"
          },
          "submittedCurrencyCode": {
            "type": "string"
          },
          "submittedRate": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "WithPaginationResultTrackingJourneyDetailResultDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingJourneyDetailResultDto"
            }
          }
        }
      },
      "TrackingJourneyDetailRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "classifications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ifModifiedSince": {
            "type": "string",
            "format": "date-time"
          },
          "startDateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "TrackingJourneySummaryResultDto": {
        "type": "object",
        "properties": {
          "assetRegistration": {
            "type": "string",
            "description": "Asset registration."
          },
          "assetId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the asset."
          },
          "assetName": {
            "type": "string",
            "description": "Asset friendly name."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group the asset has been assigned to."
          },
          "distance": {
            "type": "number",
            "format": "double",
            "description": "Distance in km for all journeys."
          },
          "odometerType": {
            "type": "string",
            "description": "Either GPS or CAN."
          }
        }
      },
      "TrackingJourneySummaryRequestDto": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "JourneySubmitResponseDto": {
        "type": "object",
        "properties": {
          "unsubmittedManualJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsubmittedJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TrackingJourneySubmitDto": {
        "required": [
          "journeyIds",
          "manualJourneyIds",
          "rate"
        ],
        "type": "object",
        "properties": {
          "ccy": {
            "type": "string"
          },
          "rate": {
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "journeyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "manualJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "showPrivateReportSummary": {
            "type": "boolean"
          }
        }
      },
      "TrackingJourneyDetailUpdateRequestDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^[\\w]*$",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "classification": {
            "type": "string"
          },
          "notes": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "amendedDistanceKms": {
            "type": "number",
            "format": "double"
          },
          "updateAmendedDistanceKms": {
            "type": "boolean"
          },
          "updateAmendedExpense": {
            "type": "boolean"
          },
          "amendedReason": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "purposeOfTrip": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "amendedStartCoordinate": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "amendedEndCoordinate": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "amendedStartAddressText": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "amendedEndAddressText": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "LatestTrackingInputEventsResultsDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "assetRegistration": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "assetVin": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "eventKey": {
            "type": "string"
          },
          "inputEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingLiveInputEventOverviewDto"
            }
          },
          "activeFaultCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InputLive": {
        "type": "object",
        "properties": {
          "inputId": {
            "type": "string"
          },
          "inputLabel": {
            "type": "string"
          },
          "inputState": {
            "type": "string"
          },
          "customInputLabel": {
            "type": "string"
          },
          "customInputState": {
            "type": "string"
          }
        }
      },
      "LatestTrackingLiveResultsDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingLiveResultDto"
            }
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "description": "Total"
          }
        }
      },
      "TrackingLiveResultDto": {
        "type": "object",
        "properties": {
          "assetRegistration": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "assetVin": {
            "type": "string"
          },
          "assetId": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "driverGroupId": {
            "type": "string"
          },
          "driverGroupName": {
            "type": "string"
          },
          "assetGroupId": {
            "type": "string"
          },
          "assetGroupName": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "eventType": {
            "type": "string"
          },
          "speed": {
            "type": "number",
            "format": "double"
          },
          "odometer": {
            "type": "number",
            "format": "double"
          },
          "heading": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "road": {
            "type": "string"
          },
          "roadNumber": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "formattedAddress": {
            "type": "string"
          },
          "division": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          },
          "locationGroupName": {
            "type": "string"
          },
          "locationId": {
            "type": "string"
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputLive"
            }
          },
          "inputEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingLiveInputEventOverviewDto"
            }
          },
          "privacy": {
            "type": "boolean"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assetType": {
            "type": "string"
          },
          "energyType": {
            "type": "string"
          },
          "fuelType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "electricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "electricRangeKmEstimated": {
            "type": "boolean"
          },
          "electricBatteryLevelPercent": {
            "type": "number",
            "format": "float"
          },
          "electricBatteryLevelPercentEstimated": {
            "type": "boolean"
          },
          "electricCharging": {
            "type": "boolean"
          },
          "electricChargingTimeRemainingMins": {
            "type": "number",
            "format": "float"
          },
          "fuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "fuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "engineTotalHours": {
            "type": "number",
            "format": "float"
          },
          "engineRpm": {
            "type": "number",
            "format": "float"
          },
          "engineTotalHoursType": {
            "type": "string",
            "enum": [
              "CAN",
              "ESTIMATED"
            ]
          },
          "serialNumber": {
            "type": "integer",
            "format": "int64"
          },
          "ignitionStatus": {
            "type": "string",
            "enum": [
              "ON",
              "OFF"
            ]
          },
          "batteryVoltage": {
            "type": "number",
            "format": "float"
          },
          "externalPowerVoltage": {
            "type": "number",
            "format": "float"
          },
          "activeFaultCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TrackingLiveRequestDto": {
        "type": "object",
        "properties": {
          "vehicleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of vehicle identifiers (alphanumeric) ."
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of group identifiers (alphanumeric) ."
          },
          "driverIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of driver identifiers (alphanumeric) ."
          },
          "fromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": ""
          },
          "showAllVehicleStatus": {
            "type": "boolean",
            "description": ""
          },
          "locale": {
            "type": "string",
            "description": ""
          },
          "hideSpeedIfSpeedSensitive": {
            "type": "boolean",
            "description": ""
          }
        }
      },
      "Altitude": {
        "required": [
          "altitudeUnits"
        ],
        "type": "object",
        "properties": {
          "altitudeUnits": {
            "type": "string",
            "xml": {
              "name": "AltitudeUnits"
            },
            "enum": [
              "FEET_INCHES",
              "METERS"
            ]
          },
          "feet": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "Feet"
            }
          },
          "inches": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "Inches"
            }
          },
          "meters": {
            "type": "number",
            "xml": {
              "name": "Meters"
            }
          }
        }
      },
      "CumulativeOperatingHours": {
        "required": [
          "hour"
        ],
        "type": "object",
        "properties": {
          "hour": {
            "type": "object",
            "properties": {
              "sign": {
                "type": "integer",
                "format": "int32"
              },
              "months": {
                "type": "integer",
                "format": "int32"
              },
              "seconds": {
                "type": "integer",
                "format": "int32"
              },
              "days": {
                "type": "integer",
                "format": "int32"
              },
              "years": {
                "type": "integer",
                "format": "int32"
              },
              "hours": {
                "type": "integer",
                "format": "int32"
              },
              "minutes": {
                "type": "integer",
                "format": "int32"
              },
              "xmlschemaType": {
                "type": "object",
                "properties": {
                  "namespaceURI": {
                    "type": "string"
                  },
                  "localPart": {
                    "type": "string"
                  },
                  "prefix": {
                    "type": "string"
                  }
                }
              }
            },
            "xml": {
              "name": "Hour"
            }
          },
          "resetDateTime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "name": "ResetDateTime"
            }
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "Distance": {
        "required": [
          "odometerUnits"
        ],
        "type": "object",
        "properties": {
          "odometerUnits": {
            "type": "string",
            "xml": {
              "name": "OdometerUnits"
            },
            "enum": [
              "MILE",
              "KILOMETER"
            ]
          },
          "odometer": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "Odometer"
            }
          },
          "resetDateTime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "name": "ResetDateTime"
            }
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "Equipment": {
        "required": [
          "equipmentHeader"
        ],
        "type": "object",
        "properties": {
          "equipmentHeader": {
            "$ref": "#/components/schemas/EquipmentHeader"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "cumulativeOperatingHours": {
            "$ref": "#/components/schemas/CumulativeOperatingHours"
          },
          "fuelUsed": {
            "$ref": "#/components/schemas/FuelUsed"
          },
          "fuelUsedLast24": {
            "$ref": "#/components/schemas/FuelUsedLast24"
          },
          "distance": {
            "$ref": "#/components/schemas/Distance"
          }
        }
      },
      "EquipmentHeader": {
        "type": "object",
        "properties": {
          "unitInstallDateTime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "name": "UnitInstallDateTime"
            }
          },
          "make": {
            "type": "string",
            "xml": {
              "name": "Make"
            }
          },
          "model": {
            "type": "string",
            "xml": {
              "name": "Model"
            }
          },
          "equipmentID": {
            "type": "string",
            "xml": {
              "name": "EquipmentID"
            }
          },
          "serialNumber": {
            "type": "string",
            "xml": {
              "name": "SerialNumber"
            }
          }
        }
      },
      "Fleet": {
        "required": [
          "equipment"
        ],
        "type": "object",
        "properties": {
          "equipment": {
            "type": "array",
            "xml": {
              "name": "Equipment"
            },
            "items": {
              "$ref": "#/components/schemas/Equipment"
            }
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "attribute": true
            }
          },
          "snapshotTime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "attribute": true
            }
          }
        },
        "xml": {
          "name": "Fleet"
        }
      },
      "FuelUsed": {
        "required": [
          "fuelUnits"
        ],
        "type": "object",
        "properties": {
          "fuelUnits": {
            "type": "string",
            "xml": {
              "name": "FuelUnits"
            },
            "enum": [
              "GALLON",
              "LITER"
            ]
          },
          "fuelConsumed": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "FuelConsumed"
            }
          },
          "resetDateTime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "name": "ResetDateTime"
            }
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "FuelUsedLast24": {
        "required": [
          "fuelUnits"
        ],
        "type": "object",
        "properties": {
          "fuelUnits": {
            "type": "string",
            "xml": {
              "name": "FuelUnits"
            },
            "enum": [
              "GALLON",
              "LITER"
            ]
          },
          "fuelConsumed": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "FuelConsumed"
            }
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "Location": {
        "required": [
          "altitudeUnits",
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "xml": {
              "name": "Latitude"
            }
          },
          "longitude": {
            "type": "number",
            "xml": {
              "name": "Longitude"
            }
          },
          "altitude": {
            "$ref": "#/components/schemas/Altitude"
          },
          "altitudeUnits": {
            "type": "string",
            "xml": {
              "name": "AltitudeUnits"
            },
            "enum": [
              "FEET_INCHES",
              "METERS"
            ]
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "BaseTrackingLiveRequestDto": {
        "type": "object",
        "properties": {
          "vehicleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "driverIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fromDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "showAllVehicleStatus": {
            "type": "boolean"
          }
        }
      },
      "Feature": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "FeatureCollection": {
        "type": "object",
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          },
          "type": {
            "type": "string",
            "description": "FeatureCollection Fixed string de"
          }
        }
      },
      "Geometry": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "ManualJourneyDto": {
        "required": [
          "purposeOfTrip",
          "reasonForClaim",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startCoordinate": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "distanceClaimed": {
            "type": "number",
            "format": "double"
          },
          "purposeOfTrip": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "reasonForClaim": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "personId": {
            "pattern": "^[\\w]*$",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "classification": {
            "type": "string"
          },
          "startAddressText": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "endAddressText": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "notes": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "submittedCurrencyCode": {
            "type": "string"
          },
          "submittedRate": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "pattern": "^[\\w]*$",
            "type": "string"
          }
        }
      },
      "ManualJourneyBaseDto": {
        "required": [
          "purposeOfTrip",
          "reasonForClaim",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startCoordinate": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "distanceClaimed": {
            "type": "number",
            "format": "double"
          },
          "purposeOfTrip": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "reasonForClaim": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "personId": {
            "pattern": "^[\\w]*$",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "classification": {
            "type": "string"
          },
          "startAddressText": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "endAddressText": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "notes": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "submittedCurrencyCode": {
            "type": "string"
          },
          "submittedRate": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "MultipleManualJourneysResponseDto": {
        "type": "object",
        "properties": {
          "failedJourneys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WithErrorResultManualJourneyDto"
            }
          },
          "succesfulJourneys": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WithErrorResultManualJourneyDto": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/ManualJourneyDto"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "ManualJourneyRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserTokenDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdatePasswordResultDto": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the user. "
          },
          "personName": {
            "type": "string",
            "description": "Full name for the user. "
          }
        }
      },
      "UpdatePasswordRequestDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Unique system generated token. "
          },
          "newPassword": {
            "type": "string",
            "description": "New password for the user. Must be between 8 to 50 characters in length.  Must include at least one non- alphanumeric character, for example !. "
          },
          "reseller": {
            "type": "string",
            "description": "The reseller branding to use on the password set confirmation email. If not specified then the email will be MCF branded. "
          }
        }
      },
      "UtilisationDriverDto": {
        "type": "object",
        "properties": {
          "driverId": {
            "type": "string"
          },
          "driverName": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "utilisation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UtilisationDto"
            }
          }
        }
      },
      "UtilisationDriverResultDto": {
        "type": "object",
        "properties": {
          "utilisations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UtilisationDriverDto"
            }
          },
          "averageStartTime": {
            "type": "string"
          },
          "averageEndTime": {
            "type": "string"
          }
        }
      },
      "UtilisationDto": {
        "type": "object",
        "properties": {
          "firstStart": {
            "type": "string",
            "format": "date-time"
          },
          "lastStop": {
            "type": "string",
            "format": "date-time"
          },
          "totalTime": {
            "type": "integer",
            "format": "int64"
          },
          "driveTime": {
            "type": "integer",
            "format": "int64"
          },
          "driveTimeWithPto": {
            "type": "integer",
            "format": "int64"
          },
          "driveTimeWithoutPto": {
            "type": "integer",
            "format": "int64"
          },
          "idleTime": {
            "type": "integer",
            "format": "int64"
          },
          "idleTimeWithPto": {
            "type": "integer",
            "format": "int64"
          },
          "stopTime": {
            "type": "integer",
            "format": "int64"
          },
          "countOfStopTime": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UtilisationDriverRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "driverId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "startDateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "UtilisationVehicleDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "assetRegistration": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "utilisation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UtilisationDto"
            }
          },
          "averageStartTime": {
            "type": "string"
          },
          "averageEndTime": {
            "type": "string"
          }
        }
      },
      "UtilisationVehicleResultDto": {
        "type": "object",
        "properties": {
          "utilisations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UtilisationVehicleDto"
            }
          },
          "averageStartTime": {
            "type": "string"
          },
          "averageEndTime": {
            "type": "string"
          }
        }
      },
      "UtilisationVehicleRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "startDateRange": {
            "$ref": "#/components/schemas/DateRange"
          }
        }
      },
      "NearestVehiclesSearchResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the vehicle."
          },
          "name": {
            "type": "string",
            "description": "Vehicle name"
          },
          "registration": {
            "type": "string",
            "description": "Vehicle registration"
          },
          "straightLineDistanceKilometers": {
            "type": "number",
            "format": "double",
            "description": "Distance (as the crow flies) in km from the search point to the vehicle."
          }
        }
      },
      "NearestVehiclesSearchRequestDto": {
        "type": "object",
        "properties": {
          "lastMovedStartDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastMovedEndDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "radius": {
            "type": "number",
            "format": "double"
          },
          "maximumResultsToReturn": {
            "type": "integer",
            "format": "int32"
          },
          "road": {
            "type": "string"
          },
          "roadNumber": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          }
        }
      },
      "VehicleCostsDto": {
        "type": "object",
        "properties": {
          "yearOfManufacture": {
            "type": "integer",
            "format": "int32"
          },
          "ownershipStartDate": {
            "type": "string",
            "format": "date"
          },
          "ownershipEndDate": {
            "type": "string",
            "format": "date"
          },
          "purchaseCost": {
            "type": "number"
          },
          "monthlyLeaseCost": {
            "type": "number"
          },
          "monthlyInsuranceCost": {
            "type": "number"
          },
          "monthlyMaintenanceCost": {
            "type": "number"
          },
          "scheduledMaintenanceAmount": {
            "type": "number"
          },
          "unscheduledMaintenanceAmount": {
            "type": "number"
          },
          "monthlyFuelCost": {
            "type": "number"
          },
          "mileageAuthorised": {
            "type": "integer",
            "format": "int32"
          },
          "costPerMileOverLimit": {
            "type": "number"
          },
          "costOfDisposal": {
            "type": "number"
          },
          "buyoutAmount": {
            "type": "number"
          },
          "costCurrency": {
            "type": "string"
          }
        }
      },
      "VehicleSearchResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "odometerValue": {
            "type": "number",
            "format": "double"
          },
          "odometerType": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "featureTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultDriverId": {
            "type": "string"
          },
          "tempDriverId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "assetCosts": {
            "$ref": "#/components/schemas/VehicleCostsDto"
          },
          "idlingFidelity": {
            "type": "integer",
            "format": "int32"
          },
          "energyType": {
            "type": "string"
          },
          "fuelType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "engineTotalHours": {
            "type": "number",
            "format": "float"
          },
          "engineTotalHoursType": {
            "type": "string",
            "enum": [
              "CAN",
              "ESTIMATED"
            ]
          },
          "engineTotalHoursLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "odometerLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "assetTypeGroup": {
            "type": "string"
          },
          "serialNumber": {
            "type": "integer",
            "format": "int64"
          },
          "activeFaultCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secondaryGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameDto"
            }
          }
        }
      },
      "WithPaginationResultVehicleSearchResultDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleSearchResultDto"
            }
          }
        }
      },
      "VehicleSearchRequestDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "vehicleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "registration": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "VehicleSearchResultFaultDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "startOdometer": {
            "type": "number",
            "format": "double"
          },
          "endOdometer": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string"
          },
          "inProgress": {
            "type": "boolean"
          },
          "details": {
            "$ref": "#/components/schemas/FaultDetailsResultDto"
          }
        }
      },
      "VehicleSearchResultWithFaultsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "driverId": {
            "type": "string"
          },
          "faults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleSearchResultFaultDto"
            }
          },
          "name": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          }
        }
      },
      "WithPaginationResultVehicleSearchResultWithFaultsDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleSearchResultWithFaultsDto"
            }
          }
        }
      },
      "VehicleSearchRequestWithDateRangeDto": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "vehicleId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "dateRangeValid": {
            "type": "boolean"
          }
        }
      },
      "VehicleSearchResultWithServiceDateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "serviceDueDate": {
            "type": "string",
            "format": "date-time"
          },
          "driverId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "registration": {
            "type": "string"
          }
        }
      },
      "WithPaginationResultVehicleSearchResultWithServiceDateDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of vehicles that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleSearchResultWithServiceDateDto"
            },
            "description": "Array of vehicles."
          }
        }
      },
      "VehicleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "The friendly name for the vehicle. If a value is specified then â Cannot contain any one of these characters: <>?*\" "
          },
          "registration": {
            "type": "string"
          },
          "groupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of an existing group to be assigned to this vehicle. "
          },
          "groupName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "The vehicle type. Can be one of the following: â AMBULANCE â BICYCLE â BOAT â BUS â BUS _ DOUBLE _ DECK â CAR â CAR _ ESTATE â CAR _ SPORTS â CARAVAN â CARRIAGE â COACH â CONTAINER _ ASSET â DIGGER â DIGGER _ 2 â GRITTER â HGV â HORSEBOX â MAN â MINIBUS â MIXER â MOTORCYCLE â MOTORHOME â PDA111 â RIGID â SMARTPHONE _ PDA â SWEEPER _ LARGE â SWEEPER _ SMALL â TIPPER â TIPPER _ 2 â TRACTOR â TRACTOR _ TRAILER â TRAILER â TRAIN â VAN â VAN _ BOX â VAN _ SMALL â WASTE _ VEHICLE â CHERRY _ PICKER _ HGV â CHERRY _ PICKER _ LCV â VAN _ LCV â POOL _ CAR â HEAVY _ VAN _ HGV â TIPPER _ MEDIUM "
          },
          "make": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of tags. If spe "
          },
          "defaultDriverId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Status of the vehicle (optional). Will remain as its current value on the asset if not present in the update document.  Can be one of the following: â IN _ CIRCULATION â IN _ MAINTENANCE â SOLD "
          },
          "assetCosts": {
            "$ref": "#/components/schemas/VehicleCostsDto",
            "description": "Costs associated with the vehicle.  â If specified replaces all existing asset costs.  â An empty assetCosts document will remove all costs. "
          },
          "customerId": {
            "type": "string"
          },
          "secondaryGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameDto"
            }
          }
        }
      },
      "BasicPersonSettingsDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "timezoneId": {
            "type": "string"
          },
          "roleId": {
            "type": "string"
          },
          "canChangePassword": {
            "type": "boolean"
          },
          "accountRegion": {
            "type": "string"
          },
          "secondaryHierarchyIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}