{
  "openapi": "3.0.1",
  "info": {
    "title": "Connect Webservices",
    "description": "Rest API Documentation",
    "contact": {
      "email": "purple@masternaut.com"
    },
    "license": {
      "name": "© 2017 Masternaut Limited",
      "url": ""
    },
    "version": "113.0.2509051139"
  },
  "servers": [
    {
      "url": "https://api.masternautconnect.com/connect-webservices/services/public/v1",
      "description": "Product Server"
    },
    {
      "url": "https://int2-api.masternautconnect.com/connect-webservices/services",
      "description": "INT2 Server"
    }
  ],
  
  "tags": [
    {
      "name": "/tracking/live",
      "description": "Live tracking operations"
    },
    {
      "name": "/group",
      "description": "Group management operations"
    },
    {
      "name": "/location",
      "description": "Location management operations"
    },
    {
      "name": "/location/category",
      "description": "Location category management operations"
    },
    {
      "name": "/vehicle",
      "description": "Vehicle management operations"
    },
    {
      "name": "/driver",
      "description": "Driver management operations"
    },
    {
      "name": "/role",
      "description": "Role management operations"
    },
    {
      "name": "/user",
      "description": "User management operations"
    },
    {
      "name": "/utilisation",
      "description": "Utilisation and hours tracking operations"
    },
    {
      "name": "/tracking/journey",
      "description": "Journey tracking and management operations"
    },
    {
      "name": "/journey/detail",
      "description": "Journey detail operations with vehicle and driver perspectives"
    },
    {
      "name": "/tracking/history",
      "description": "Tracking history operations for vehicles and drivers"
    },
    {
      "name": "/input",
      "description": "Input usage operations for vehicles and drivers"
    },
    {
      "name": "/speeding",
      "description": "Speeding episode operations for vehicles and drivers"
    },
    {
      "name": "/idling",
      "description": "Idling activity block operations for vehicles and drivers"
    },
    {
      "name": "/driverbehaviourmetrics",
      "description": "Driver behaviour metrics and summary operations"
    },
    {
      "name": "/fuel",
      "description": "Vehicle and driver fuel consumption operations"
    },
    {
      "name": "/ecoscore",
      "description": "EcoScore vehicle and driver scoring and events operations"
    },
    {
      "name": "/fuelEvents",
      "description": "Fuel events and transactions operations"
    },
    {
      "name": "/businessTravel",
      "description": "Business travel journey tracking and expense reporting operations"
    },
    {
      "name": "/alert",
      "description": "Alert history and notification management operations"
    }
  ],
  "paths": {
    "/customer/{customerId}/tracking/live": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position",
        "description": "Returns the live position and status for a resource (driver or vehicle). The live position for a vehicle on a private journey is not returned. By default vehicles which have a status of SOLD are not included in the response. Request Limit: The request limit on this endpoint is one request every 15 seconds.",
        "operationId": "getLiveStatus",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "description": "Id of vehicle used for filtering.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Id of group used for filtering.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "description": "Id of driver used for filtering.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Start date used for filtering.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "description": "Show status of all vehicles, default = FALSE.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale used for language.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideSpeedIfSpeedSensitive",
            "in": "query",
            "description": "Boolean (true/false) to indicate if the vehicle speed should be excluded from the output if the driver;’s group (if there is a driver for the vehicle) or the vehicle’s group has been defined to be speed sensitive.  If not specified, defaults to FALSE, so the vehicle’s speed is included in the response. ",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Live position data successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingLiveResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in (vehicleIds and groupIds OR vehicleIds and driverIds OR driverIds and groupIds). When filtering field contains id of resource which is not visible to user. Message is: 'fieldName: Invalid value [value] => Resource not visible to User'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - request limit exceeded"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/live/geojson": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position GeoJSON",
        "description": "Gives detailed tracking inputs starting with the most recent entry based on filtering. Produces GeoJSON format response.",
        "operationId": "getLiveStatusAsGeoJson",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "description": "Id(s) of the vehicle used for filtering the vehicle live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Id(s) of the group used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "description": "Id(s) of the driver used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Start date used for filtering.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "description": "Show status of all vehicles, default = FALSE.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale used for language.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideSpeedIfSpeedSensitive",
            "in": "query",
            "description": "Hide speed from results if results are speed sensitive, default = FALSE.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tracking inputs in GeoJSON format",
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureCollection"
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in or resource not visible to user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/tracking/live/latest": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position Latest",
        "description": "Returns the live position and status for a resource (driver or vehicle). This endpoint can be used to return details for only those vehicles where tracking data has been processed since a specified processed date/time.",
        "operationId": "getLatestLiveStatus",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "description": "Id(s) of the vehicle used for filtering the vehicle live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Id(s) of the group used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "description": "Id(s) of the driver used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Start date used for filtering.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "description": "Show status of all vehicles, default = FALSE.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale used for language.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideSpeedIfSpeedSensitive",
            "in": "query",
            "description": "Hide speed from results if results are speed sensitive, default = FALSE.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest live position data successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTrackingLiveResultsDto"
                }
              }
            }
          },
          "400": {
            "description": "fromDateTime is more than one day in the past or is a future date, or multiple filter options provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/tracking/live/latest/geojson": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Latest Live Position GeoJSON",
        "description": "Fetches latest detailed tracking inputs with pagination and starting with the most recent entry based on filtering. Produces GeoJSON format response.",
        "operationId": "getLatestLiveStatusAsGeoJson",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "description": "Id(s) of the vehicle used for filtering the vehicle live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Id(s) of the group used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "description": "Id(s) of the driver used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Start date used for filtering. Date must be less than one day ago.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "description": "Show status of all vehicles, default = FALSE.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale used for language.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideSpeedIfSpeedSensitive",
            "in": "query",
            "description": "Hide speed from results if results are speed sensitive, default = FALSE.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest tracking inputs in GeoJSON format",
            "content": {
              "application/geo+json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureCollection"
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in or resource not visible to user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/tracking/live/aemp": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position AEMP",
        "description": "Returns the live position and status for all vehicles in AEMP XML format. Request Limit: The request limit on this endpoint is one request every 15 seconds.",
        "operationId": "getLiveStatusAemp",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "description": "Id(s) of the vehicle used for filtering the vehicle live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Id(s) of the group used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "description": "Id(s) of the driver used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Start date used for filtering.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "description": "Show status of all vehicles, default = FALSE.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale used for language.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Live position data successfully returned in AEMP XML format",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Fleet"
                }
              }
            }
          },
          "400": {
            "description": "When multiple filter option are filled in or resource not visible to user",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - request limit exceeded"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/live/latest/aemp": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Live Position Latest AEMP",
        "description": "Returns the latest live position and status for a vehicle in AEMP format. Request Limit: The request limit on this endpoint is one request every 15 seconds.",
        "operationId": "getLatestLiveStatusAemp",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "description": "Id(s) of the vehicle used for filtering the vehicle live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Id(s) of the group used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "driverIds",
            "in": "query",
            "description": "Id(s) of the driver used for filtering the live position response.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Start date used for filtering.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "showAllVehicleStatus",
            "in": "query",
            "description": "Show status of all vehicles, default = FALSE.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale used for language.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest live position data successfully returned in AEMP XML format",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Fleet"
                }
              }
            }
          },
          "400": {
            "description": "fromDateTime is more than one day in the past or is a future date, or multiple filter options provided",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - request limit exceeded"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/live/inputEvents": {
      "get": {
        "tags": [
          "/tracking/live"
        ],
        "summary": "Latest Input Events Live Status",
        "description": "Fetches latest detailed tracking inputs with pagination and starting with the most recent entry based on filtering.",
        "operationId": "getLatestInputEventsLiveStatus",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of most recent detailed tracking inputs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LatestTrackingInputEventsResultsDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/utilisation/vehicle": {
      "get": {
        "tags": [
          "/utilisation"
        ],
        "summary": "Vehicle Utilisation Hours",
        "description": "Returns summary utilisation information for a vehicle for all journeys where the journey started in the period. The end date of the journey does not have to be within the period. If the vehicle has been configured for a PTO, then driving and idling time with PTO active and with PTO inactive are included in the response. Details for private journeys that started in the period are included in the utilisation values. If vehicleId or groupId is not specified, then details for all vehicles are returned. If groupId is specified, then the utilisation for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified.",
        "operationId": "getVehicleUtilisation",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ssstartDate=2014-03-20T00:00:00",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss. The end date cannot be before the startDate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier of a vehicle (alphanumeric)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier of a group (alphanumeric)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle utilisation data successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UtilisationVehicleResultDto"
                }
              }
            }
          },
          "400": {
            "description": "When both vehicleId and groupId are specified, or when filtering field contains id of resource which is not visible to user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "No utilisation data found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/utilisation/driver": {
      "get": {
        "tags": [
          "/utilisation"
        ],
        "summary": "Driver Utilisation Hours",
        "description": "Returns summary utilisation information for a driver for all journeys where the journey started in the specified period. The end date of the journey does not have to be within the period. If the vehicle driven by the driver has been configured for a PTO, then driving and idling time with PTO active and with PTO inactive are included in the response. Details for private journeys that started in the period are included in the utilisation values. If driverId or groupId is not specified, then details for all drivers are returned. If groupId is specified, then the utilisation for all drivers in the specified group are included in the output. Either driverId or groupId can be specified as an input parameter, an error is returned if both are specified.",
        "operationId": "getDriverUtilisation",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss. The end date cannot be before the startDate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a driver. Must be specified if a value for groupId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Driver utilisation data successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UtilisationDriverResultDto"
                }
              }
            }
          },
          "400": {
            "description": "When both driverId and groupId are specified, or when filtering field contains id of resource which is not visible to user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "No utilisation data found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/group": {
      "get": {
        "tags": [
          "/group"
        ],
        "summary": "List Group",
        "description": "Returns the group hierarchy starting from the root node.",
        "operationId": "getAllGroups",
        "responses": {
          "200": {
            "description": "List of Groups visible to request context with counts of drivers and vehicles",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupSearchResultDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "/group"
        ],
        "summary": "Add Group",
        "description": "POST request to add a new group. The identifier for the newly added group is included in the JSON object returned as the response. The request will fail when the group name contains illegal characters. The details for the location category in a JSON object included in the HTTP body. Ensure you set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "createGroup",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/GroupQueryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created group",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "400": {
            "description": "When name is blank or size name does not fit. When size parentId does not fit or it does not match pattern or it isn't visible for user.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "/group"
        ],
        "summary": "Update Group",
        "description": "PUT request to update the group that matches the {id} in the JSON object included in the HTTP body. This is a partial update and only those details specified in the JSON body will be updated. The request will fail when the updated group name contains illegal characters. The details for the group to update are in a JSON object included in the HTTP body. Ensure you set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "updateGroup",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/GroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated group.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. When id is incorrect and group is not visible to user or is blank or doesn't fit for selected size. When name doesn't fit for selected size. When parentId is not visible to user. When personIds or vehicleIds are not visible to user",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict message, when group name is already taken by another group or when parentId is ID of group which is currently one of group descendants.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/group/{nodeId}": {
      "delete": {
        "tags": [
          "/group"
        ],
        "summary": "Delete Group",
        "description": "DELETE request to delete the group that matches the {groupId}.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "description": "ID of group to be deleted",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - group has been deleted"
          },
          "400": {
            "description": "When group to be deleted is not visible to user. When group is customer (root) node or it is not allowed to be deleted.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "When group contains any person or vehicle or it has children nodes.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/location/current": {
      "get": {
        "tags": [
          "/location"
        ],
        "summary": "List Location",
        "description": "Returns the location (points of interest) matching the specified parameters. If no parameters are specified, then all locations are returned. If there are more than 50 locations, then by default only the first 50 locations are returned. To view details of the other locations you will need to specify values for pageSize and pageIndex.",
        "operationId": "getCurrentPlaces",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Location name search string. This is a case insensitive partial match. A location will match if the specified name is found anywhere in the location name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Location address search string. This is a case insensitive partial match. A location will match if the specified address is found anywhere in formatedAddress.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "A location category name. This is a case sensitive exact match search.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "Location reference search string. This is a case insensitive partial match. A location will match if the specified reference is found anywhere in reference.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "Location phone number search string. This is a partial match. A location will match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationSearchResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/location": {
      "post": {
        "tags": [
          "/location"
        ],
        "summary": "Add Location",
        "description": "POST request to add a new location with a geo-fence boundary that can be either CIRCULAR or POLYGON. There cannot be an existing location with the same name as the location being created. The maximum number of POI that can be created in your account is limited based on the number of vehicles in your fleet. ● If your fleet size is less than 1,000 then you can create up to 250,000 locations. ● If your fleet size is more than 1,000, then the maximum is reduced on a sliding scale depending on the number of vehicles in your fleet. The address for the location can be specified as either: ● longitude and latitude coordinates An address lookup is done to determine values for roadNumber, road, city, postcode and country. The formattedAddress is constructed as a comma separated set of values from roadNumber, road, city, postcode and country. ● roadNumber, road, city, postcode, country Values for city, postcode and country are mandatory and must be included in the input JSON object. The formattedAddress is constructed as a comma separated set of values from roadNumber, road, city, postcode and country. A lookup is done to determine the longitude and latitude coordinates. If both an address and longitude/latitude values are specified, then no check is performed to validate that the address matches the longitude/latitude values. The geofence for the location can be specified as either: ● radius A geofence for the location is a circle. The radius for the circle must be between 0.001 and 1. ● polygon The geofence for the location is a polygon which is specified as an array of longitude and latitude pairs. There must be at least three longitude and latitude pairs specified. The geofence boundary is closed by automatically linking the first longitude and latitude pair to the last longitude and latitude pair specified. The geofence for a location can overlap the geofence for another location. The geofence for this location can overlap up to 5 locations. The details for the new location are sent as a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "createLocation",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "/location"
        ],
        "summary": "Update Location",
        "description": "PUT request to update location details. The identifier for the location to be updated is included in the JSON body. This is a partial update and only those details specified in the JSON body will be updated. The updated address for the location can be specified as just the longitude and latitude coordinates or an address (roadNumber, road, city, postcode, country). The type of a location can be updated from a circle to a polygon or from a polygon to a circle, by specifying the the geofence for the location as either: ● radius A geofence for the location is a circle. The radius for the circle must be between 0.001 and 1. ● polygon The geofence for the location is a polygon which is specified as an array of longitude and latitude pairs. There must be at least three longitude and latitude pairs specified. The geofence boundary is closed by automatically linking the first longitude and latitude pair to the last longitude and latitude pair specified. The geofence for a location can overlap the geofence for another location. The geofence for this location can overlap up to 5 locations. The location details are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\". JSON object structure for the address specified as longitude and latitude:",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/location/{placeId}": {
      "delete": {
        "tags": [
          "/location"
        ],
        "summary": "Delete Location",
        "description": "DELETE request to delete a location that matches the {locationId}.",
        "operationId": "deletePlace",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/customer/{customerId}/location/category": {
      "get": {
        "tags": [
          "/location/category"
        ],
        "summary": "List Location Category",
        "description": "Returns details for all location categories. If a location category identifier is specified, then only details of the specified location category are returned.",
        "operationId": "getAllCategories",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationCategoryWithLocationsCountDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "/location/category"
        ],
        "summary": "Add or update Location Category",
        "description": "PUT request to add a new location category. The identifier for the newly added location category is included in the JSON object returned as the response or update the location category that matches the {id} in the JSON object included in the HTTP body. The details for the location category in a JSON object included in the HTTP body. Ensure you set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "createOrUpdateCategory",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCategoryDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCategoryDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/location/category/{categoryId}": {
      "get": {
        "tags": [
          "/location/category"
        ],
        "summary": "Get Location Category",
        "description": "Returns details for a specific location category.",
        "operationId": "getOneCategory",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCategoryDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "/location/category"
        ],
        "summary": "Delete Location Category",
        "description": "DELETE request to delete the location category that matches the {categoryId}.",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/customer/{customerId}/vehicle": {
      "get": {
        "tags": [
          "/vehicle"
        ],
        "summary": "List Vehicle",
        "description": "Returns the registration, group and current odometer reading for a vehicle. The odometer reading is in kilometres. If no parameters are specified, then details for all vehicles are returned. Input parameters that can be specified are: ● groupIds - all vehicles in the specified groups are included in the output. ● vehicleIds - only the specified vehicles are included in the output. ● name - only the vehicle with the specified name is included in the output. Connect API Reference / Version 1.39 / 51 / CLASSIFICATION : MCF-Internal Only one of vehicleIds, groupIds or name can be specified as an input parameter, an error is returned if more than one parameter is specified.",
        "operationId": "searchVehicles",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "description": "Comma separated list of vehicle identifiers (alphanumeric).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Comma separated list of group identifiers (alphanumeric).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Friendly name of a vehicle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicles were successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleSearchResultWithPaginationDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing validation on parameters."
          }
        }
      }
    },
    "/customer/{customerId}/vehicle/{vehicleId}": {
      "put": {
        "tags": [
          "/vehicle"
        ],
        "summary": "Update Vehicle",
        "description": "PUT request to update the details for an existing vehicle. This is a partial update and only those values specified will be updated. The update details for the vehicle are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "updateVehicle",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "updated asset with correct values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleDto"
                }
              }
            }
          },
          "400": {
            "description": "Message related to validation"
          }
        }
      }
    },
    "/customer/{customerId}/vehicle/nearest": {
      "get": {
        "tags": [
          "/vehicle"
        ],
        "summary": "Find Nearest Vehicles",
        "description": "Find vehicles nearest to a specified location or coordinate within a given radius.",
        "operationId": "findNearestVehicles",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Nearest vehicles found successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NearestVehiclesSearchResultDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/vehicle/serviceDate": {
      "get": {
        "tags": [
          "/vehicle"
        ],
        "summary": "Service Due Date",
        "description": "Returns the service due date for a vehicle. If no parameters are specified, then details for all vehicles with a service due date are returned. If groupId is specified, then all vehicles in the specified group are included in the output. If vehicleId is specified, then only the specified vehicle is included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If startDate is specified, then only those vehicles where the service due date is on or after the specified date are returned. If endDate is specified, then only those vehicles where the service due date is on or before the specified end date are returned. If both startDate and endDate are specified, then endDate cannot be before startDate. If there are more than 20 vehicles to return, then by default only the first 20 vehicles are returned. To view details of the other vehicles you will need to specify values for pageSize and pageIndex.",
        "operationId": "searchVehiclesWithServiceDate",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Identifier (alphanumeric) of a vehicle."
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Identifier (alphanumeric) of a group."
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Earliest service due date, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Latest service due date, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Current page index (zero-based)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleSearchResultWithServiceDateWithPaginationDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/vehicle/faults": {
      "get": {
        "tags": [
          "/vehicle"
        ],
        "summary": "Vehicle Faults",
        "description": "Returns the faults on a vehicle. If no parameters are specified, then only vehicles with an active fault are returned. An active fault has no endDate. If groupId is specified, then all vehicles in the specified group are included in the output. If vehicleId is specified, then only the specified vehicle is included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If startDate is specified, then only those vehicles where the fault was detected on or after the specified date are returned. If endDate is not specified, then the startDate cannot be more than 90 days before today's date. If endDate is specified then startDate must also be specified. endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 90 days. If there are more than 20 vehicles to return, then by default only the first 20 vehicles are returned. To view details of the other vehicles you will need to specify values for pageSize and pageIndex.",
        "operationId": "searchVehiclesWithFaults",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Identifier (alphanumeric) of a vehicle."
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Identifier (alphanumeric) of a group."
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Earliest service due date, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Latest service due date, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page"
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Current page index (zero-based)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleSearchResultWithFaultsWithPaginationDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/fuelEvents/fuelTransactions": {
      "get": {
        "tags": [
          "/fuelEvents"
        ],
        "summary": "Fuel Card Transactions",
        "description": "Returns details of the fuel card transaction where the transaction occurred within the specified period. The value specified for the endDate cannot be before startDate. Either vehicleId or groupId must be specified. If vehicleId is specified, then transactions for the specified vehicle are included in the output. If groupId is specified, then the details for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If IncludeUnmatchedVehicles is set to true, then transactions not matched to a vehicle registered in Connect will be included in the output response. If a value is not specified for both IncludeMatchedVehicles and for IncludeUnmatchedVehicles, then only matched transactions will be included in the response. If there are more than 20 transaction events to return, then by default only the first 20 transaction events are returned. To view details of the other transaction events you will need to specify values for pageSize and pageIndex.",
        "operationId": "findFuelTransactionsForVehicles",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Identifier (alphanumeric) of a vehicle."
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Identifier (alphanumeric) of a group."
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss"
          },
          {
            "name": "includeUnmatchedVehicles",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Set to true to return fuel transactions that were not matched to a vehicle. If not specified, defaults to false, so unmatched fuel transactions are not included in the response."
          },
          {
            "name": "includeMatchedVehicles",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Set to true to include fuel transactions that were matched to a vehicle. If not specified, defaults to true, so matched fuel transactions are included in the response."
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 20."
          },
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FuelTransactionWithPaginationDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/businessTravel/getVehicleDetails": {
      "get": {
        "tags": [
          "/businessTravel"
        ],
        "summary": "Business Travel Vehicle Journey Details",
        "description": "Returns detailed business travel journey information for specified vehicles within a date range. Provides comprehensive journey data including vehicle and driver information, journey classification, location data, and tracking metrics. Journeys must be submitted for business purposes and can be classified as business, private, or journey between sites. Maximum date range is 31 days and up to 50 asset-days can be processed at once.",
        "operationId": "getVehicleDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxAndExpenseJourneyDetailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation - detailed business travel journey information returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxAndExpenseJourneyDetailResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input parameters or date range constraints violated"
          },
          "404": {
            "description": "Resource not found - specified vehicles or customer not found"
          }
        }
      }
    },
    "/customer/{customerId}/businessTravel/getTaxAndExpenseJourneySummaryVehicle": {
      "get": {
        "tags": [
          "/businessTravel"
        ],
        "summary": "Business Travel Vehicle Journey Summary",
        "description": "Returns business travel journey summary information for vehicles within a specified date range. Provides aggregated journey data including total distances by journey classification (Business, Private, Journey Between Sites). Supports pagination and filtering by vehicle groups. Used for tax reporting and expense management with journey classification totals.",
        "operationId": "getTaxAndExpenseJourneySummaryVehicle",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxAndExpenseJourneySummaryVehicleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation - vehicle journey summary returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxAndExpenseManagerSummaryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid date range or pagination parameters"
          },
          "404": {
            "description": "Resource not found - specified customer or vehicle groups not found"
          }
        }
      }
    },
    "/customer/{customerId}/businessTravel/getTaxAndExpenseJourneySummaryDriver": {
      "get": {
        "tags": [
          "/businessTravel"
        ],
        "summary": "Business Travel Driver Journey Summary",
        "description": "Returns business travel journey summary information for drivers within a specified date range. Provides aggregated journey data including total distances by journey classification from a driver perspective. Supports pagination and filtering by driver groups. Essential for driver-based expense reporting and tax documentation.",
        "operationId": "getTaxAndExpenseJourneySummaryDriver",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxAndExpenseJourneySummaryDriverRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation - driver journey summary returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxAndExpenseManagerSummaryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid date range or pagination parameters"
          },
          "404": {
            "description": "Resource not found - specified customer or driver groups not found"
          }
        }
      }
    },
    "/customer/{customerId}/businessTravel/detail/vehicle": {
      "get": {
        "tags": [
          "/businessTravel"
        ],
        "summary": "Vehicle Detailed Business Travel",
        "description": "Returns detailed business travel information for a vehicle for a journey that has been submitted and where the journey started in the period. The end date of the journey does not have to be within the period. No details are returned for journeys that have not been classified and submitted by the driver. Either vehicleIds or groupId must be specified as an input parameter. If groupId is specified, then the business travel for all vehicles in the specified group are included in the output. Asset Day Limit: The asset day limit on this endpoint is 50 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction.",
        "operationId": "getVehicleDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxAndExpenseJourneyDetailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/businessTravel/detail/driver": {
      "get": {
        "tags": [
          "/businessTravel"
        ],
        "summary": "Driver Detailed Business Travel",
        "description": "Returns detailed business travel information for a driver for a journey that has been classified where the journey started in the period. The end date of the journey does not have to be within the period. No details are returned for journeys that have not been classified and submitted by the driver. Either driverIds or groupId must be specified as an input parameter. If groupId is specified, then the business travel for all drivers in the specified group are included in the output. Asset Day Limit: The asset day limit on this endpoint is 50 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction.",
        "operationId": "getDriverDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxAndExpenseJourneyDetailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/businessTravel/summary/vehicle": {
      "get": {
        "tags": [
          "/businessTravel"
        ],
        "summary": "Vehicle Business Travel",
        "description": "Returns summarised business travel information for a vehicle for all journeys where the journey started in the period. The end date of the journey does not have to be within the period. If vehicleIds or groupId is not specified, that details for all vehicles are returned. If groupId is specified, then the business travel for all vehicles in the specified group are included in the output. Either vehicleIds or groupId can be specified as an input parameter, an error is returned if both are specified.",
        "operationId": "getTaxAndExpenseJourneySummaryVehicle",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxAndExpenseJourneySummaryVehicleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxAndExpenseManagerSummaryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/businessTravel/summary/driver": {
      "get": {
        "tags": [
          "/businessTravel"
        ],
        "summary": "Driver Business Travel",
        "description": "Returns summarised business travel information for a driver for all journeys where the journey started in the period. The end date of the journey does not have to be within the period. If driverIds or groupId is not specified, then details for all drivers are returned. If groupId is specified, then the business travel for all drivers in the specified group are included in the output. Either driverIds or groupId can be specified as an input parameter, an error is returned if both are specified.",
        "operationId": "getTaxAndExpenseJourneySummaryDriver",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxAndExpenseJourneySummaryDriverRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxAndExpenseManagerSummaryResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/alert/history/vehicle": {
      "get": {
        "tags": [
          "/alert"
        ],
        "summary": "Vehicle Alert History",
        "description": "Returns details of alerts that were triggered for a vehicle in the specified period. The value specified for the endDate cannot be before startDate and the period cannot be more than 7 days. Either vehicleId or groupId must be specified. If vehicleId is specified, then only alerts for the specified vehicle are included in the output. If groupId is specified, then alerts that were triggered for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are more than 100 triggered alerts that match the search criteria, then by default only the first 100 triggered alerts are returned. To view details of the other alerts you will need to specify values for pageSize and pageIndex.",
        "operationId": "getVehicleAlertHistory",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertAssetSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/alert/history/driver": {
      "get": {
        "tags": [
          "/alert"
        ],
        "summary": "Driver Alert History",
        "description": "Returns details of alerts that were triggered for a driver in the specified period. The value specified for the endDate cannot be before startDate and the period cannot be more than 7 days. Either driverId or groupId must be specified. If driverId is specified, then only alerts for the specified driver are included in the output. If groupId is specified, then alerts that were triggered for all drivers in the specified group are included in the output. Either driverId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are more than 100 triggered alerts that match the search criteria, then by default only the first 100 triggered alerts are returned. To view details of the other alerts you will need to specify values for pageSize and pageIndex.",
        "operationId": "getPersonAlertHistory",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertPersonSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/driver": {
      "get": {
        "tags": [
          "/driver"
        ],
        "summary": "List Driver",
        "description": "Returns details for all drivers and the group they have been assigned to.",
        "operationId": "findDrivers",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Drivers were successfully returned or empty if none of drivers fulfill criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverSearchResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        }
      },
      "post": {
        "tags": [
          "/driver"
        ],
        "summary": "Add Driver",
        "description": "POST request to add a new driver. When adding a new driver, the identifier for the newly added driver is included in the JSON object returned as the response. The details for the driver are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "createDriver",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriverDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Driver was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        }
      }
    },
    "/customer/{customerId}/driver/{driverId}": {
      "get": {
        "tags": [
          "/driver"
        ],
        "summary": "List Driver Details",
        "description": "Returns details for a driver including their default vehicle.",
        "operationId": "getDriver",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Driver details were successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing validation on parameters."
          },
          "404": {
            "description": "Driver not found."
          }
        }
      },
      "put": {
        "tags": [
          "/driver"
        ],
        "summary": "Update Driver",
        "description": "PUT request to update the details for an existing driver. This is a partial update and only those values specified will be updated. The update details for the driver are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "updateDriver",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriverDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Driver was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing validation such as groupIds."
          },
          "404": {
            "description": "Driver not found."
          }
        }
      },
      "delete": {
        "tags": [
          "/driver"
        ],
        "summary": "Delete Driver",
        "description": "DELETE request to delete a driver that matches the {driverId}.",
        "operationId": "deleteDriver",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Driver successfully deleted"
          },
          "404": {
            "description": "Driver not found"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/customer/{customerId}/driver/{driverId}/vehicle/{vehicleId}": {
      "post": {
        "tags": [
          "/driver"
        ],
        "summary": "Set Driver Default Vehicle",
        "description": "POST request to set the default vehicle for a driver to the specified {vehicleId}. An error is returned in the following cases: ● If there is already a default vehicle assigned to the driver; ● If the vehicle is already assigned to be the default vehicle for another driver;",
        "operationId": "linkVehicle",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Driver with vehicle link successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDto"
                }
              }
            }
          },
          "404": {
            "description": "Driver or vehicle not found"
          },
          "400": {
            "description": "Bad request or validation error"
          }
        }
      }
    },
    "/customer/{customerId}/driver/{driverId}/vehicle": {
      "delete": {
        "tags": [
          "/driver"
        ],
        "summary": "Delete Driver Default Vehicle",
        "description": "DELETE request to delete the default vehicle for a driver. An error is returned in the following cases: ● There is no default vehicle assigned to the driver. ● The {vehicleId} does not match the existing default vehicle for the driver.",
        "operationId": "unlinkDefaultVehicle",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Driver with default vehicle successfully unlinked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriverDto"
                }
              }
            }
          },
          "404": {
            "description": "Driver not found"
          },
          "400": {
            "description": "Bad request or validation error"
          }
        }
      }
    },
    "/customer/{customerId}/driver/{driverId}/enableAsUser": {
      "post": {
        "tags": [
          "/driver"
        ],
        "summary": "Enable Driver as a User",
        "description": "POST request to enable a driver as a Connect Web User. You cannot include the password for the new user in the same request as enabling the driver as a user, instead you must use the Set User Password endpoint and include the token from the output response of this endpoint. The generated token will expire if it is not used within 30 days or if a password reset token is requested. If a value for externalIdentifier is specified, then the user will be enabled for SSO and a Connect password cannot be set. The details for the web user are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "enableAsUser",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Driver successfully enabled as a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreateResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Driver not found"
          },
          "400": {
            "description": "Bad request or validation error"
          }
        }
      }
    },
    "/customer/{customerId}/role": {
      "get": {
        "tags": [
          "/role"
        ],
        "summary": "List Role",
        "description": "Returns all roles and the active features for each role.",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/customer/{customerId}/role/{roleId}": {
      "get": {
        "tags": [
          "/role"
        ],
        "summary": "List Role Details",
        "description": "Returns details for a single role.",
        "operationId": "getOne",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role details successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Role not found"
          }
        }
      }
    },
    "/customer/{customerId}/user": {
      "get": {
        "tags": ["/user"],
        "summary": "List User",
        "description": "Returns details for all active users. No details are returned for inactive users. If there are more than 50 users, then by default only details for the first 50 users are returned. To view details for the other users you will need to specify values for pageSize and pageIndex.",
        "operationId": "listAllUsers",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users were successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        }
      },
      "post": {
        "tags": ["/user"],
        "summary": "Add User",
        "description": "POST request to add a web user. You cannot include the password for the new user in the same request as adding a user, instead you must use the Set User Password endpoint and include the token from the output response of this endpoint. The generated token will expire if it is not used within 30 days or if a password reset token is requested. If a value for externalIdentifier is specified, then the user will be enabled for SSO and a Connect password cannot be set. If the user being created will be using the SmarterDriver Mobile application and login using SSO, then the same values must be specified for both username and emailAddress. The details for the user are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing validation such as groupIds."
          }
        }
      }
    },
    "/customer/{customerId}/user/{userId}": {
      "get": {
        "tags": ["/user"],
        "summary": "List User Details",
        "description": "Returns details for a single user.",
        "operationId": "getOne",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing validation."
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["/user"],
        "summary": "Update User",
        "description": "PUT request to update an existing user. This is a partial update and only those values specified will be updated. You cannot use this endpoint to update the username or the password for an existing user. To update the password you must first get a token from the Password Reset Token endpoint and then use that token with the Set User Password endpoint. If a value for externalIdentifier is specified, then ● the user will be enabled for SSO ● the existing password for the user will be removed ● if the user had been enabled for \"Connect using Google\" this feature will be removed. If the value specified for externalIdentifier is an empty string, then SSO functionality is removed from the user, allowing for a Connect password to be set. The details for the user are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Missing validation such as groupIds."
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["/user"],
        "summary": "Delete User",
        "description": "DELETE request to delete a user that matches the {userId}.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted"
          },
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/customer/{customerId}/user/{userId}/passwordResetToken": {
      "get": {
        "tags": ["/user"],
        "summary": "Password Reset Token",
        "description": "GET request to generate a password reset token. The token is used to update the password for an existing user. The generated token will expire if it is not used within 24 hours or if another password reset token is requested. A password reset token cannot be requested for a user enabled for SSO, i.e. where a value for externalIdentifier has been set for the user.",
        "operationId": "getPasswordResetToken",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset token successfully generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTokenDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Cannot reset password of SSO user"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/customer/{customerId}/user/password": {
      "post": {
        "tags": ["/user"],
        "summary": "Set User Password",
        "description": "POST request to set the password for a user. You must include the token generated when a new user was added or when a password reset token was requested. A password cannot be set for a user enabled for SSO, i.e. a value for externalIdentifier has been set. The details for the password are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password successfully set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePasswordResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Token was either not found or expired"
          },
          "401": {
            "description": "Cannot set password for SSO user"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/journey/detail": {
      "get": {
        "tags": [
          "/tracking/journey"
        ],
        "summary": "Vehicle Journeys",
        "description": "Returns summary journey details for a vehicle for each journey that started in the specified period. For a private journey only limited details are returned. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate. Either vehicleId or groupId must be specified. If vehicleId is specified, then only journeys for the specified vehicle are included in the output. If groupId is specified, then the details for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are more than 50 journeys that match the search criteria, then by default only the first 50 journeys are returned. To view details of the other journeys you will need to specify values for pageSize and pageIndex. Asset Day Limit The asset day limit on this endpoint is 1000 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date and time of the journey, in UTC, in format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date and time of the journey, in UTC, in format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier of a vehicle. Must be specified if a value for groupId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier of a group. Must be specified if a value for vehicleId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "description": "Specifies if journeys for vehicles in child groups should be excluded and not included in the response. This parameter can be used to overcome asset day limits being exceeded. If not specified, then will default to a false, so journeys for vehicles in child groups are included.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journey details successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultTrackingJourneyDetailResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when endDate is before startDate, both vehicleId and groupId are specified, or asset day limit exceeded"
          },
          "404": {
            "description": "No journeys found for the specified criteria"
          }
        }
      },
      "post": {
        "tags": [
          "/tracking/journey"
        ],
        "summary": "Update Journey Details",
        "description": "Updates journey details for the authenticated user",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TrackingJourneyDetailUpdateRequestDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Journey details successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingJourneyDetailResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid journey update data"
          },
          "404": {
            "description": "Journey not found"
          }
        }
      }
    },
    "/customer/{customerId}/journey/detail/vehicle": {
      "get": {
        "tags": [
          "/journey/detail"
        ],
        "summary": "Vehicle Journeys",
        "description": "Returns summary journey details for a vehicle for each journey that started in the specified period. For a private journey only limited details are returned. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate. Either vehicleId or groupId must be specified. If vehicleId is specified, then only journeys for the specified vehicle are included in the output. If groupId is specified, then the details for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are more than 50 journeys that match the search criteria, then by default only the first 50 journeys are returned. To view details of the other journeys you will need to specify values for pageSize and pageIndex. Asset Day Limit The asset day limit on this endpoint is 1000 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss. The end date cannot be before the startDate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle. Must be specified if a value for groupId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group. Must be specified if a value for vehicleId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. If specified cannot be more than 200",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 200
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "description": "Specifies if journeys for vehicles in child groups should be excluded and not included in the response. If not specified, then will default to a false, so journeys for vehicles in child groups are included.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journey details successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampedWithPaginationResult_JourneyDetailVehicleDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when endDate is before startDate, both vehicleId and groupId are specified, or asset day limit exceeded"
          },
          "404": {
            "description": "No journeys found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/journey/detail/vehicle/latest": {
      "get": {
        "tags": [
          "/journey/detail"
        ],
        "summary": "Vehicle Journeys Latest",
        "description": "Returns summary journey details for a vehicle for each journey that was processed by Connect since the specified date/time. For a private journey only limited details are returned. To use this endpoint to return details for only those vehicles where the journey was processed since a specified date/time, the procedure is as follows: 1. Call the Vehicle Journey endpoint to see what journeys have been completed so far. 2. Call the Vehicle Journey Latest endpoint, specify the value for fromDateTime to be processedDateTime from the response of the call to Vehicle Journey endpoint. 3. Call the Vehicle Journey Latest endpoint, specify the value for fromDateTime to be processedDateTime from the previous call to this endpoint. Either vehicleId or groupId must be specified. If vehicleId is specified, then only journeys for the specified vehicle are included in the output. If groupId is specified, then the details for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. Only vehicles that have completed a journey since the specified fromDateTime are included in the output response. ● The value for fromDateTime cannot be more than one hour in the past. ● No details will be returned if the value specified for fromDateTime is a future date/time. Request Limit The request limit on this endpoint is one request every 60 seconds. ● You will receive an HTTP status code of 429 (too many requests) and no details will be returned if you exceed this restriction.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Include journeys that have completed since this date, in UTC, in the format of YYYY-MM-DDThh:mm:ss.ms",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle. Must be specified if a value for groupId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group. Must be specified if a value for vehicleId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "description": "Specifies if journeys for vehicles in child groups should be excluded and not included in the response. If not specified, then will default to a false, so journeys for vehicles in child groups are included.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journey details successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestJourneyDetailsVehicleDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when both vehicleId and groupId are specified, or when specified entities are not visible to user"
          },
          "429": {
            "description": "Too many requests - request limit of one request every 60 seconds exceeded"
          }
        }
      }
    },
    "/customer/{customerId}/journey/detail/driver": {
      "get": {
        "tags": [
          "/journey/detail"
        ],
        "summary": "Driver Journeys",
        "description": "Returns summary journey details for a driver for each journey that started in the specified period. For a private journey only limited details are returned. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate. Either driverId or groupId must be specified. If driverId is specified, then only journeys for the specified driver are included in the output. If groupId is specified, then the details for all drivers in the specified group are included in the output. Either driverId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are more than 50 journeys that match the search criteria, then by default only the first 50 journeys are returned. To view details of the other journeys you will need to specify values for pageSize and pageIndex. Asset Day Limit The asset day limit on this endpoint is 1000 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss. The end date cannot be before the startDate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a driver. Must be specified if a value for groupId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group. Must be specified if a value for driverId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. If specified cannot be more than 200",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 200
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "description": "Specifies if journeys for drivers in child groups should be excluded and not included in the response. If not specified, then will default to a false, so journeys for vehicles in child groups are included.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journey details successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimestampedWithPaginationResult_JourneyDetailDriverDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when endDate is before startDate, both driverId and groupId are specified, or asset day limit exceeded"
          },
          "404": {
            "description": "No journeys found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/journey/detail/driver/latest": {
      "get": {
        "tags": [
          "/journey/detail"
        ],
        "summary": "Driver Journeys Latest",
        "description": "Returns summary journey details for a driver for each journey that was processed by Connect since the specified date/time. For a private journey only limited details are returned. To use this endpoint to return details for only those drivers where the journey was processed since a specified date/time, the procedure is as follows: 1. Call the Driver Journeys endpoint to see what journeys have been completed so far. 2. Call the Driver Journey Latest endpoint, specify the value for fromDateTime to be processedDateTime from the response of the call to Driver Journeys endpoint. 3. Call the Driver Journey Latest endpoint, specify the value for fromDateTime to be processedDateTime from the previous call to this endpoint. Either driverId or groupId must be specified. If driverId is specified, then only journeys for the specified driver are included in the output. If groupId is specified, then the details for all drivers in the specified group are included in the output. Either driverId or groupId can be specified as an input parameter, an error is returned if both are specified. Only drivers that have completed a journey since the specified fromDateTime are included in the output response. ● The value for fromDateTime cannot be more than one hour in the past. ● No details will be returned if the value specified for fromDateTime is a future date/time. Request Limit The request limit on this endpoint is one request every 60 seconds. You will receive an HTTP status code of 429 (too many requests) and no details will be returned if you exceed this restriction.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Include journeys that have completed since this date, in UTC, in the format of YYYY-MM-DDThh:mm:ss.ms",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a driver. Must be specified if a value for groupId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group. Must be specified if a value for driverId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "description": "Specifies if journeys for drivers in child groups should be excluded and not included in the response. If not specified, then will default to a false, so journeys for vehicles in child groups are included.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journey details successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestJourneyDetailsDriverDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when both driverId and groupId are specified, or when specified entities are not visible to user"
          },
          "429": {
            "description": "Too many requests - request limit of one request every 60 seconds exceeded"
          }
        }
      }
    },
    "/customer/{customerId}/journey/detail/driver/triggerEmail": {
      "post": {
        "tags": [
          "/journey/detail"
        ],
        "summary": "Trigger Journey Detailed Driver Report",
        "description": "Triggers email generation for detailed driver journey report",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JourneyDriverReportTriggerRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Report triggered successfully"
          },
          "400": {
            "description": "Bad request - invalid trigger data"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/journey/detailExpense": {
      "get": {
        "tags": [
          "/tracking/journey"
        ],
        "summary": "Journey Expense Details",
        "description": "Returns journey expense details with pagination, excluding journeys without mileage",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date and time of the journey, in UTC, in format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date and time of the journey, in UTC, in format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journey expense details successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultTrackingJourneyDetailResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "No journey expense details found"
          }
        }
      },
      "post": {
        "tags": [
          "/tracking/journey"
        ],
        "summary": "Update Journey and Expense Details",
        "description": "Updates both journey and expense details for the authenticated user",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TrackingJourneyDetailUpdateRequestDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Journey and expense details successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingJourneyDetailResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid update data"
          },
          "404": {
            "description": "Journey not found"
          }
        }
      },
      "delete": {
        "tags": [
          "/tracking/journey"
        ],
        "summary": "Reset Journey Expense",
        "description": "Resets expense information for a specific journey",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "journeyId",
            "in": "query",
            "description": "The identifier of the journey to reset expense for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journey expense successfully reset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingJourneyDetailResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot reset expense for already submitted journey"
          },
          "404": {
            "description": "Journey not found"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/journey/summary": {
      "get": {
        "tags": [
          "/tracking/journey"
        ],
        "summary": "Distance Travelled",
        "description": "Returns the distance travelled (in kilometres) by a vehicle for all journeys where the journey started within the period. The end date for the journey does not have to be within the period. The distance travelled on private journeys that started in the period is included. If groupIds is specified, then the distance travelled by all the vehicles in the specified groups are included in the output. Either vehicleIds or groupIds can be specified as an input parameter, an error is returned if both are specified.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date and time of the period, in UTC, in format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date and time of the period, in UTC, in format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleIds",
            "in": "query",
            "description": "Comma-separated list of vehicle identifiers",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Comma-separated list of group identifiers",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journey summary data successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrackingJourneySummaryResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "When both vehicleIds and groupIds are specified, or when filtering field contains id of resource which is not visible to user"
          },
          "404": {
            "description": "No journeys found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/journey/submit": {
      "post": {
        "tags": [
          "/tracking/journey"
        ],
        "summary": "Submit Journeys",
        "description": "Submits journeys for tax and expense reporting",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrackingJourneySubmitDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Journeys successfully submitted for tax and expense reporting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JourneySubmitResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid submission data"
          },
          "404": {
            "description": "Journeys not found"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/history/vehicle": {
      "get": {
        "tags": [
          "/tracking/history"
        ],
        "summary": "Vehicle Journey History",
        "description": "Returns the journey tracking history for a vehicle for each journey that started in the specified period. No details are returned for a private journey. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. vehicleId must be specified and only journeys for the specified vehicle are included in the output. If there are more than 50 tracking events that match the search criteria, then by default only the first 50 tracking events are returned. To view details of the other events you will need to specify values for pageSize and pageIndex.",
        "operationId": "getEventHistoryByVehicle",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date of tracking history. Only include journeys that started on or after this date, in UTC, in format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date of tracking history. Only include journeys that started before this date, in UTC, in format of YYYY-MM-DDThh:mm:ss. Cannot be before startDate and date range cannot exceed 7 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number (0-indexed) for paginated results. Defaults to 0.",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of tracking events per page. Defaults to 50, maximum 200.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking history successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when endDate is before startDate, date range exceeds 7 days, or validation errors"
          },
          "404": {
            "description": "No tracking events found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/history/vehicle/latest": {
      "get": {
        "tags": [
          "/tracking/history"
        ],
        "summary": "Vehicle Journey History Latest",
        "description": "Returns the latest tracking events that have been processed by Connect for a vehicle since the specified date. No details are returned for a private journey. An error is returned if the value specified for fromDateTime is more than 14 days in the past or is a future date. The output response is limited to a maximum of 500 tracking events as the output is not paged. To use this endpoint to return tracking events for only those vehicles that have been processed by Connect since a specified processed date/time, the procedure is as follows: 1. Call the endpoint with a value for fromDateTime that is not 14 days in the past. 2. In the next call this endpoint, specify the value for fromDateTime to be processedDateTime from the previous call. 3. If there are more than 500 tracking events that have been processed by Connect from the value specified fromDateTime, then only 500 tracking events will be included in the output response. In this case, processedDateTime will be set to the date that the 500th tracking event was processed by Connect and therefore should be used as the value for fromDateTime in subsequent calls.",
        "operationId": "getLatestEventHistoryByVehicle",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Array of group identifiers (alphanumeric). Only include tracking events for vehicles in these groups.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Only include tracking frames that have been processed by Connect since this date and time, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms. Cannot be more than 14 days in the past.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest tracking events successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTrackingHistoryResultsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when fromDateTime is more than 14 days in the past or is a future date"
          },
          "404": {
            "description": "No latest tracking events found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/history/driver": {
      "get": {
        "tags": [
          "/tracking/history"
        ],
        "summary": "Driver Journey History",
        "description": "Returns the journey tracking history for a driver for each journey that started in the specified period. No details are returned for a private journey. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. driverId must be specified and only journeys for the specified driver are included in the output. If there are more than 50 tracking events that match the search criteria, then by default only the first 50 tracking events are returned. To view details of the other events you will need to specify values for pageSize and pageIndex.",
        "operationId": "getEventHistoryByDriver",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a driver.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date of tracking history. Only include journeys that started on or after this date, in UTC, in format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date of tracking history. Only include journeys that started before this date, in UTC, in format of YYYY-MM-DDThh:mm:ss. Cannot be before startDate and date range cannot exceed 7 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Page number (0-indexed) for paginated results. Defaults to 0.",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of tracking events per page. Defaults to 50, maximum 200.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking history successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when endDate is before startDate, date range exceeds 7 days, or validation errors"
          },
          "404": {
            "description": "No tracking events found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/tracking/history/driver/latest": {
      "get": {
        "tags": [
          "/tracking/history"
        ],
        "summary": "Driver Journey History Latest",
        "description": "Returns the latest tracking events that have been processed by Connect for a driver since the specified date. No details are returned for a private journey. An error is returned if the value specified for fromDateTime is more than 14 days in the past or is a future date. The output response is limited to a maximum of 500 tracking events as the output is not paged. To use this endpoint to return tracking events for only those drivers that have been processed by Connect since a specified processed date/time, the procedure is as follows: 1. Call the endpoint with a value for fromDateTime that is not 14 days in the past. 2. In the next call this endpoint, specify the value for fromDateTime to be processedDateTime from the previous call. 3. If there are more than 500 tracking events that have been processed by Connect from the value specified fromDateTime, then only 500 tracking events will be included in the output response. In this case, processedDateTime will be set to the date that the 500th tracking event was processed by Connect and therefore should be used as the value for fromDateTime in subsequent calls",
        "operationId": "getLatestEventHistoryByDriver",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a driver.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Only include tracking frames that have been processed by Connect since this date and time, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms. Cannot be more than 14 days in the past.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest tracking events successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LatestTrackingHistoryResultsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when fromDateTime is more than 14 days in the past or is a future date"
          },
          "404": {
            "description": "No latest tracking events found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/input/usage/vehicle": {
      "get": {
        "tags": [
          "/input"
        ],
        "summary": "Vehicle Input Usage",
        "description": "Returns input usage details for each instance when an input on a vehicle was activated in the specified period. The input deactivation does not have to be within the specified period. Details of an input activated during a private journey are not included in the response. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 90 days. A value for vehicleId must be specified and only inputs activated on the specified vehicle are included in the output. If there are more than 50 input usage details that match the search criteria, then by default only the first 50 input usage details are returned. To view details of the other input usage details you will need to specify values for pageSize and pageIndex.",
        "operationId": "getInputUsageVehicle",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. Maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Input usage details successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInputUsageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when endDate is before startDate, date range exceeds 90 days, or validation errors"
          },
          "404": {
            "description": "No input usage details found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/input/usage/driver": {
      "get": {
        "tags": [
          "/input"
        ],
        "summary": "Driver Input Usage",
        "description": "Returns input usage details for each instance when an input on a vehicle was activated on a vehicle driven by the driver in the specified period. The input deactivation does not have to be within the specified period. Details of an input activated during a private journey are not included in the response. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 90 days. A value for driverId must be specified and only inputs activated on a vehicle driven by the specified driver are included in the output. If there are more than 50 input usage details that match the search criteria, then by default only the first 50 input usage details are returned. To view details of the other input usage details you will need to specify values for pageSize and pageIndex",
        "operationId": "getInputUsageDriver",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a driver.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. Maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Input usage details successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultInputUsageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when endDate is before startDate, date range exceeds 90 days, or validation errors"
          },
          "404": {
            "description": "No input usage details found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/speeding/detail/vehicle": {
      "get": {
        "tags": [
          "/speeding"
        ],
        "summary": "Vehicle Speeding Detail",
        "description": "Returns details for speeding episodes that occurred within the specified period. The end of the speeding episode does not have to be within the specified period. No details are returned for speeding episodes during a private journey. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. A value for either vehicleId or groupId must be specified. If there are more than 50 speeding episodes that match the search criteria, then by default only the first 50 speeding episodes are returned. To view details of the other speeding episodes you will need to specify values for pageSize and pageIndex. Asset Day Limit The asset day limit on this endpoint is 50 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction.",
        "operationId": "getVehicleSpeedingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle. Must be specified if a value for groupId is not specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier of a group. Must be specified if a value for vehicleId is not specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss. Cannot be before startDate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "description": "Specifies if speeding episodes for vehicles in child groups should be excluded and not included in the response. This parameter can be used to overcome asset day limits being exceeded. If not specified, then will default to a false, so speeding episodes for vehicles in child groups are included.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. Maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Speeding episode details successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultSpeedingDetailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when endDate is before startDate, date range exceeds 7 days, asset day limit exceeded, or validation errors"
          },
          "404": {
            "description": "No speeding episodes found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/speeding/detail/vehicle/latest": {
      "get": {
        "tags": [
          "/speeding"
        ],
        "summary": "Latest speeding events for a vehicle",
        "description": "Returns the latest set of speeding events for the specified vehicle, by customerId and assetId",
        "operationId": "getLatestVehicleSpeedingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier of a group.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "From date and time for latest queries.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest set of speeding events for the customerId and assetId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultSpeedingDetailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized - invalid token"
          },
          "404": {
            "description": "Unable to find SpeedingDetailDto for asset [assetId] in Customer with id [customerId]"
          }
        }
      }
    },
    "/customer/{customerId}/speeding/detail/driver": {
      "get": {
        "tags": [
          "/speeding"
        ],
        "summary": "Driver Speeding Detail",
        "description": "Returns details for speeding episodes that occurred within the specified period. The end of the speeding episode does not have to be within the specified period. No details are returned for speeding episodes during a private journey. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. A value for either driverId or groupId must be specified. If there are more than 50 speeding episodes that match the search criteria, then by default only the first 50 speeding episodes are returned. To view details of the other speeding episodes you will need to specify values for pageSize and pageIndex. Asset Day Limit The asset day limit on this endpoint is 100 driver days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction.",
        "operationId": "getDriverSpeedingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier of a driver. Must be provided if a value for groupId is not provided.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier of a group. Must be provided if a value for driverId is not provided.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "description": "Specifies if speeding episodes for drivers in child groups should be excluded and not included in the response. This parameter can be used to overcome asset day limits being exceeded. If not specified, then will default to a false, so speeding episodes for drivers in child groups are included.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. Maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Speeding episode details successfully returned with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultSpeedingDetailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters - when endDate is before startDate, date range exceeds 7 days, driver day limit exceeded, or validation errors"
          },
          "404": {
            "description": "No speeding episodes found for the specified criteria"
          }
        }
      }
    },
    "/customer/{customerId}/speeding/detail/driver/latest": {
      "get": {
        "tags": [
          "/speeding"
        ],
        "summary": "Latest speeding events for a driver",
        "description": "Returns the latest set of speeding events for the specified driver, by customerId and driverId",
        "operationId": "getLatestDriverSpeedingDetails",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier of a driver.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "From date and time for latest queries.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest set of speeding events for the customerId and driverId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultSpeedingDetailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized - invalid token"
          },
          "404": {
            "description": "Unable to find SpeedingDetailDto for driver [driverId] in Customer with id [customerId]"
          }
        }
      }
    },
    "/customer/{customerId}/idling/detail/vehicle": {
      "get": {
        "tags": [
          "/idling"
        ],
        "summary": "Vehicle Idling",
        "description": "Returns idling details for a vehicle for each idling activity block that started in the specified period. No details for idling that occurred inside a private journey are returned. The end date of the idling activity block does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. Either vehicleId or groupId must be specified. If vehicleId is specified, then idling activity for the specified vehicle is included in the output. If groupId is specified, then idling for all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are more than 50 idling activity blocks that match the search criteria, then by default only the first 50 idling blocks are returned. To view details of the other idling activity blocks you will need to specify values for pageSize and pageIndex. Asset Day Limit: The asset day limit on this endpoint is 50 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle. Must be specified if a value for groupId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date and time of the idling activity block, in UTC, in format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date and time of the idling activity block, in UTC, in format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "description": "Specifies if details for child groups should be excluded and not included in the response. If not specified, then will default to a false.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. If specified cannot be more than 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultIdlingDetailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/idling/detail/driver": {
      "get": {
        "tags": [
          "/idling"
        ],
        "summary": "Driver Idling",
        "description": "Returns idling details for a driver for each idling activity block that started in the specified period. No details for idling that occurred inside a private journey. The end date of the idling activity block does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. Either driverId or groupId must be specified. If driverId is specified, then idling activity for the specified driver is included in the output. If groupId is specified, then idling for all drivers in the specified group is included in the output. Either driverId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are more than 50 idling activity blocks that match the search criteria, then by default only the first 50 idling blocks are returned. To view details of the other idling activity blocks you will need to specify values for pageSize and pageIndex. Asset Day Limit: The asset day limit on this endpoint is 50 asset days. You will receive an HTTP status code of 400 (Bad input parameters) and no details will be returned if you exceed this restriction.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a driver. Must be specified if a value for groupId has not been specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date and time of the idling activity block, in UTC, in format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date and time of the idling activity block, in UTC, in format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "excludeChildGroups",
            "in": "query",
            "description": "Specifies if details for child groups should be excluded and not included in the response. If not specified, then will default to a false.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. If specified cannot be more than 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultIdlingDetailDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/driverbehaviourmetrics/driver/summary": {
      "get": {
        "tags": [
          "/driverbehaviourmetrics"
        ],
        "summary": "Driver Behaviour Driver Summary",
        "description": "Returns the driver behaviour summary metrics for a driver. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate must be at least 7 days and cannot be more than 31 days. A value for either driverId or groupId must be specified. If there are more than 50 details that match the search criteria, then by default only the first 50 summary details are returned. To view details of the summary details you will need to specify values for pageSize and pageIndex.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a driver. Must be provided if a value for groupId and vehicleId is not provided.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group. Must be provided if a value for vehicleId and driverId is not provided.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle. Must be provided if a value for groupId and driverId is not provided.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. Maximum pageSize is 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultDrivingBehaviourSummaryDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/driverbehaviourmetrics/vehicle/summary": {
      "get": {
        "tags": [
          "/driverbehaviourmetrics"
        ],
        "summary": "Driver Behaviour Vehicle Summary",
        "description": "Returns the behaviour summary metrics for a vehicle. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate must be at least 7 days and cannot be more than 31 days. A value for either vehicleId or groupId must be specified. If there are more than 50 details that match the search criteria, then by default only the first 50 summary details are returned. To view details of the summary details you will need to specify values for pageSize and pageIndex.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a driver. Must be provided if a value for groupId and vehicleId is not provided.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group. Must be provided if a value for vehicleId and driverId is not provided.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a vehicle. Must be provided if a value for groupId and driverId is not provided.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 50. Maximum pageSize is 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultDrivingBehaviourSummaryDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/driverbehaviourmetrics": {
      "post": {
        "tags": [
          "/driverbehaviourmetrics"
        ],
        "summary": "Driver Behaviour Metrics",
        "description": "POST request to return the behaviour metrics for each day in the period for a driver. As well as a value for the behaviour metric for each day, the response also includes a value for the behaviour metric for the whole of the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate should be at least 7 days. The details for the user are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "metricsForPerson",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriverBehaviourMetricRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviourMetricDailyDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/driverbehaviourmetrics/group": {
      "post": {
        "tags": [
          "/driverbehaviourmetrics"
        ],
        "summary": "Driver Behaviour Group Metrics",
        "description": "POST request to return behaviour metrics for a group for the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate should be at least 7 days. The details for the user are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "metricsForGroup",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBehaviourMetricRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviourMetricDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/driverbehaviourmetrics/rankings/group": {
      "post": {
        "tags": [
          "/driverbehaviourmetrics"
        ],
        "summary": "Driver Behaviour Group Ranking",
        "description": "POST request to return the behaviour rank of a driver in their group. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate should be at least 7 days. The details for the user are in a JSON object included in the HTTP body. Ensure you have set the content-type of the request body to \"application/json;charset=UTF-8\".",
        "operationId": "calculateDriverBehaviourMetricsRankingsForGroup",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriverBehaviourPersonMetricsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviourMetricPersonRankingDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/fuel/vehicle": {
      "get": {
        "tags": [
          "/fuel"
        ],
        "summary": "Vehicle Fuel Consumption",
        "description": "Returns the fuel consumption and CO2 information for a vehicle for all journeys where the journey started within the period. The end date of the journey does not have to be within the period. Includes the fuel used on a private journey. If vehicleId or groupId is not specified, then details for all vehicles are returned. If groupId is specified, then the fuel consumption for all vehicles in the specified group is included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified.",
        "operationId": "getVehicleConsumptions",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss. The end date cannot be before the startDate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier of a vehicle.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier of a group.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleConsumptionResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/fuel/driver": {
      "get": {
        "tags": [
          "/fuel"
        ],
        "summary": "Driver Fuel Consumption",
        "description": "Returns the fuel consumption and CO2 information for all journeys where the journey started in the period. The end date of the journey does not have to be within the period. Separate fuel consumption details are returned for each vehicle driven by a driver. Includes the fuel used on a private journey. If a value for driverId or groupId is not specified, then details for all drivers are returned. If groupId is specified, then the fuel consumption for all vehicles in the specified group is included in the output. Either driverId or groupId can be specified as an input parameter, an error is returned if both are specified.",
        "operationId": "getDriverVehicleConsumptions",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss. The end date cannot be before the startDate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier of a driver.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier of a group.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriverVehicleConsumptionResultDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/customer/{customerId}/ecoscore/vehicle": {
      "get": {
        "tags": [
          "/ecoscore"
        ],
        "summary": "Vehicle Score",
        "description": "● The Driver Behaviour endpoints (summary, metrics, group metrics and Group Ranking) should be used instead of EcoDrive Vehicle Score. Returns the score for a vehicle based on journeys that started in the specified period. The end date of the journey does not have to be within the specified period. The value specified for the endDate Cannot be before startDate and the date range between startDate and endDate cannot be more than 90 days One of vehicleId or groupId must be specified. If vehicleId is specified, then details for the specified vehicle are included in the output. If groupId is specified, then details of all vehicles in the specified group are included in the output. Either vehicleId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are details for more than 20 vehicles to return, then by default only the first 20 vehicles are returned. To view details of the other vehicles you will need to specify values for pageSize and pageIndex. In ecoDrive, a speeding event is when the vehicle's speed exceeds the value set for the ecoDrive speed threshold. The ecoDrive speed threshold is not checked against the road speed limit and is not the same as a speeding episode.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the vehicle. Must be specified if a value for groupId has not been specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group. Must be specified if a value for vehicleId has not been specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 20.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EcoScoreVehicleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/ecoscore/driver": {
      "get": {
        "tags": [
          "/ecoscore"
        ],
        "summary": "Driver Score",
        "description": "The Driver Behaviour endpoints (summary, metrics, group metrics and Group Ranking) should be used instead of EcoDrive Driver Score. Returns the score for a driver based on journeys that started in the specified period. The end date of the journey does not have to be within the specified period. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 90 days Connect API Reference / Version 1.39 / 204 / CLASSIFICATION : MCF-Internal One of driverId or groupId must be provided. If driverId is specified, then details for the specified driver are included in the output. If groupId is specified, then details for all drivers in the specified group are included in the output. Either driveId or groupId can be specified as an input parameter, an error is returned if both are specified. If there are details for more than 20 vehicles to return, then by default only the first 20 vehicles are returned. To view details of the other vehicles you will need to specify values for pageSize and pageIndex. In ecoDrive, a speeding event is when the vehicle's speed exceeds the value set for the ecoDrive speed threshold. The ecoDrive speed threshold is not checked against the road speed limit and is not the same as a speeding episode.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) for the driver. Must be specified if a value for groupId has not been specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group. Must be specified if a value for driverId has not been specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 20.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EcoScorePersonResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/ecoscore/event/vehicle": {
      "get": {
        "tags": [
          "/ecoscore"
        ],
        "summary": "Vehicle Score Events",
        "description": "Returns the vehicle score driving events that occurred during a journey where the journey started in the specified period. The end date of the journey does not have to be within the specified period. Events that occurred during a private journey are included in the response unless the \"exclude private journey from EcoDrive\" option has been selected. Events generated during a private journey will not include address details. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. Either vehicleId or groupId must be specified as an input parameter. If groupId is specified, then the driving events for all vehicles in the specified group are included in the output. In ecoDrive, a speeding event is when the vehicle's speed exceeds the value set for the ecoDrive speed threshold. The ecoDrive speed threshold is not checked against the road speed limit and is not the same as a speeding episode.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "vehicleId",
            "in": "query",
            "description": "Identifier for a vehicle. Must be specified if a value for groupId has not been specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier of a group. Must be specified if a value for vehicleId has not been specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 20.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultEcoScoreEventResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    },
    "/customer/{customerId}/ecoscore/event/driver": {
      "get": {
        "tags": [
          "/ecoscore"
        ],
        "summary": "Driver Score Events",
        "description": "Returns the driver score driving events that occurred for a journey where the journey started in the specified period. The end date of the journey does not have to be within the specified period. Events that occurred during a private journey are included in the response, unless the \"exclude private journey from EcoDrive\" option has been selected. Events generated during a private journey will not include address details. The value specified for the endDate cannot be before startDate and the date range between startDate and endDate cannot be more than 7 days. Either driverId or groupId must be specified as an input parameter. If groupId is specified, then the driving events for all drivers in the specified group are included in the output. In ecoDrive, a speeding event is when the vehicle's speed exceeds the value set for the ecoDrive speed threshold. The ecoDrive speed threshold is not checked against the road speed limit and is not the same as a speeding episode.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "driverId",
            "in": "query",
            "description": "Identifier (alphanumeric) for a driver. Must be specified if a value for groupId has not been specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Identifier (alphanumeric) of a group. Must be specified if a value for driverId has not been specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero. If not specified, then will default to a pageIndex of 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 20.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WithPaginationResultEcoScoreEventResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameters"
          },
          "404": {
            "description": "Resource not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TrackingLiveResultDto": {
        "type": "object",
        "properties": {
          "assetRegistration": {
            "type": "string",
            "description": "Registration of the asset. "
          },
          "assetName": {
            "type": "string",
            "description": "Friendly name of the asset. "
          },
          "assetVin": {
            "type": "string",
            "description": "The vehicle identification number (VIN) of the asset. "
          },
          "assetId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the asset. "
          },
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the driver. "
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver of the vehicle. "
          },
          "driverGroupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the group the driver has been assigned to. "
          },
          "driverGroupName": {
            "type": "string",
            "description": "Name of the group the driver has been assigned "
          },
          "assetGroupId": {
            "type": "string"
          },
          "assetGroupName": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "eventType": {
            "type": "string",
            "description": "Category for the most recent tracking event status of the vehicle. Can be one of the following: ● driving ○ Any tracking event sent when the vehicle is driving ● idling ○ An iding tracking event was received. ● stopped ○ Any tracking event indicating the vehicle has stopped. ● ping ○ A tracking event sent at set intervals. For example received from an OBU attached to a trailer. ● input ○ Any tracking event indicating a change in an input attached to the OBU. ● unknown ○ A non-activity ping is received, which is sent from an electric vehicle to indicate if it’s charging or not. ● defect ○ Vehicle fault information read from the CANBUs has been received. "
          },
          "speed": {
            "type": "number",
            "format": "double",
            "description": "The current speed of the vehicle (in kph). Not included if optional input parameter hideSpeedIfSpeedSensitive was set to true. "
          },
          "odometer": {
            "type": "number",
            "format": "double",
            "description": "Odometer (in km) for the latest tracking event that has been received. "
          },
          "heading": {
            "type": "number",
            "format": "double",
            "description": "Compass heading of the vehicle in degrees clockwise from north. "
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "road": {
            "type": "string"
          },
          "roadNumber": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "description": "The name of the city where the asset is. "
          },
          "postCode": {
            "type": "string",
            "description": "The postcode where the asset is. "
          },
          "country": {
            "type": "string",
            "description": "The name of the country where the asset is. "
          },
          "formattedAddress": {
            "type": "string",
            "description": "Country specific formatted address as a comma separated values using roadNumber, road, city, postcode and country. For example, UK addresses formatted as: roadNumber, road, city, postcode, country French addresses formatted as: roadNumber, road, postcode, city, country "
          },
          "division": {
            "type": "string",
            "description": "The region / county / State from the address. For example: Normandy, Worcestershire, Tuscany, Arizona, "
          },
          "locationName": {
            "type": "string",
            "description": "Name of a POI location if the vehicle is within the geo-fence boundary of a POI location. "
          },
          "locationGroupName": {
            "type": "string",
            "description": "The name of the location category assigned to this POI location. "
          },
          "locationId": {
            "type": "string",
            "description": "The identifier (alphanumeric) for the POI location. "
          },
          "privacy": {
            "type": "boolean",
            "description": "Boolean (true / false) to indicate if the journey is a private journey. "
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assetType": {
            "type": "string"
          },
          "energyType": {
            "type": "string",
            "description": "The energy type for the vehicle. Can be one of the following: ● UNDEFINED ● EV - Battery Electric Vehicle ● PHEV - Plug-in Hybrid Electric Vehicle ● HEV - Hybrid Electric Vehicle ● FECV - Fuel Cell Electric Vehicle (Hydrogen) ● ICE - Internal combustion engine ● CNG - Compressed Natural Gas ● LNG - Liquefied natural gas ● LPG - Liquefied petroleum gas ● BI-FUEL - multi-fuel engines capable of running on two fuels. "
          },
          "fuelType": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of the primary and secondary fuel types for the vehicle.  Values in the list can included: ● PETROL ● DIESEL ● PROPANE ● METHANE ● ELECTRIC ● HYDROGEN "
          },
          "electricRangeKm": {
            "type": "number",
            "format": "float"
          },
          "electricRangeKmEstimated": {
            "type": "boolean"
          },
          "electricBatteryLevelPercent": {
            "type": "number",
            "format": "float",
            "description": "The electric vehicle battery level as a percentage. "
          },
          "electricBatteryLevelPercentEstimated": {
            "type": "boolean",
            "description": "Boolean (true/false) if the electric vehicle battery level was estimated - true if estimated, fal "
          },
          "electricCharging": {
            "type": "boolean"
          },
          "electricChargingTimeRemainingMins": {
            "type": "number",
            "format": "float"
          },
          "fuelLevelLitres": {
            "type": "number",
            "format": "float"
          },
          "fuelLevelPercentage": {
            "type": "number",
            "format": "float"
          },
          "engineTotalHours": {
            "type": "number",
            "format": "float",
            "description": "Engine hours for the latest tracking event that has been received (format is decimal hours) "
          },
          "engineRpm": {
            "type": "number",
            "format": "float"
          },
          "engineTotalHoursType": {
            "type": "string",
            "description": "Either ESTIMATED or CAN. ● CAN indicates the engineTotalHours value has been read from the vehicle’s CANbus, ● ESTIMATED indicates the engineTotalHours value has been calculated from the total vehicle journey times. "
          },
          "serialNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The serial number of the tracking device on the vehicle that sent this tracking event "
          },
          "ignitionStatus": {
            "type": "string"
          },
          "batteryVoltage": {
            "type": "number",
            "format": "float",
            "description": "Charge level of the battery powering the OBU "
          },
          "externalPowerVoltage": {
            "type": "number",
            "format": "float",
            "description": "Charge level of an external power source supplying energy. "
          },
          "activeFaultCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of active fault codes on the vehicle. "
          }
        }
      },
      "GroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the group.",
            "example": "groupID"
          },
          "name": {
            "type": "string",
            "description": "Name of the group.",
            "example": "group-name"
          },
          "parentId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the parent of this group. Not included for the root group in the hierarchy.",
            "example": "rootGroupId"
          },
          "path": {
            "type": "string",
            "description": "List of the unique, unchangeable system generated identifiers (alphanumeric) for all the parent groups (starting from the root node) of this group, separated by full stops. The list includes the identifier for this group.",
            "example": "rootGroupId.groupID",
            "readOnly": true
          },
          "vehicleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of unique, unchangeable system generated identifiers (alphanumeric) for the vehicles assigned to this group. Wil be an empty array for a newly created group.",
            "example": [
              "vehicleID1",
              "vehicleID2"
            ]
          },
          "personIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of unique, unchangeable system generated identifiers (alphanumeric) for the drivers and web users assigned to this group. Wil be an empty array for a newly created group.",
            "example": [
              "personID1",
              "personID2"
            ]
          }
        },
        "required": [
          "id"
        ]
      },
      "GroupSearchResultDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GroupDto"
          },
          {
            "type": "object",
            "properties": {
              "countDrivers": {
                "type": "integer",
                "description": "Count of the number of drivers in this group node.",
                "readOnly": true,
                "example": 1
              },
              "countVehicles": {
                "type": "integer",
                "description": "Count of the number of vehicles in this group node.",
                "readOnly": true,
                "example": 0
              },
              "countSecondaryDrivers": {
                "type": "integer",
                "description": "Count of assigned secondary drivers to group",
                "readOnly": true,
                "example": 1
              },
              "countSecondaryVehicles": {
                "type": "integer",
                "description": "Count of assigned secondary vehicles to group",
                "readOnly": true,
                "example": 0
              }
            }
          }
        ]
      },
      "GroupQueryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name for the group - name must not contain any of the characters <>?\"/|\\%{}*[]",
            "example": "Group Name"
          },
          "parentId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the parent of this group. this value is mandatory, a new top root node for the hierarchy cannot be created.",
            "example": "parentGroupId"
          }
        },
        "required": [
          "name"
        ]
      },
      "ApiErrorDto": {
        "type": "object"
      },
      "LocationSearchResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the location."
          },
          "name": {
            "type": "string",
            "description": "Name of the location."
          },
          "address": {
            "$ref": "#/components/schemas/MMAddressDto"
          },
          "coordinate": {
            "$ref": "#/components/schemas/MMCoordinateDto"
          },
          "customerId": {
            "type": "string",
            "description": "MCF customer identifier (alphanumeric)."
          },
          "customerReference": {
            "type": "string",
            "description": "MCF customer reference."
          },
          "categoryId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the location category."
          },
          "categoryName": {
            "type": "string",
            "description": "The name of the location category."
          },
          "radiusKm": {
            "type": "number",
            "format": "double"
          },
          "polygon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MMCoordinateDto"
            },
            "description": "Array of points that define the geo-fence boundary of the polygon. Only included if the location has a type of POLYGON."
          },
          "type": {
            "type": "string",
            "description": "Specifies if the geo-fence boundary for this location has been defined as a circle or a polygon; can be POLYGON or CIRCULAR."
          },
          "reference": {
            "type": "string",
            "description": "A reference for this location. Included in the response if a reference has been specified for this location."
          },
          "phoneNumber": {
            "type": "string",
            "description": "A phone number for this location. Included in the response if a phone number has been specified for this location."
          },
          "contact": {
            "type": "string",
            "description": "A contact for this location. Included in the response if a contact has been specified for this location."
          },
          "email": {
            "type": "string",
            "description": "An email address for this location. Included in the response if an email address has been specified for this location."
          },
          "notes": {
            "type": "string",
            "description": "The notes for this location. Included in the response if notes have been specified for this location."
          }
        }
      },
      "LocationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Unique name for the location."
          },
          "categoryName": {
            "type": "string",
            "description": "Name of an existing location category."
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto",
            "description": "Address object of the location."
          },
          "coordinate": {
            "$ref": "#/components/schemas/CoordinateDto"
          },
          "radius": {
            "type": "number",
            "format": "double",
            "description": "Radius (in km) of the location boundary. Must be between 0.001 and 1. Must be specified if polygon details are not specified."
          },
          "polygon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CoordinateDto"
            },
            "description": "Array of points that define the geo-fence boundary of the polygon. Must be specified if radius is not specified."
          },
          "reference": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "contact": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "A valid email address for this location. Cannot be more than 50 characters."
          },
          "notes": {
            "type": "string",
            "description": "Notes for this location, Cannot be more than 140 characters."
          }
        },
        "required": [
          "name",
          "categoryName"
        ]
      },
      "MMAddressDto": {
        "type": "object",
        "properties": {
          "formattedAddress": {
            "type": "string"
          },
          "road": {
            "type": "string",
            "description": "Road name."
          },
          "roadNumber": {
            "type": "string",
            "description": "Road number."
          },
          "city": {
            "type": "string",
            "description": "City."
          },
          "postCode": {
            "type": "string",
            "description": "Postcode."
          },
          "country": {
            "type": "string",
            "description": "Country."
          },
          "roadType": {
            "type": "string"
          }
        }
      },
      "MMCoordinateDto": {
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "format": "double",
            "description": "Longitude value for the central point of the location."
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "Latitude value for the central point of the location."
          }
        }
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "roadNumber": {
            "type": "string"
          },
          "road": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "CoordinateDto": {
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "LocationCategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the location category."
          },
          "name": {
            "type": "string",
            "description": "The name of the location category."
          },
          "icon": {
            "type": "string",
            "description": "The icon assigned to the location category."
          }
        },
        "required": [
          "name",
          "icon"
        ]
      },
      "LocationCategoryWithLocationsCountDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LocationCategoryDto"
          },
          {
            "type": "object",
            "properties": {
              "locationsCount": {
                "type": "integer",
                "format": "int64",
                "description": "The number of locations with this location category."
              }
            }
          }
        ]
      },
      "VehicleSearchResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique vehicle identifier"
          },
          "registration": {
            "type": "string",
            "description": "Vehicle registration number"
          },
          "name": {
            "type": "string",
            "description": "Vehicle friendly name"
          },
          "type": {
            "type": "string",
            "description": "Vehicle type"
          },
          "groupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the group assigned to the vehicle."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group assigned to the vehicle."
          },
          "odometerValue": {
            "type": "number",
            "format": "double",
            "description": "Odometer (in km) at the end of the last journey."
          },
          "odometerType": {
            "type": "string",
            "description": "Either GPS or CAN."
          },
          "make": {
            "type": "string",
            "description": "Make of the vehicle."
          },
          "model": {
            "type": "string",
            "description": "Model of the vehicle."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of tags for the vehicle. Not returned if there are no tags for this vehicle."
          },
          "defaultDriverId": {
            "type": "string",
            "description": "Default driver identifier (alphanumeric) for this vehicle. Not returned if there is no default driver for this vehicle."
          },
          "status": {
            "type": "string",
            "description": "Status of the vehicle. Can be one of the following: ● IN_CIRCULATION = Vehicle is active ● IN_MAINTENANCE = Vehicle is off the road for maintenance ● SOLD = Vehicle has been sold"
          },
          "assetCosts": {
            "$ref": "#/components/schemas/VehicleCostsDto",
            "description": "Costs associated with the vehicle."
          },
          "fuelType": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of the primary and secondary fuel types for the vehicle. Values in the list can include: ● PETROL ● DIESEL ● PROPANE ● METHANE ● ELECTRIC ● HYDROGEN"
          },
          "engineTotalHours": {
            "type": "number",
            "format": "float",
            "description": "Engine hours for the latest tracking event that has been received (format is decimal hours)"
          },
          "engineTotalHoursType": {
            "type": "string",
            "description": "Either ESTIMATED or CAN. ● CAN indicates the engineTotalHours value has been read from the vehicle's CANbus, ● ESTIMATED indicates the engineTotalHours value has been calculated from the total vehicle journey times."
          },
          "serialNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The serial number of the tracking device on the vehicle that sends tracking events"
          },
          "activeFaultCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of active fault codes on the vehicle."
          }
        }
      },
      "VehicleSearchResultWithPaginationDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleSearchResultDto"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          }
        }
      },
      "VehicleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique vehicle identifier"
          },
          "name": {
            "type": "string",
            "description": "The friendly name for the vehicle. If a value is specified then ● Cannot contain any one of these characters: <>?*\""
          },
          "registration": {
            "type": "string",
            "description": "Vehicle registration number"
          },
          "groupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of an existing group to be assigned to this vehicle."
          },
          "groupName": {
            "type": "string",
            "description": "Group name"
          },
          "type": {
            "type": "string",
            "description": "The vehicle type. Can be one of the following: ● AMBULANCE ● BICYCLE ● BOAT ● BUS ● BUS_DOUBLE_DECK ● CAR ● CAR_ESTATE ● CAR_SPORTS ● CARAVAN ● CARRIAGE ● COACH ● CONTAINER_ASSET ● DIGGER ● DIGGER_2 ● GRITTER ● HGV ● HORSEBOX ● MAN ● MINIBUS ● MIXER ● MOTORCYCLE ● MOTORHOME ● PDA111 ● RIGID ● SMARTPHONE_PDA ● SWEEPER_LARGE ● SWEEPER_SMALL ● TIPPER ● TIPPER_2 ● TRACTOR ● TRACTOR_TRAILER ● TRAILER ● TRAIN ● VAN ● VAN_BOX ● VAN_SMALL ● WASTE_VEHICLE ● CHERRY_PICKER_HGV ● CHERRY_PICKER_LCV ● VAN_LCV ● POOL_CAR ● HEAVY_VAN_HGV ● TIPPER_MEDIUM"
          },
          "make": {
            "type": "string",
            "description": "Vehicle make"
          },
          "model": {
            "type": "string",
            "description": "Vehicle model"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of tags. If specified"
          },
          "defaultDriverId": {
            "type": "string",
            "description": "Default driver identifier"
          },
          "status": {
            "type": "string",
            "description": "Status of the vehicle (optional). Will remain as its current value on the asset if not present in the update document. Can be one of the following: ● IN_CIRCULATION ● IN_MAINTENANCE ● SOLD"
          },
          "assetCosts": {
            "$ref": "#/components/schemas/VehicleCostsDto",
            "description": "Costs associated with the vehicle. ● If specified replaces all existing asset costs. ● An empty assetCosts document will remove all costs."
          }
        }
      },
      "VehicleCostsDto": {
        "type": "object",
        "properties": {
          "yearOfManufacture": {
            "type": "integer",
            "description": "Year of manufacturer."
          },
          "ownershipStartDate": {
            "type": "string",
            "format": "date",
            "description": "Ownership start date."
          },
          "ownershipEndDate": {
            "type": "string",
            "format": "date",
            "description": "Ownership end date."
          },
          "purchaseCost": {
            "type": "number",
            "format": "decimal",
            "description": "Purchase cost."
          },
          "monthlyLeaseCost": {
            "type": "number",
            "format": "decimal",
            "description": "Monthly leasing cost"
          },
          "monthlyInsuranceCost": {
            "type": "number",
            "format": "decimal",
            "description": "Monthly insurance cost. Numeric with decimals."
          },
          "monthlyMaintenanceCost": {
            "type": "number",
            "format": "decimal",
            "description": "Monthly maintenance cost. Numeric with decimals."
          },
          "scheduledMaintenanceAmount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount spent on scheduled maintenance. Numeric with decimals."
          },
          "unscheduledMaintenanceAmount": {
            "type": "number",
            "format": "decimal",
            "description": "Amount spent on unscheduled maintenance. Numeric with decimals."
          },
          "costPerMileOverLimit": {
            "type": "number",
            "format": "decimal",
            "description": "Cost per mile over agreed limit. Numeric with decimals."
          },
          "costOfDisposal": {
            "type": "number",
            "format": "decimal",
            "description": "Cost of disposal. Numeric with decimals."
          },
          "buyoutAmount": {
            "type": "number",
            "format": "decimal",
            "description": "Buy out amount. Numeric with decimals."
          },
          "costCurrency": {
            "type": "string",
            "description": "ISO currency code for costs."
          }
        }
      },
      "NearestVehiclesSearchResultDto": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string",
            "description": "Vehicle identifier"
          },
          "registration": {
            "type": "string",
            "description": "Vehicle registration"
          },
          "distance": {
            "type": "number",
            "format": "double",
            "description": "Distance to the vehicle in kilometers"
          }
        }
      },
      "VehicleSearchResultWithServiceDateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the vehicle."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group assigned to the vehicle."
          },
          "groupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier of the group assigned to the vehicle."
          },
          "make": {
            "type": "string",
            "description": "The vehicle's make."
          },
          "model": {
            "type": "string",
            "description": "The vehicle's model."
          },
          "version": {
            "type": "string",
            "description": "The vehicle's version."
          },
          "serviceDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The service due date, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "assetRegistration": {
            "type": "string",
            "description": "The registration of the vehicle."
          },
          "assetName": {
            "type": "string",
            "description": "The friendly name of the vehicle."
          },
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the default driver for this vehicle."
          }
        },
        "required": [
          "id"
        ]
      },
      "VehicleSearchResultWithServiceDateWithPaginationDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleSearchResultWithServiceDateDto"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          }
        }
      },
      "VehicleSearchResultWithFaultsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the vehicle."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group assigned to the vehicle."
          },
          "groupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the group assigned to the vehicle."
          },
          "make": {
            "type": "string",
            "description": "The vehicle's make."
          },
          "model": {
            "type": "string",
            "description": "The vehicle's model."
          },
          "version": {
            "type": "string",
            "description": "The vehicle's version."
          },
          "assetRegistration": {
            "type": "string",
            "description": "The registration of the vehicle."
          },
          "assetName": {
            "type": "string",
            "description": "The friendly name of the vehicle."
          },
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the default driver for this vehicle."
          },
          "faults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleSearchResultFaultDto"
            },
            "description": "Array of faults for this vehicle."
          }
        },
        "required": [
          "id"
        ]
      },
      "VehicleSearchResultWithFaultsWithPaginationDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleSearchResultWithFaultsDto"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          }
        }
      },
      "VehicleSearchResultFaultDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the fault."
          },
          "code": {
            "type": "string",
            "description": "A fault code, depending on the fault type."
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date of the fault, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date of the fault, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "startOdometer": {
            "type": "number",
            "format": "double",
            "description": "Odometer reading at fault start"
          },
          "endOdometer": {
            "type": "number",
            "format": "double",
            "description": "Odometer reading at fault end"
          },
          "type": {
            "type": "string",
            "description": "Fault type. Can be one of: CAN_FAULT - CANBus fault, DTC_LAMP - OBDII LAMP fault, DTC_FAULT - OBDII fault, J1939_FAULT - A SAE J1939 fault, J1939_LAMP - A SAE J1939 lamp.",
            "enum": [
              "CAN_FAULT",
              "DTC_LAMP",
              "DTC_FAULT",
              "J1939_FAULT",
              "J1939_LAMP"
            ]
          },
          "inProgress": {
            "type": "boolean",
            "description": "Whether the fault is currently in progress"
          },
          "details": {
            "$ref": "#/components/schemas/FaultDetailsResultDto"
          }
        }
      },
      "FaultDetailsResultDto": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Fault source identifier"
          },
          "sourceDescription": {
            "type": "string",
            "description": "Description of the fault source"
          },
          "occurrenceCount": {
            "type": "integer",
            "description": "Number of occurrences of this fault"
          },
          "fmi": {
            "type": "string",
            "description": "Failure Mode Identifier (FMI)"
          },
          "fmiDescription": {
            "type": "string",
            "description": "Description of the Failure Mode Identifier"
          },
          "lamps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of associated warning lamps"
          }
        }
      },
      "PaginationDto": {
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of items"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages based on the page size"
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items per page"
          },
          "pageIndex": {
            "type": "integer",
            "description": "Current page index (zero-based)"
          }
        }
      },
      "FuelTransactionWithPaginationDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FuelTransactionDTO"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto"
          }
        }
      },
      "FuelTransactionDTO": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string",
            "description": "Identifier (alphanumeric) of the vehicle to which this fuel transaction was matched."
          },
          "cardProvider": {
            "type": "string",
            "description": "The name of the fuel card provider."
          },
          "cardAccountNo": {
            "type": "string",
            "description": "The account number for the fuel card set by the Fuel Card Provider."
          },
          "transactionTimeStamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the transaction occurred, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "transactionId": {
            "type": "string",
            "description": "Identifier (alphanumeric) for the fuel card transaction generated by the Fuel Card Provider."
          },
          "fleetCode": {
            "type": "string",
            "description": "The fleetcode set by the Fuel Card Provider."
          },
          "accountName": {
            "type": "string",
            "description": "The name of the account in Connect."
          },
          "siteId": {
            "type": "string",
            "description": "Identifier for the Fuel Station as set by the Fuel Card Provider."
          },
          "cardNo": {
            "type": "string",
            "description": "The fuel card number. Only the first four and last four digits of the card number will be shown."
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver as registered by the Fuel card provider."
          },
          "quantityLitres": {
            "type": "number",
            "format": "double",
            "description": "Quantity (in litres) of the fuel purchased. For non-fuel transactions is the number of non-fuel items purchased."
          },
          "priceNet": {
            "type": "number",
            "format": "double",
            "description": "Price excluding VAT"
          },
          "currency": {
            "type": "string",
            "description": "Currency used for the purchase."
          },
          "odometerKm": {
            "type": "integer",
            "format": "int64",
            "description": "The odometer reading as recorded at the fuel station."
          },
          "accountVRN": {
            "type": "string",
            "description": "The vehicle registration number linked with the fuel card."
          },
          "enteredVRN": {
            "type": "string",
            "description": "The vehicle registration number entered at the fuel station."
          },
          "transactionType": {
            "type": "string",
            "description": "Type of transaction, fuel or non-fuel"
          },
          "productDescription": {
            "type": "string",
            "description": "What was purchased (Diesel, Premium Diesel etc.)"
          },
          "priceGross": {
            "type": "number",
            "format": "double",
            "description": "Gross price including VAT"
          },
          "hasTranTime": {
            "type": "boolean",
            "description": "True or False to indicate if this transaction has a date/time value."
          },
          "siteType": {
            "type": "string",
            "description": "Site Type the Fuel Station as set by the Fuel Card Provider."
          },
          "siteName": {
            "type": "string",
            "description": "Site name for the Fuel Station as set by the Fuel Card Provider."
          },
          "fuelStationLocation": {
            "type": "string",
            "description": "Address for the Fuel Station."
          },
          "manuallyUpdated": {
            "type": "boolean",
            "description": "True or False to indicate if this transaction has been manually linked to a vehicle."
          }
        }
      },
      "TaxAndExpenseJourneyDetailRequest": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date for the journey search period in UTC format (yyyy-MM-dd'T'HH:mm:ss). Must be within the last 31 days and cannot be in the future. Time component is optional and defaults to 00:00:00 if not specified."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date for the journey search period in UTC format (yyyy-MM-dd'T'HH:mm:ss). Cannot be before start date and maximum range is 31 days. Time component is optional and defaults to 23:59:59 if not specified."
          },
          "vehicleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of vehicle identifiers to retrieve journey details for. Maximum of 50 asset-days can be processed at once (e.g., 50 vehicles for 1 day or 25 vehicles for 2 days). Required for journey detail requests."
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of vehicle group identifiers. When specified, all vehicles within these groups will be included in the journey detail search, subject to the 50 asset-day limit."
          }
        },
        "required": ["startDate", "endDate"]
      },
      "TaxAndExpenseJourneyDetailResult": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Journey start date and time in UTC format (yyyy-MM-dd'T'HH:mm:ss). Indicates when the business travel journey began. Time is provided in UTC timezone for consistent temporal tracking across different geographical locations."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Journey end date and time in UTC format (yyyy-MM-dd'T'HH:mm:ss). Indicates when the business travel journey concluded. Time is provided in UTC timezone for consistent temporal tracking across different geographical locations."
          },
          "vehicleId": {
            "type": "string",
            "description": "Unique identifier for the vehicle used in the journey. References the specific vehicle asset involved in the business travel. Used for vehicle-specific journey tracking and reporting."
          },
          "vehicleRegistration": {
            "type": "string",
            "description": "Vehicle registration number or license plate identifier. Provides human-readable vehicle identification for business travel documentation and compliance reporting. Commonly used for expense and tax reporting."
          },
          "vehicleName": {
            "type": "string",
            "description": "Human-readable name or description of the vehicle. Provides additional context for vehicle identification in business travel reports. May include vehicle type, model, or fleet designation for easier recognition."
          },
          "vehicleGroupId": {
            "type": "string",
            "description": "Unique identifier for the vehicle group or fleet segment. Used for organizational hierarchy and reporting structure within business travel management. Enables grouping of vehicles by department, location, or function."
          },
          "vehicleGroupName": {
            "type": "string",
            "description": "Human-readable name of the vehicle group or fleet segment. Provides descriptive context for vehicle organizational structure in business travel reporting. Used for hierarchical reporting and cost center allocation."
          },
          "driverId": {
            "type": "string",
            "description": "Unique identifier for the driver associated with the journey. References the specific person who operated the vehicle during business travel. Essential for driver-specific expense tracking and compliance reporting."
          },
          "driverName": {
            "type": "string",
            "description": "Full name of the driver who conducted the journey. Provides human-readable identification for business travel documentation and expense reporting. Used in compliance and audit trail requirements."
          },
          "driverGroupId": {
            "type": "string",
            "description": "Unique identifier for the driver group or organizational unit. Used for driver organizational hierarchy and reporting structure within business travel management. Enables grouping by department or function."
          },
          "driverGroupName": {
            "type": "string",
            "description": "Human-readable name of the driver group or organizational unit. Provides descriptive context for driver organizational structure in business travel reporting. Used for hierarchical reporting and cost allocation."
          },
          "durationSeconds": {
            "type": "integer",
            "format": "int64",
            "description": "Total journey duration measured in seconds. Calculated as the time difference between journey start and end times. Used for time-based reporting and efficiency analysis in business travel tracking."
          },
          "distanceKms": {
            "type": "number",
            "format": "double",
            "description": "Total distance traveled during the journey measured in kilometers. Calculated based on GPS tracking or odometer readings. Essential for mileage reimbursement calculations and expense reporting in business travel management."
          },
          "startAddress": {
            "type": "string",
            "description": "Human-readable address or location description where the journey started. Provides context for journey origin in business travel documentation. Used for expense reporting and location-based analysis of travel patterns."
          },
          "endAddress": {
            "type": "string",
            "description": "Human-readable address or location description where the journey ended. Provides context for journey destination in business travel documentation. Used for expense reporting and location-based analysis of travel patterns."
          },
          "startCoordinate": {
            "$ref": "#/components/schemas/Coordinate",
            "description": "GPS coordinate location where the journey started. Contains latitude and longitude information for precise journey origin tracking. Used for accurate distance calculations and location-based business travel analysis."
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/Coordinate",
            "description": "GPS coordinate location where the journey ended. Contains latitude and longitude information for precise journey destination tracking. Used for accurate distance calculations and location-based business travel analysis."
          },
          "classification": {
            "type": "string",
            "description": "Journey classification indicating the business purpose or type. Typical values include 'Business', 'Private', 'Journey Between Sites'. Essential for tax reporting and expense categorization in business travel management."
          },
          "notes": {
            "type": "string",
            "description": "Additional notes or comments about the journey. Provides context, purpose details, or special circumstances related to the business travel. Used for documentation and audit trail purposes."
          },
          "startOdometer": {
            "type": "number",
            "format": "double",
            "description": "Vehicle odometer reading at the start of the journey. Measured in kilometers and used for accurate distance tracking and vehicle maintenance scheduling. Essential for mileage-based expense calculations."
          },
          "endOdometer": {
            "type": "number",
            "format": "double",
            "description": "Vehicle odometer reading at the end of the journey. Measured in kilometers and used for accurate distance tracking and vehicle maintenance scheduling. Essential for mileage-based expense calculations."
          }
        }
      },
      "TaxAndExpenseJourneySummaryVehicleRequest": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date for the summary period in UTC format (yyyy-MM-dd'T'HH:mm:ss). Time component is optional and defaults to 00:00:00 if not specified. Used to define the beginning of the journey summary calculation period."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date for the summary period in UTC format (yyyy-MM-dd'T'HH:mm:ss). Cannot be before start date. Time component is optional and defaults to 23:59:59 if not specified. Used to define the end of the journey summary calculation period."
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of vehicle group identifiers to include in the summary. When specified, only vehicles within these groups will be included in the journey summary calculations. Used for filtering summary results by organizational structure."
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of vehicle summary records to return per page. Must be a positive integer. Used for pagination to manage large result sets. If not specified, a default page size will be applied."
          },
          "pageIndex": {
            "type": "integer",
            "description": "Zero-based page index for pagination. Must be zero or positive integer. Used to navigate through multiple pages of vehicle summary results. First page has index 0."
          }
        },
        "required": ["startDate", "endDate"]
      },
      "TaxAndExpenseJourneySummaryDriverRequest": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date for the summary period in UTC format (yyyy-MM-dd'T'HH:mm:ss). Time component is optional and defaults to 00:00:00 if not specified. Used to define the beginning of the driver journey summary calculation period."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date for the summary period in UTC format (yyyy-MM-dd'T'HH:mm:ss). Cannot be before start date. Time component is optional and defaults to 23:59:59 if not specified. Used to define the end of the driver journey summary calculation period."
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of driver group identifiers to include in the summary. When specified, only drivers within these groups will be included in the journey summary calculations. Used for filtering summary results by organizational structure."
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of driver summary records to return per page. Must be a positive integer. Used for pagination to manage large result sets. If not specified, a default page size will be applied."
          },
          "pageIndex": {
            "type": "integer",
            "description": "Zero-based page index for pagination. Must be zero or positive integer. Used to navigate through multiple pages of driver summary results. First page has index 0."
          }
        },
        "required": ["startDate", "endDate"]
      },
      "TaxAndExpenseManagerSummaryResult": {
        "type": "object",
        "properties": {
          "summaryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxAndExpenseJourneySummaryResult"
            },
            "description": "Array of journey summary results containing aggregated data for vehicles or drivers. Each item represents summary information for a specific vehicle or driver including journey classification totals and distance metrics."
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDto",
            "description": "Pagination information for the summary results including total count, page size, and current page index. Used for navigating through large result sets in business travel summary reports."
          }
        }
      },
      "TaxAndExpenseJourneySummaryResult": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string",
            "description": "Unique identifier for the vehicle in vehicle-based summary reports. References the specific vehicle asset for which journey summary data is provided. Used for vehicle-specific expense reporting and tracking."
          },
          "vehicleRegistration": {
            "type": "string",
            "description": "Vehicle registration number or license plate identifier in vehicle summaries. Provides human-readable vehicle identification for business travel summary documentation and compliance reporting."
          },
          "vehicleName": {
            "type": "string",
            "description": "Human-readable name or description of the vehicle in vehicle summaries. Provides additional context for vehicle identification in business travel summary reports."
          },
          "vehicleGroupId": {
            "type": "string",
            "description": "Unique identifier for the vehicle group or fleet segment in vehicle summaries. Used for organizational hierarchy and reporting structure within business travel summary management."
          },
          "vehicleGroupName": {
            "type": "string",
            "description": "Human-readable name of the vehicle group or fleet segment in vehicle summaries. Provides descriptive context for vehicle organizational structure in business travel summary reporting."
          },
          "driverId": {
            "type": "string",
            "description": "Unique identifier for the driver in driver-based summary reports. References the specific person for whom journey summary data is provided. Used for driver-specific expense reporting and tracking."
          },
          "driverName": {
            "type": "string",
            "description": "Full name of the driver in driver summaries. Provides human-readable identification for business travel summary documentation and expense reporting."
          },
          "driverGroupId": {
            "type": "string",
            "description": "Unique identifier for the driver group or organizational unit in driver summaries. Used for driver organizational hierarchy and reporting structure within business travel summary management."
          },
          "driverGroupName": {
            "type": "string",
            "description": "Human-readable name of the driver group or organizational unit in driver summaries. Provides descriptive context for driver organizational structure in business travel summary reporting."
          },
          "businessKms": {
            "type": "number",
            "format": "double",
            "description": "Total distance in kilometers for journeys classified as 'Business' during the summary period. Used for business expense calculations and tax reporting for legitimate business travel distances."
          },
          "privateKms": {
            "type": "number",
            "format": "double",
            "description": "Total distance in kilometers for journeys classified as 'Private' during the summary period. Used for personal use tracking and tax calculations where private vehicle use needs to be accounted for."
          },
          "journeyBetweenSitesKms": {
            "type": "number",
            "format": "double",
            "description": "Total distance in kilometers for journeys classified as 'Journey Between Sites' during the summary period. Used for inter-office or site-to-site travel tracking in business operations."
          },
          "totalKms": {
            "type": "number",
            "format": "double",
            "description": "Total combined distance in kilometers across all journey classifications during the summary period. Represents the complete distance traveled regardless of journey purpose or classification."
          }
        }
      },
      "AlertAssetSearchRequest": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss. The endDate cannot be more than 7 days from the startDate."
          },
          "vehicleId": {
            "type": "string",
            "description": "Identifier of a vehicle. Must be specified if a value for groupId has not been specified."
          },
          "groupId": {
            "type": "string",
            "description": "Identifier of a group. Must be specified if a value for vehicleId has not been specified."
          },
          "excludeChildGroups": {
            "type": "boolean",
            "description": "Specifies if triggered alerts for vehicles in child groups should be excluded and not included in the response. This parameter can be used to overcome asset day limits being exceeded. If not specified, then will default to a false, so alerts for vehicles in child groups are included."
          },
          "name": {
            "type": "string",
            "description": "Name of the alert. This is a case insensitive partial match. An alert will match if the specified value is found anywhere in the alert name."
          },
          "type": {
            "type": "string",
            "description": "Type of alert - can be one of the following: arriveOnLeaveLocationAlert, cameraAlert, cameraEventAlert, driveTimeAlert, drivingWithoutAuthenticationKeyAlert, exceptionAlert, generalUserAlert, idlingAssetAlert, inputAlert, lateStartAlert, lowStartKeyAlert, lowEVChargeAlert, maintenanceFaultAlert, onTimeLastJobArrivalAlert, outOfHoursAlert, speedOverAlert, stopTimeAlert, tamperEventAlert."
          },
          "subscriberEmail": {
            "type": "string",
            "description": "Email address of alert subscriber. This is a case insensitive partial match. An alert will match if the specified value is found anywhere in the set of email recipients for an alert. Can be used to return all alerts sent to the specified email address."
          },
          "subscriberTelephone": {
            "type": "string",
            "description": "Telephone number of alert subscriber for SMS notifications."
          },
          "subscriberWebUser": {
            "type": "string",
            "description": "Identifier of a Connect user. Can be used to return all alerts sent to the specified Connect user."
          },
          "pageSize": {
            "type": "integer",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 100."
          },
          "pageIndex": {
            "type": "integer",
            "description": "Must be set with pageSize. Default for page index is 0."
          }
        },
        "required": ["startDate", "endDate"]
      },
      "AlertPersonSearchRequest": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "The start date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "The end date and time for the period, in UTC, in the format of YYYY-MM-DDThh:mm:ss. The endDate cannot be more than 7 days from the startDate."
          },
          "driverId": {
            "type": "string",
            "description": "Identifier of a driver. Must be specified if a value for groupId has not been specified."
          },
          "groupId": {
            "type": "string",
            "description": "Identifier of a group. Must be specified if a value for driverId has not been specified."
          },
          "excludeChildGroups": {
            "type": "boolean",
            "description": "Specifies if triggered alerts for drivers in child groups should be excluded and not included in the response. This parameter can be used to overcome asset day limits being exceeded."
          },
          "name": {
            "type": "string",
            "description": "Name of the alert. This is a case insensitive partial match. An alert will match if the specified value is found anywhere in the alert name."
          },
          "type": {
            "type": "string",
            "description": "Type of alert - can be one of the following: arriveOrLeaveLocationAlert, cameraAlert, cameraEventAlert, driveTimeAlert, drivingWithoutAuthenticationKeyAlert, exceptionAlert, genericInputAlert, idlingAssetAlert, inputAlert, lateStartAlert, lowBatteryAlert, lowEVChargeAlert, maintenanceFaultAlert, onTimeLateJobArrivalAlert, outOfHoursAlert, speedOverXAlert, stopTimeAlert, tamperEventAlert."
          },
          "subscriberEmail": {
            "type": "string",
            "description": "Email address of alert subscriber. This is a case insensitive partial match. An alert will match if the specified value is found anywhere in the set of email recipients for an alert. Can be used to return all alerts sent to the specified email address."
          },
          "subscriberTelephone": {
            "type": "string",
            "description": "Telephone number of alert subscriber for SMS notifications."
          },
          "subscriberWebUser": {
            "type": "string",
            "description": "Identifier of a Connect user. Can be used to return all alerts sent to the specified Connect user."
          },
          "pageSize": {
            "type": "integer",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified. If not specified, then will default to a pageSize of 100."
          },
          "pageIndex": {
            "type": "integer",
            "description": "Must be set with pageSize. Default for page index is 0."
          }
        },
        "required": ["startDate", "endDate"]
      },
      "AlertHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "System generated identifier (alphanumeric) of the alert."
          },
          "customerId": {
            "type": "string",
            "description": "The Connect identifier for the customer."
          },
          "dateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the alert was triggered, in UTC, in format of YYYY-MM-DDThh:mm:ss."
          },
          "assetId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the asset."
          },
          "assetRegistration": {
            "type": "string",
            "description": "Registration of the asset."
          },
          "assetName": {
            "type": "string",
            "description": "Friendly name of the asset."
          },
          "personId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the driver of the vehicle."
          },
          "personName": {
            "type": "string",
            "description": "Name of the driver."
          },
          "message": {
            "type": "string",
            "description": "The notification text for the alert."
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscriber"
            },
            "description": "List of subscribers who received notification that the alert was triggered."
          },
          "name": {
            "type": "string",
            "description": "Entered name for the alert."
          },
          "type": {
            "type": "string",
            "description": "Type of alert - can be one of the following: arriveOrLeaveLocationAlert, cameraAlert, cameraEventAlert, driveTimeAlert, drivingWithoutAuthenticationKeyAlert, exceptionAlert, genericInputAlert, idlingAssetAlert, inputAlert, lateStartAlert, lowBatteryAlert, lowEVChargeAlert, maintenanceFaultAlert, onTimeLastJobArrivalAlert, outOfHoursAlert, speedOverXAlert, stopTimeAlert, tamperEventAlert."
          }
        }
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The subscriber type for the notification. Will be one of: email, webuser, telephone."
          },
          "value": {
            "type": "string",
            "description": "The value associated with that subscriber, will be either a web user name, a telephone number or an email address."
          }
        }
      },
      "DriverSearchResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the driver."
          },
          "customerId": {
            "type": "string",
            "description": "MCF customer identifier (alphanumeric)."
          },
          "name": {
            "type": "string",
            "description": "Name of the driver."
          },
          "active": {
            "type": "boolean",
            "description": "Boolean (true / false) to indicate if this is an active driver."
          },
          "activeDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date this driver was set to be active. UTC, in the format of YYYY-MM-DDThh:mm:ss. Not included if the driver is inactive (i.e. active = false)"
          },
          "groupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the group assigned to this driver."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group assigned to this driver."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of tags for the driver."
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverKeyDto"
            },
            "description": "Array of driver keys."
          }
        }
      },
      "DriverDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the driver."
          },
          "customerId": {
            "type": "string",
            "description": "MCF customer identifier (alphanumeric)."
          },
          "name": {
            "type": "string",
            "description": "Name of the driver."
          },
          "active": {
            "type": "boolean",
            "description": "Boolean (true / false) to indicate if this is an active driver."
          },
          "activeDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date this driver was set to be active. UTC, in the format of YYYY-MM-DDThh:mm:ss. Not included if the driver is inactive (i.e. active = false)"
          },
          "groupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) of the group assigned to this driver."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group assigned to this driver."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Comma separated list of tags for the driver."
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriverKeyDto"
            },
            "description": "Array of driver keys."
          }
        }
      },
      "DriverKeyDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value for the key"
          },
          "type": {
            "type": "string",
            "description": "Type of key, Can be one of DALLAS, TachoID or RFID"
          },
          "isPrivateMode": {
            "type": "boolean",
            "description": "Boolean (true / false) to indicate if journeys with this key are always private"
          }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "Username for the web user"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of the user"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address of the user"
          },
          "roleId": {
            "type": "string",
            "description": "Role identifier for the user"
          },
          "externalIdentifier": {
            "type": "string",
            "description": "External identifier for SSO integration"
          }
        }
      },
      "UserCreateResponseDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Security token for password reset"
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time",
            "description": "Token expiry time"
          },
          "user": {
            "$ref": "#/components/schemas/UserDto",
            "description": "Created user details"
          }
        }
      },
      "RoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the role."
          },
          "name": {
            "type": "string",
            "description": "Role name."
          },
          "activeFeatureKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of active features."
          }
        }
      },
      "UserTokenDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Security token for password reset"
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time",
            "description": "Token expiry time"
          }
        }
      },
      "UpdatePasswordRequestDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Security token for password reset"
          },
          "newPassword": {
            "type": "string",
            "description": "New password to set for the user"
          },
          "reseller": {
            "type": "string",
            "description": "Reseller information"
          }
        }
      },
      "UpdatePasswordResultDto": {
        "type": "object",
        "properties": {
          "personId": {
            "type": "string",
            "description": "Unique identifier of the person whose password was updated"
          },
          "personName": {
            "type": "string",
            "description": "Name of the person whose password was updated"
          }
        }
      },
      "LatestTrackingLiveResultsDto": {
        "type": "object",
        "properties": {
          "trackingLiveResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingLiveResultDto"
            },
            "description": "List of tracking live results"
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Processing date and time for this query"
          }
        },
        "description": "Latest tracking live results with processing timestamp"
      },
      "LatestTrackingInputEventsResultsDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique identifier for the asset"
          },
          "assetName": {
            "type": "string", 
            "description": "Name of the asset"
          },
          "assetRegistration": {
            "type": "string",
            "description": "Registration of the asset"
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver"
          },
          "inputEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingLiveInputEventOverviewDto"
            },
            "description": "List of input events"
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "Latitude coordinate"
          },
          "longitude": {
            "type": "number", 
            "format": "double",
            "description": "Longitude coordinate"
          },
          "eventDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the tracking event"
          }
        },
        "description": "Latest tracking input events results"
      },
      "TrackingLiveInputEventOverviewDto": {
        "type": "object",
        "properties": {
          "inputId": {
            "type": "string",
            "description": "Unique identifier for the input"
          },
          "inputLabel": {
            "type": "string",
            "description": "Label of the input"
          },
          "inputState": {
            "type": "string",
            "description": "Current state of the input"
          },
          "eventDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the input event"
          }
        },
        "description": "Input event overview information"
      },
      "FeatureCollection": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["FeatureCollection"],
            "description": "GeoJSON object type"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            },
            "description": "Array of GeoJSON Feature objects"
          }
        },
        "required": ["type", "features"],
        "description": "GeoJSON FeatureCollection object"
      },
      "Feature": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["Feature"],
            "description": "GeoJSON object type"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "properties": {
            "type": "object",
            "additionalProperties": true,
            "description": "Feature properties containing tracking data"
          }
        },
        "required": ["type"],
        "description": "GeoJSON Feature object"
      },
      "Geometry": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["Point", "LineString", "Polygon", "MultiPoint", "MultiLineString", "MultiPolygon"],
            "description": "GeoJSON geometry type"
          },
          "coordinates": {
            "type": "array",
            "description": "Geometry coordinates"
          }
        },
        "required": ["type", "coordinates"],
        "description": "GeoJSON Geometry object"
      },
      "Fleet": {
        "type": "object",
        "properties": {
          "equipment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Equipment"
            },
            "description": "List of equipment in the fleet"
          }
        },
        "description": "AEMP Fleet object containing equipment information",
        "xml": {
          "name": "Fleet"
        }
      },
      "Equipment": {
        "type": "object",
        "properties": {
          "unitInstallDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Unit installation date and time"
          },
          "serialNumber": {
            "type": "string",
            "description": "Equipment serial number"
          },
          "make": {
            "type": "string", 
            "description": "Equipment make"
          },
          "model": {
            "type": "string",
            "description": "Equipment model"
          },
          "equipmentId": {
            "type": "string",
            "description": "Unique equipment identifier"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "description": "AEMP Equipment object",
        "xml": {
          "name": "Equipment"
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "datetime": {
            "type": "string",
            "format": "date-time",
            "description": "Location timestamp"
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "Latitude coordinate"
          },
          "longitude": {
            "type": "number",
            "format": "double", 
            "description": "Longitude coordinate"
          },
          "altitude": {
            "type": "number",
            "format": "double",
            "description": "Altitude in meters"
          },
          "speed": {
            "type": "number",
            "format": "double",
            "description": "Speed in km/h"
          },
          "direction": {
            "type": "number",
            "format": "double",
            "description": "Direction in degrees"
          }
        },
        "description": "AEMP Location object",
        "xml": {
          "name": "Location"
        }
      },
      "UtilisationVehicleResultDto": {
        "type": "object",
        "properties": {
          "utilisations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UtilisationVehicleDto"
            },
            "description": "Array of utilisation details"
          },
          "averageStartTime": {
            "type": "string",
            "description": "Average start time, hh:mm:ss (in UTC)"
          },
          "averageEndTime": {
            "type": "string",
            "description": "Average end time, hh:mm:ss (in UTC)."
          }
        },
        "description": "Vehicle utilisation result containing utilisation data for vehicles"
      },
      "UtilisationVehicleDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the vehicle."
          },
          "assetRegistration": {
            "type": "string",
            "description": "Registration of the vehicle."
          },
          "assetName": {
            "type": "string",
            "description": "Friendly name of the vehicle."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group the vehicle has been assigned to."
          },
          "utilisation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UtilisationDto"
            },
            "description": "Array of utilisation details"
          },
          "averageStartTime": {
            "type": "string",
            "description": "Average start time, hh:mm:ss (in UTC)"
          },
          "averageEndTime": {
            "type": "string",
            "description": "Average end time, hh:mm:ss (in UTC)."
          }
        },
        "description": "Individual vehicle utilisation data"
      },
      "UtilisationDriverResultDto": {
        "type": "object",
        "properties": {
          "utilisations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UtilisationDriverDto"
            },
            "description": "Array of utilisation details."
          },
          "averageStartTime": {
            "type": "string",
            "description": "Average start time, hh:mm:ss (in UTC)."
          },
          "averageEndTime": {
            "type": "string",
            "description": "Average end time, hh:mm:ss (in UTC)."
          }
        },
        "description": "Driver utilisation result containing utilisation data for drivers"
      },
      "UtilisationDriverDto": {
        "type": "object",
        "properties": {
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the driver."
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group assigned to this asset."
          },
          "utilisation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UtilisationDto"
            },
            "description": "Array of utilisation details."
          }
        },
        "description": "Individual driver utilisation data"
      },
      "UtilisationDto": {
        "type": "object",
        "properties": {
          "firstStart": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the first journey start (ignition on), in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "lastStop": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the last journey end (ignition off), in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "totalTime": {
            "type": "integer",
            "format": "int64",
            "description": "Sum of (driveTime + IdleTime + idleTimeWithPto) (in seconds)."
          },
          "driveTime": {
            "type": "integer",
            "format": "int64",
            "description": "Sum of (driveTimeWithPto + driveTimeWithoutPto) (in seconds)."
          },
          "driveTimeWithPto": {
            "type": "integer",
            "format": "int64",
            "description": "Total time driving with PTO active (in seconds)."
          },
          "driveTimeWithoutPto": {
            "type": "integer",
            "format": "int64",
            "description": "Total time driving with PTO inactive (in seconds)."
          },
          "idleTime": {
            "type": "integer",
            "format": "int64",
            "description": "Total time idling with PTO inactive (in seconds)."
          },
          "idleTimeWithPto": {
            "type": "integer",
            "format": "int64",
            "description": "Total time idling with PTO active (in seconds)."
          },
          "stopTime": {
            "type": "integer",
            "format": "int64",
            "description": "Total time when stopped (in seconds)."
          },
          "countOfStopTime": {
            "type": "integer",
            "description": "Number of stops for all journeys."
          }
        },
        "description": "Detailed utilisation information including time breakdowns and PTO data"
      },
      "WithPaginationResultTrackingJourneyDetailResultDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages based on the pageSize"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of journeys that matched the search parameters"
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the request was completed, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingJourneyDetailResultDto"
            },
            "description": "Array of journey details"
          }
        },
        "description": "Paginated result containing journey details"
      },
      "TrackingJourneyDetailResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Journey identifier"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "Start date and time of the journey, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "End date and time of the journey, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "vehicleId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the vehicle"
          },
          "assetRegistration": {
            "type": "string",
            "description": "The registration of the vehicle"
          },
          "assetName": {
            "type": "string",
            "description": "The friendly name of the vehicle"
          },
          "vehicleGroupName": {
            "type": "string",
            "description": "Name of the group the vehicle has been assigned to"
          },
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the driver"
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver which is either the default driver for the vehicle or the driver that signed in with a driver key"
          },
          "distanceKms": {
            "type": "number",
            "description": "Journey distance in KM"
          },
          "startOdometer": {
            "type": "number",
            "description": "The odometer reading at the start of the journey"
          },
          "endOdometer": {
            "type": "number",
            "description": "The odometer reading at the end of the journey"
          },
          "startAddress": {
            "type": "string",
            "description": "Formatted address for the start point of the journey. Not included for a private journey"
          },
          "endAddress": {
            "type": "string",
            "description": "Formatted address for the end point of the journey. Not included for a private journey"
          },
          "startCoordinate": {
            "$ref": "#/components/schemas/Coordinate",
            "description": "Start coordinate of the journey. Not included for a private journey"
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/Coordinate",
            "description": "End coordinate of the journey. Not included for a private journey"
          },
          "startLocationId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the start POI location"
          },
          "startLocationName": {
            "type": "string",
            "description": "The POI location name if the journey started within the geo-fence boundary of a POI location. Not included for a private journey"
          },
          "endLocationId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the end POI location"
          },
          "endLocationName": {
            "type": "string",
            "description": "The POI location name if the journey ended within the geo-fence boundary of a POI location. Not included for a private journey"
          },
          "averageSpeedKph": {
            "type": "number",
            "description": "Average speed (in KpH) during the journey. Not included for a private journey"
          },
          "maximumSpeedKph": {
            "type": "number",
            "description": "Maximum speed (in KpH) during the journey. Not included for a private journey"
          },
          "totalTimeDrivenSeconds": {
            "type": "integer",
            "description": "Total time in seconds that the vehicle was driving"
          },
          "totalTimeDrivenWithPtoSeconds": {
            "type": "integer",
            "description": "Total time in seconds that the vehicle was driving and where the PTO input was active"
          },
          "totalTimeDrivenWithoutPtoSeconds": {
            "type": "integer",
            "description": "Total time in seconds that the vehicle was driving and where the PTO input was inactive"
          },
          "totalTimeIdledSeconds": {
            "type": "integer",
            "description": "Total time in seconds that the vehicle was idling"
          },
          "totalTimeIdledWithPtoSeconds": {
            "type": "integer",
            "description": "Total time in seconds that the vehicle was idling and the PTO was active"
          },
          "totalTimeStoppedSeconds": {
            "type": "integer",
            "description": "Total time in seconds that the vehicle was stopped, i.e. total time from the end of this journey to the start of the next journey. Will be zero if this is the last journey that matched the search parameters"
          },
          "idlingFidelity": {
            "type": "integer",
            "description": "The type of idling that can be detected on the vehicle. Values are: 0 = Idling is not supported, 1 = Idling is detected when the vehicle is stationary, 2 = Idling is detected when the vehicle is stationary and the engine is running"
          },
          "startElectricBatteryLevelPercent": {
            "type": "number",
            "description": "The electric vehicle battery level as a percentage at the start of the journey"
          },
          "startElectricBatteryLevelPercentEstimated": {
            "type": "boolean",
            "description": "Boolean (true/false) if the electric vehicle battery level was estimated - true if estimated, false if received from the vehicle"
          },
          "startElectricRangeKm": {
            "type": "number",
            "description": "The range (in km) for the electric vehicle at the start of the journey"
          },
          "startElectricRangeKmEstimated": {
            "type": "boolean",
            "description": "Boolean (true/false) if the range was estimated - true if estimated, false if received from the vehicle"
          },
          "endElectricBatteryLevelPercent": {
            "type": "number",
            "description": "The electric vehicle battery level as a percentage at the end of the journey"
          },
          "endElectricBatteryLevelPercentEstimated": {
            "type": "boolean",
            "description": "Boolean (true/false) if the electric vehicle battery level was estimated - true if estimated, false if received from the vehicle"
          },
          "endElectricRangeKm": {
            "type": "number",
            "description": "The range (in km) for the electric vehicle at the end of the journey"
          },
          "endElectricRangeKmEstimated": {
            "type": "boolean",
            "description": "Boolean (true/false) if the range was estimated - true if estimated, false if received from the vehicle"
          },
          "startFuelLevelPercentage": {
            "type": "number",
            "description": "The fuel level as a percentage at the start of the journey. If fuel level is received then either startFuelLevelPercentage or startFuelLevelLitres will be returned"
          },
          "startFuelLevelLitres": {
            "type": "number",
            "description": "The fuel level in litres at the start of the journey. If fuel level is received then either startFuelLevelPercentage or startFuelLevelLitres will be returned"
          },
          "endFuelLevelPercentage": {
            "type": "number",
            "description": "The fuel level as a percentage at the end of the journey. If fuel level is received then either endFuelLevelPercentage or endFuelLevelLitres will be returned"
          },
          "endFuelLevelLitres": {
            "type": "number",
            "description": "The fuel level in litres at the end of the journey. If fuel level is received then either endFuelLevelPercentage or endFuelLevelLitres will be returned"
          },
          "startEngineHours": {
            "type": "number",
            "description": "Engine Hours at the start of the journey"
          },
          "endEngineHours": {
            "type": "number",
            "description": "Engine Hours at the end of the journey"
          },
          "electricUsedkWh": {
            "type": "number",
            "description": "Electricity used for this journey in kWh"
          },
          "electricUsedkWhEstimated": {
            "type": "boolean",
            "description": "Boolean (true/false) if the electricity used was estimated - true if estimated, false if received from the vehicle"
          },
          "gasUsedKg": {
            "type": "number",
            "description": "Gas for this journey in Kg"
          },
          "fuelUsedLitres": {
            "type": "number",
            "description": "Petrol or Diesel fuel used in this journey, in litres"
          },
          "fuelUsedPetrolEquivalentLitres": {
            "type": "number",
            "description": "The total energy (Electricity, Gas,Petrol, Diesel) used for this journey is expressed as the petrol equivalent in litres. Consumption as MPG or L/100km can derived as follows: Le/100km = (fuelUsedPetrolEquivalentLitres / distanceKm) * 100, MPGe = (distanceKm / 1.609) / (fuelUsedPetrolEquivalentLitres / 4.546)"
          },
          "CO2Kg": {
            "type": "number",
            "description": "CO2 (in kg) for the total fuel/gas used for this journey"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Indicates if the journey is private"
          },
          "state": {
            "type": "string",
            "description": "Tax and expense journey state"
          },
          "classification": {
            "type": "string",
            "description": "Journey classification (e.g., BUSINESS, PERSONAL, COMMUTE_A, COMMUTE_B)"
          },
          "lastModifiedTime": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp"
          },
          "notes": {
            "type": "string",
            "description": "Journey notes"
          }
        },
        "description": "Detailed journey information including performance metrics, fuel consumption, and tax/expense data"
      },
      "TrackingJourneyDetailRequestDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date and time of the journey, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date and time of the journey, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "vehicleId": {
            "type": "string",
            "description": "Identifier of a vehicle. Must be specified if a value for groupId has not been specified."
          },
          "groupId": {
            "type": "string",
            "description": "Identifier of a group. Must be specified if a value for vehicleId has not been specified."
          },
          "excludeChildGroups": {
            "type": "boolean",
            "description": "Specifies if journeys for vehicles in child groups should be excluded and not included in the response. This parameter can be used to overcome asset day limits being exceeded. If not specified, then will default to a false, so journeys for vehicles in child groups are included."
          },
          "pageIndex": {
            "type": "integer",
            "description": "Specifies the pagination page index. Pages are zero indexed, i.e. the first page has an index value of zero."
          },
          "pageSize": {
            "type": "integer",
            "description": "Specifies the number of items to include on a page. Must be specified if pageIndex has been specified."
          },
          "classifications": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of journey classifications to filter by"
          },
          "ifModifiedSince": {
            "type": "string",
            "format": "date-time",
            "description": "Only return journeys modified since this date"
          }
        },
        "required": ["startDate", "endDate"],
        "description": "Request parameters for journey details query"
      },
      "TrackingJourneyDetailUpdateRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Journey identifier to update"
          },
          "state": {
            "type": "string",
            "description": "Tax and expense journey state"
          },
          "classification": {
            "type": "string",
            "description": "Journey classification"
          },
          "notes": {
            "type": "string",
            "description": "Journey notes"
          },
          "amendedDistanceKms": {
            "type": "number",
            "description": "Amended journey distance in kilometers"
          },
          "amendedReason": {
            "type": "string",
            "description": "Reason for amendment"
          },
          "purposeOfTrip": {
            "type": "string",
            "description": "Purpose of the trip"
          },
          "amendedStartAddressText": {
            "type": "string",
            "description": "Amended start address text"
          },
          "amendedEndAddressText": {
            "type": "string",
            "description": "Amended end address text"
          },
          "amendedStartCoordinate": {
            "$ref": "#/components/schemas/CoordinateDto",
            "description": "Amended start coordinate"
          },
          "amendedEndCoordinate": {
            "$ref": "#/components/schemas/CoordinateDto",
            "description": "Amended end coordinate"
          }
        },
        "required": ["id"],
        "description": "Request parameters for updating journey details"
      },
      "TrackingJourneySubmitDto": {
        "type": "object",
        "properties": {
          "journeyIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of journey identifiers to submit"
          },
          "manualJourneyIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of manual journey identifiers to submit"
          },
          "ccy": {
            "type": "string",
            "description": "Currency code"
          },
          "rate": {
            "type": "number",
            "description": "Reimbursement rate"
          },
          "showPrivateReportSummary": {
            "type": "boolean",
            "description": "Whether to show private report summary"
          }
        },
        "description": "Request parameters for journey submission"
      },
      "JourneySubmitResponseDto": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string",
            "description": "Generated report identifier"
          },
          "submissionStatus": {
            "type": "string",
            "description": "Status of the submission"
          }
        },
        "description": "Response from journey submission"
      },
      "JourneyDetailDriverDto": {
        "type": "object",
        "properties": {
          "driverId": {
            "type": "string",
            "description": "Unique identifier of the driver",
            "example": "driver123"
          },
          "driverGroupName": {
            "type": "string",
            "description": "Name of the group that the driver belongs to",
            "example": "Central Region Drivers"
          },
          "vehicleId": {
            "type": "string",
            "description": "Unique identifier of the vehicle",
            "example": "vehicle456"
          }
        },
        "description": "Response containing journey details for a specific driver",
        "allOf": [
          {
            "$ref": "#/components/schemas/JourneyDetail"
          }
        ]
      },
      "JourneyDetailVehicleDto": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string",
            "description": "Unique identifier of the vehicle",
            "example": "vehicle123"
          },
          "driverId": {
            "type": "string",
            "description": "Unique identifier of the driver",
            "example": "driver456"
          }
        },
        "description": "Response containing journey details for a specific vehicle",
        "allOf": [
          {
            "$ref": "#/components/schemas/JourneyDetail"
          }
        ]
      },
      "JourneyDetail": {
        "type": "object",
        "properties": {
          "vehicleRegistration": {
            "type": "string",
            "description": "Vehicle registration number",
            "example": "AB12 CDE"
          },
          "vehicleName": {
            "type": "string",
            "description": "Friendly name of the vehicle",
            "example": "Fleet Vehicle 1"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the journey started, in UTC, in the format of YYYY-MM-DDThh:mm:ss"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the journey ended, in UTC, in the format of YYYY-MM-DDThh:mm:ss"
          },
          "journeyDurationSeconds": {
            "type": "integer",
            "description": "Total duration of the journey in seconds"
          },
          "startCoordinate": {
            "$ref": "#/components/schemas/Coordinate",
            "description": "GPS coordinate where the journey started"
          },
          "endCoordinate": {
            "$ref": "#/components/schemas/Coordinate",
            "description": "GPS coordinate where the journey ended"
          },
          "startAddress": {
            "type": "string",
            "description": "Address where the journey started"
          },
          "endAddress": {
            "type": "string",
            "description": "Address where the journey ended"
          },
          "distanceKilometres": {
            "type": "number",
            "format": "double",
            "description": "Total distance travelled during the journey in kilometres"
          },
          "averageSpeedKph": {
            "type": "number",
            "format": "double",
            "description": "Average speed during the journey in kilometres per hour"
          },
          "maxSpeedKph": {
            "type": "number",
            "format": "double",
            "description": "Maximum speed reached during the journey in kilometres per hour"
          },
          "fuelUsedLitres": {
            "type": "number",
            "format": "double",
            "description": "Amount of fuel used during the journey in litres"
          },
          "co2EmissionGrams": {
            "type": "number",
            "format": "double",
            "description": "CO2 emissions during the journey in grams"
          }
        },
        "description": "Base journey detail information"
      },
      "TimestampedWithPaginationResult_JourneyDetailVehicleDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages available based on the page size"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of journey details that matched the search parameters"
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the request was completed, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyDetailVehicleDto"
            },
            "description": "Array of journey details for vehicles"
          }
        },
        "description": "Paginated response containing journey details for vehicles with processing timestamp"
      },
      "TimestampedWithPaginationResult_JourneyDetailDriverDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages available based on the page size"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of journey details that matched the search parameters"
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the request was completed, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyDetailDriverDto"
            },
            "description": "Array of journey details for drivers"
          }
        },
        "description": "Paginated response containing journey details for drivers with processing timestamp"
      },
      "LatestJourneyDetailsVehicleDto": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total number of journeys that matched the search parameters"
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the request was completed, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyDetailVehicleDto"
            },
            "description": "Array of journey details"
          }
        },
        "description": "Response containing latest journey details for vehicles"
      },
      "LatestJourneyDetailsDriverDto": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total number of journeys that matched the search parameters"
          },
          "processedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the request was completed, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JourneyDetailDriverDto"
            },
            "description": "Array of journey details"
          }
        },
        "description": "Response containing latest journey details for drivers"
      },
      "JourneyDriverReportTriggerRequest": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date for the report period"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date for the report period"
          }
        },
        "required": ["startDate", "endDate"],
        "description": "Request to trigger journey detailed driver report"
      },
      "Coordinate": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate value"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate value"
          }
        },
        "description": "Geographic coordinate information"
      },
      "TrackingHistoryResultDto": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string",
            "description": "Unique identifier (alphanumeric) of the vehicle."
          },
          "vehicleRegistration": {
            "type": "string",
            "description": "Registration number of the vehicle."
          },
          "vehicleName": {
            "type": "string",
            "description": "Friendly name of the vehicle."
          },
          "vehicleVin": {
            "type": "string",
            "description": "The vehicle identification number (VIN) of the vehicle."
          },
          "driverId": {
            "type": "string",
            "description": "Unique identifier (alphanumeric) of the driver."
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver."
          },
          "eventId": {
            "type": "string",
            "description": "Unique identifier (alphanumeric) of the event."
          },
          "eventDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date/time when the event occurred, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms."
          },
          "eventType": {
            "type": "string",
            "description": "Type of tracking event, such as Journey Start, Journey End, Tracking Point, etc."
          },
          "eventDescription": {
            "type": "string",
            "description": "Description of the tracking event."
          },
          "coordinate": {
            "$ref": "#/components/schemas/CoordinateDto",
            "description": "Geographic coordinates of the tracking event."
          },
          "address": {
            "type": "string",
            "description": "Formatted address of the tracking event location."
          },
          "heading": {
            "type": "number",
            "description": "Compass heading of the vehicle at the time of the tracking event, in degrees (0-359)."
          },
          "speed": {
            "type": "number",
            "description": "Speed of the vehicle at the time of the tracking event, in km/h."
          },
          "fuelLevel": {
            "type": "number",
            "description": "Current fuel level as a percentage (0-100)."
          },
          "odometerReading": {
            "type": "number",
            "description": "Current odometer reading in kilometers."
          }
        },
        "description": "Detailed tracking event information for vehicles and drivers"
      },
      "LatestTrackingHistoryResultsDto": {
        "type": "object",
        "properties": {
          "processedDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date/time that should be used as the fromDateTime parameter in subsequent calls to retrieve the next batch of tracking events, in UTC, in format of YYYY-MM-DDThh:mm:ss.ms."
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of tracking events included in the response (maximum 500)."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingHistoryResultDto"
            },
            "description": "Array of tracking history results."
          }
        },
        "description": "Response containing the latest tracking events with pagination information"
      },
      "WithPaginationResultInputUsageDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of input blocks that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputUsageDto"
            },
            "description": "Array of input usage blocks."
          }
        },
        "description": "Paginated response containing input usage results"
      },
      "InputUsageDto": {
        "type": "object",
        "properties": {
          "vehicleRegistration": {
            "type": "string",
            "description": "The registration of the vehicle."
          },
          "vehicleName": {
            "type": "string",
            "description": "The friendly name of the vehicle."
          },
          "vehicleId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the vehicle."
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver."
          },
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the driver."
          },
          "vehicleGroupName": {
            "type": "string",
            "description": "Name of the group the vehicle has been assigned to."
          },
          "vehicleGroupId": {
            "type": "string",
            "description": "Identifier (alphanumeric) of the group the vehicle has been assigned to."
          },
          "driverGroupName": {
            "type": "string",
            "description": "Name of the group the driver has been assigned to."
          },
          "driverGroupId": {
            "type": "string",
            "description": "Identifier (alphanumeric) of the group assigned to the driver."
          },
          "inputBlock": {
            "$ref": "#/components/schemas/InputBlockDto",
            "description": "Details of the input usage block."
          }
        },
        "description": "Input usage details for vehicles and drivers"
      },
      "InputBlockDto": {
        "type": "object",
        "properties": {
          "eventStartDate": {
            "type": "string",
            "format": "date-time",
            "description": "Input usage start date and time, in UTC in format YYYY-MM-DDThh:mm:ss."
          },
          "eventStartLatitude": {
            "type": "number",
            "description": "Input usage start latitude."
          },
          "eventStartLongitude": {
            "type": "number",
            "description": "Input usage start longitude."
          },
          "eventStartFormattedAddress": {
            "type": "string",
            "description": "Input usage start address formatted as country specific comma separated set of values using roadNumber, road, city, postcode and country."
          },
          "eventStartLocationName": {
            "type": "string",
            "description": "Name of the input usage start POI location."
          },
          "eventStartLocationGroupName": {
            "type": "string",
            "description": "The name of the location category assigned to the input usage start POI location."
          },
          "eventStartLocationId": {
            "type": "string",
            "description": "The identifier (alphanumeric) for the input usage start POI location if the input was started when within the geo-fence boundary of a POI location."
          },
          "eventStartLocationGroupId": {
            "type": "string",
            "description": "The identifier (alphanumeric) of the location category assigned to the input usage start POI location."
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time",
            "description": "Input usage end date and time, in UTC in format YYYY-MM-DDThh:mm:ss."
          },
          "eventEndLatitude": {
            "type": "number",
            "description": "Input usage end latitude."
          },
          "eventEndLongitude": {
            "type": "number",
            "description": "Input usage end longitude."
          },
          "eventEndFormattedAddress": {
            "type": "string",
            "description": "Input usage end address formatted as country specific comma separated set of values using roadNumber, road, city, postcode and country."
          },
          "eventEndLocationName": {
            "type": "string",
            "description": "Name of the input usage end POI location."
          },
          "eventEndLocationGroupName": {
            "type": "string",
            "description": "The name of the location category assigned to the input usage end POI location."
          },
          "eventEndLocationId": {
            "type": "string",
            "description": "The identifier (alphanumeric) for the input end POI location if the input usage ended within the geo-fence boundary of a POI location."
          },
          "eventEndLocationGroupId": {
            "type": "string",
            "description": "The identifier (alphanumeric) of the location category assigned to the input usage end POI location."
          },
          "inputLabel": {
            "type": "string",
            "description": "The label for the input."
          },
          "inputId": {
            "type": "string",
            "description": "The identifier for the input."
          },
          "customLabel": {
            "type": "string",
            "description": "The user defined custom Label for the input."
          },
          "activeStateLabel": {
            "type": "string",
            "description": "The label for input active state. For example for a toggle input this could be \"On\"."
          },
          "inactiveStateLabel": {
            "type": "string",
            "description": "The label for input inactive state. For example for a toggle input this could be \"Off\"."
          },
          "customActiveStateLabel": {
            "type": "string",
            "description": "The user defined custom Label for the input active state."
          },
          "customInactiveStateLabel": {
            "type": "string",
            "description": "The user defined custom Label for the input inactive state."
          },
          "fuelUsed": {
            "type": "number",
            "description": "The fuel used (in Litres)"
          },
          "distanceKms": {
            "type": "number",
            "description": "The distance (in Kms) that the vehicle travelled during the period that the input was used."
          },
          "durationSeconds": {
            "type": "integer",
            "description": "Input usage duration in seconds."
          }
        },
        "description": "Details of input usage block with start/end location and usage metrics"
      },
      "WithPaginationResultSpeedingDetailDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of speeding episodes that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeedingDetailDto"
            },
            "description": "Array of speeding episodes."
          }
        },
        "description": "Paginated response containing speeding episode results"
      },
      "SpeedingDetailDto": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "Speeding episode start date and time, in UTC in format YYYY-MM-DDThh:mm:ss"
          },
          "maxSpeedTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of the maximum speed in this speeding episode, in UTC in format YYYY-MM-DDThh:mm:ss"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "Speeding episode end date and time, in UTC in format YYYY-MM-DDThh:mm:ss"
          },
          "assetId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the vehicle."
          },
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the driver."
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver."
          },
          "assetRegistration": {
            "type": "string",
            "description": "The registration of the vehicle."
          },
          "assetName": {
            "type": "string",
            "description": "The friendly name of the vehicle."
          },
          "startAddress": {
            "type": "string",
            "description": "Address for the start location of the speeding episode, formatted as country specific comma separated set of values using roadNumber, road, city, postcode and country."
          },
          "endAddress": {
            "type": "string",
            "description": "Address for the end location of the speeding episode, formatted as country specific comma separated set of values using roadNumber, road, city, postcode and country."
          },
          "duration": {
            "type": "integer",
            "description": "Duration in seconds for the speeding episode."
          },
          "distanceKms": {
            "type": "number",
            "description": "The distance (in Kms) that the vehicle travelled during the speeding episode."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group assigned to the vehicle."
          },
          "averageSpeed": {
            "type": "number",
            "description": "Average speed (in km/h) during the speeding episode."
          },
          "maxSpeed": {
            "type": "number",
            "description": "Maximum speed (in km/h) during the speeding episode."
          },
          "maxPercentageOver": {
            "type": "number",
            "description": "Percentage of maximum speed over the road speed limit for the vehicle type (assetSpeedLimitKph)."
          },
          "maxSpeedAddress": {
            "type": "string",
            "description": "Address for the maximum speed location of the speeding episode, formatted as country specific comma separated set of values using roadNumber, road, city, postcode and country."
          },
          "maxSpeedCoordinates": {
            "$ref": "#/components/schemas/CoordinateDto",
            "description": "Coordinates for the location of maximum speed within this speeding episode."
          },
          "startCoordinates": {
            "$ref": "#/components/schemas/CoordinateDto",
            "description": "Coordinates for the start of the speeding episode."
          },
          "endCoordinates": {
            "$ref": "#/components/schemas/CoordinateDto",
            "description": "Coordinates for the end of the speeding episode."
          },
          "speedingPointCount": {
            "type": "integer",
            "description": "The number of tracking frames received during the speeding episode."
          },
          "assetSpeedLimitKph": {
            "type": "number",
            "description": "The road speed limit for the vehicle type (in km/h)."
          },
          "roadSpeedLimitKph": {
            "type": "number",
            "description": "The road speed limit (in km/h)."
          },
          "maxSpeedDistanceKm": {
            "type": "number",
            "description": "The distance (in Kms) that the vehicle had travelled when the vehicle reached maximum speed during the journey (not just this speeding episode)."
          },
          "startLocation": {
            "type": "string",
            "description": "The POI location name if the speeding episode started within the geo-fence boundary of a POI location."
          },
          "endLocation": {
            "type": "string",
            "description": "The POI location name if the speeding episode ended within the geo-fence boundary of a POI location."
          },
          "maxSpeedLocation": {
            "type": "string",
            "description": "The POI location name if the maximum speed for the speeding episode started within the geo-fence boundary of a POI location."
          },
          "startLocationId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the speeding start POI location."
          },
          "endLocationId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the speeding end POI location."
          },
          "maxSpeedLocationId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the maximum speed start POI location."
          }
        },
        "description": "Detailed information about a speeding episode including location, timing, and speed metrics"
      },
      "WithPaginationResultIdlingDetailDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of idling activity blocks that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdlingDetailDto"
            },
            "description": "Array of idling activity block details."
          }
        },
        "description": "Paginated response containing idling activity block results"
      },
      "IdlingDetailDto": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the vehicle."
          },
          "vehicleRegistration": {
            "type": "string",
            "description": "The registration of the vehicle."
          },
          "vehicleName": {
            "type": "string",
            "description": "The friendly name of the vehicle."
          },
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the driver which is either the default driver for the vehicle or the driver that signed in with a driver key."
          },
          "driverName": {
            "type": "string",
            "description": "Name of the driver."
          },
          "groupId": {
            "type": "string",
            "description": "System identifier (alphanumeric) of the group the vehicle has been assigned to."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group the vehicle has been assigned to."
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date and time of the idling activity block, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "End date and time of the idling activity block, in UTC, in format of YYYY-MM-DDThh:mm:ss"
          },
          "duration": {
            "type": "integer",
            "description": "Duration in seconds for the idling activity block."
          },
          "coordinate": {
            "$ref": "#/components/schemas/CoordinateDto",
            "description": "Longitude and latitude values for the idling activity block."
          },
          "address": {
            "type": "string",
            "description": "Formatted address for the idling activity block."
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto",
            "description": "POI location information including locationId and locationName."
          }
        },
        "description": "Detailed information about an idling activity block including location, timing, and duration"
      },
      "WithPaginationResultDrivingBehaviourSummaryDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of behaviour metrics that matched the search parameters."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DrivingBehaviourSummaryDto"
            },
            "description": "Array of behaviour metrics."
          }
        },
        "description": "Paginated response containing driver behaviour summary results"
      },
      "DrivingBehaviourSummaryDto": {
        "type": "object",
        "properties": {
          "fuel": {
            "type": "number",
            "description": "Amount of fuel used (in litres)"
          },
          "stops": {
            "type": "integer",
            "description": "Count of the number of stops."
          },
          "harshBraking": {
            "type": "integer",
            "description": "Number of harsh braking events."
          },
          "harshAcceleration": {
            "type": "integer",
            "description": "Number of harsh acceleration events."
          },
          "idleTime": {
            "type": "integer",
            "description": "Total idle time."
          },
          "ptoIdle": {
            "type": "integer",
            "description": "Total time idling with PTO active."
          },
          "distanceKms": {
            "type": "number",
            "description": "Distance travelled (in Kms)."
          },
          "speedingKms": {
            "type": "number",
            "description": "Distance travelled whilst speeding (in kms)"
          },
          "countOfSpeedingEpisodes": {
            "type": "integer",
            "description": "Count of the number of speeding episodes."
          },
          "driveTime": {
            "type": "integer",
            "description": "Total time driving."
          },
          "harshEvents": {
            "type": "integer",
            "description": "Number of harsh events."
          },
          "drivePlusIdleTime": {
            "type": "integer",
            "description": "Sum of idle and drive time."
          },
          "smootherHarshPer100kms": {
            "type": "number",
            "description": "Number of harsh events per 100 kms."
          },
          "smootherPercentage": {
            "type": "number",
            "description": "Smoother KPI as a percentage."
          },
          "safeSpeedPercentage": {
            "type": "number",
            "description": "Safe speed KPI as a percentage."
          },
          "cleanerPercentage": {
            "type": "number",
            "description": "Cleaner KPI as a percentage."
          },
          "groupId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the group."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group."
          },
          "totalCO2Kg": {
            "type": "number",
            "description": "Total CO2 in Kg for the total fuel/gas used for all journeys in this period."
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Summary start date and time, in UTC in format YYYY-MM-DDThh:mm:ss."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Summary end date and time, in UTC in format YYYY-MM-DDThh:mm:ss."
          },
          "vehicleRegistration": {
            "type": "string",
            "description": "The registration of the vehicle."
          },
          "vehicleName": {
            "type": "string",
            "description": "The friendly name of the vehicle."
          },
          "vehicleId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the vehicle."
          },
          "energyType": {
            "type": "string",
            "description": "The energy type for the vehicle. Can be one of the following: UNDEFINED, EV - Battery Electric Vehicle, PHEV - Plug-in Hybrid Electric Vehicle, HEV - Hybrid Electric Vehicle, FCEV - Fuel Cell Electric Vehicle (hydrogen), ICE - Internal combustion engine, CNG - Compressed Natural Gas, LNG - Liquefied natural gas, LPG - Liquefied petroleum gas, BI-FUEL - multi-fuel engines capable of running on two fuels."
          },
          "fuelType": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of the primary and secondary fuel types for the vehicle. Values in the list can included: PETROL, DIESEL, PROPANE, METHANE, ELECTRIC, HYDROGEN."
          },
          "fuelUsedPetrolEquivalentLitres": {
            "type": "number",
            "description": "The total energy (Electricity, Gas, Petrol, Diesel) used for all journeys expressed as the petrol equivalent in litres."
          },
          "gasUsedKg": {
            "type": "number",
            "description": "Gas for all journeys in Kg."
          },
          "electricUsedKWh": {
            "type": "number",
            "description": "Electricity used for all journeys in kWh."
          },
          "fuelUsedLitres": {
            "type": "number",
            "description": "Petrol or Diesel fuel used for all journeys, in litres."
          }
        },
        "description": "Detailed driver behaviour summary metrics including fuel consumption, driving events, and performance KPIs"
      },
      "EcoScoreVehicleResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of vehicles that matched the search parameters."
          },
          "items": {
            "type": "array",
            "description": "Array of vehicles.",
            "items": {
              "$ref": "#/components/schemas/AssetSummaryWithDriversDto"
            }
          }
        },
        "description": "EcoScore vehicle response with pagination and vehicle scoring data"
      },
      "EcoScorePersonResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of drivers that matched the search parameters."
          },
          "items": {
            "type": "array",
            "description": "Array of drivers.",
            "items": {
              "$ref": "#/components/schemas/DriverSummaryWithAssetsDto"
            }
          }
        },
        "description": "EcoScore driver response with pagination and driver scoring data"
      },
      "DriverSummaryWithAssetsDto": {
        "type": "object",
        "properties": {
          "numberOfEngineOverRevvingEvents": {
            "type": "integer",
            "description": "Number of over revving events in the specified period."
          },
          "numberOfSpeedingEvents": {
            "type": "integer",
            "description": "Number of speeding events in the specified period."
          },
          "numberOfHarshAccelerationEvents": {
            "type": "integer",
            "description": "Number of harsh acceleration events in the specified period."
          },
          "numberOfHarshBrakingEvents": {
            "type": "integer",
            "description": "Number of harsh braking events in the specified period."
          },
          "numberOfHarshCorneringEvents": {
            "type": "integer",
            "description": "Number of harsh cornering events in the specified period."
          },
          "numberOfExcessiveIdlingOutsideBaseEvents": {
            "type": "integer",
            "description": "Number of excessive idling events outside the base location specified period."
          },
          "numberOfExcessiveIdlingInsideBaseEvents": {
            "type": "integer",
            "description": "Number of excessive idling events inside the base location specified period."
          },
          "scoreForNumberOfEngineOverRevvingEvents": {
            "type": "integer",
            "description": "Score for the number of over revving events in the specified period."
          },
          "scoreForNumberOfSpeedingEvents": {
            "type": "integer",
            "description": "Score for the number of speeding events in the specified period."
          },
          "scoreForNumberOfHarshAccelerationEvents": {
            "type": "integer",
            "description": "Score for the number of harsh acceleration events in the specified period."
          },
          "scoreForNumberOfHarshBrakingEvents": {
            "type": "integer",
            "description": "Score for the number of harsh braking events in the specified period."
          },
          "scoreForNumberOfHarshCorneringEvents": {
            "type": "integer",
            "description": "Score for the number of harsh cornering events in the specified period."
          },
          "scoreForNumberOfExcessiveIdlingOutsideBaseEvents": {
            "type": "integer",
            "description": "Score for the number of excessive idling events outside the base location specified period."
          },
          "scoreForNumberOfExcessiveIdlingInsideBaseEvents": {
            "type": "integer",
            "description": "Score for the number of excessive idling events inside the base location specified period."
          },
          "scorePerHour": {
            "type": "number",
            "description": "Score per hour for this driver."
          },
          "durationSeconds": {
            "type": "integer",
            "description": "Total duration of all journeys in the specified period."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group assigned to the driver."
          },
          "groupId": {
            "type": "string",
            "description": "Identifier (alphanumeric) of the group assigned to the driver."
          },
          "groupRank": {
            "type": "integer",
            "description": "Positional rank of this driver in the group, with 1 being the highest rank."
          },
          "entityInGroup": {
            "type": "integer",
            "description": "Number of drivers in this same group as this driver."
          },
          "driverName": {
            "type": "string",
            "description": "Driver name."
          },
          "driverId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier (alphanumeric) for the driver."
          }
        },
        "description": "Driver summary with comprehensive scoring and behavior event data"
      },
      "WithPaginationResultEcoScoreEventResponseDto": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages based on the pageSize."
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of events that matched the search parameters."
          },
          "items": {
            "type": "array",
            "description": "Array of driving events.",
            "items": {
              "$ref": "#/components/schemas/EcoScoreEventResponseDto"
            }
          }
        },
        "description": "Paginated response for EcoScore driving events"
      },
      "EcoScoreEventResponseDto": {
        "type": "object",
        "properties": {
          "vehicleRegistration": {
            "type": "string",
            "description": "The registration of the vehicle."
          },
          "vehicleName": {
            "type": "string",
            "description": "The friendly name of the vehicle."
          },
          "vehicleId": {
            "type": "string",
            "description": "Unique, unchangeable system generated identifier for the vehicle."
          },
          "driverName": {
            "type": "string",
            "description": "Driver name."
          },
          "driverId": {
            "type": "string",
            "description": "Identifier (alphanumeric) for the driver."
          },
          "vehicleGroupName": {
            "type": "string",
            "description": "Name of the group the vehicle has been assigned to."
          },
          "vehicleGroupId": {
            "type": "string",
            "description": "Identifier of the group the vehicle has been assigned to."
          },
          "driverGroupName": {
            "type": "string",
            "description": "Name of the group the driver has been assigned to."
          },
          "driverGroupId": {
            "type": "string",
            "description": "Identifier (alphanumeric) of the group the driver has been assigned to."
          },
          "eventType": {
            "type": "string",
            "description": "The vehicle score event type. Can be one of the following: behaviourHarshBraking, behaviourOverSpeed, behaviourExcessIdling, behaviourHarshAcceleration, behaviourHarshCornering, behaviourEngineOverReving."
          },
          "eventDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the driving event, in UTC, YYYY-MM-DDThh:mm:ss."
          },
          "eventDurationMs": {
            "type": "number",
            "description": "Duration of the event in milliseconds."
          },
          "speedKph": {
            "type": "number",
            "description": "The speed of the vehicle (in Kph) when the incident occurred."
          },
          "rateOfAcceleration": {
            "type": "number",
            "description": "Included for a harsh acceleration event."
          },
          "rateOfLateralAcceleration": {
            "type": "number",
            "description": "Included for a harsh cornering event."
          },
          "rateOfDeceleration": {
            "type": "number",
            "description": "Included for a harsh braking event."
          },
          "locationId": {
            "type": "string",
            "description": "The identifier (alphanumeric) for the POI location if the event occurred within the geo-fence boundary of a POI location."
          },
          "locationName": {
            "type": "string",
            "description": "Name of the POI location."
          },
          "locationCategoryId": {
            "type": "string",
            "description": "The identifier (alphanumeric) for the location category."
          },
          "locationCategoryName": {
            "type": "string",
            "description": "The name of the location category."
          },
          "idlingFidelity": {
            "type": "integer",
            "description": "Included if the eventType is for excessive idling. The type of idling that can be detected on the vehicle. Values are: 0 = idling is not supported, 1 = idling is detected when the vehicle is stationary, 2 = idling is detected when the vehicle is stationary and the engine is running."
          }
        },
        "description": "Comprehensive driving event data with vehicle, driver, location and event details"
      }
    }
  }
}
